# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-22 15:02+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

# 0560555d33264dbd87d65d391d723631
#: ../source/userdoc/export.rst:10
msgid "Export and view a solution"
msgstr ""

# b82c8e4258ae4583be4187ba19eaf19c
#: ../source/userdoc/export.rst:12
msgid "There are essentially four ways to view the result of getfem computations:"
msgstr ""

# 04c9d03dff9245e38f681cbcf35122df
#: ../source/userdoc/export.rst:14
msgid "Matlab, with the matlab-interface."
msgstr ""

# d8f55ac02700434391d032eb2f53f73e
#: ../source/userdoc/export.rst:15
msgid "The open-source Mayavi or any other VTK files viewer."
msgstr ""

# e367c9995eb148a981334d7a72997f7f
#: ../source/userdoc/export.rst:16
msgid "The open-source OpenDX program."
msgstr ""

# ae43d9e0228741648318164a384fc178
#: ../source/userdoc/export.rst:17
msgid "The open-source Gmsh program."
msgstr ""

# 80a2953979ce4120af5cb292ec3dd554
#: ../source/userdoc/export.rst:19
msgid "The objects that can be exported are, |m|, |mf| objects, and |smsl|."
msgstr ""

# 7a327575523f4e37a7adbc3db65f0cb9
#: ../source/userdoc/export.rst:22
msgid "Saving mesh and mesh_fem objects for the Matlab interface"
msgstr ""

# ddb18ca19e7a4893b479fc92d7690c09
#: ../source/userdoc/export.rst:24
msgid ""
"If you have installed the Matlab interface, you can simply use "
"``mesh_fem::write_to_file`` and save the solution as a plain text file, "
"and then, load them into Matlab. For example, supposing you have a "
"solution ``U`` on a |mf| ``mf``,::"
msgstr ""

# 766b4d0ba499430da5be53bba5d5e840
#: ../source/userdoc/export.rst:36
msgid "and then, under matlab:"
msgstr ""

# 42493d83252d403f90893831e79035ad
#: ../source/userdoc/export.rst:44
msgid "See the getfem-matlab interface documentation for more details."
msgstr ""

# 031d5575f1ca4d36a096d61331859947
#: ../source/userdoc/export.rst:46
msgid ""
"Two other file formats are supported for export: the `VTK`_ file format, "
"the `OpenDX`_ file format and the `Gmsh`_ post-processing file format. "
"Both can export either a |gf_m| or |gf_mf| , but also the more versatile "
"|gf_smsl|."
msgstr ""

# 9c6c72f1af8c4060ac763662289b3b05
#: ../source/userdoc/export.rst:50
msgid "Examples of use can be found in the examples of the tests directory."
msgstr ""

# bae3167863074be480b58c23fb4c6152
#: ../source/userdoc/export.rst:55
msgid "Producing mesh slices"
msgstr ""

# 45f9eaabecc94ed7a6b572682787f7d0
#: ../source/userdoc/export.rst:57
msgid ""
"|gf| provides \"slicers\" objects which are dedicated to generating post-"
"treatment data from meshes and solutions. These slicers, defined in the "
"file :file:`getfem/getfem_mesh_slicers.h` take a |m| (and sometimes a "
"|mf| with a solution field) on input, and produce a set of simplices "
"after applying some operations such as *intersection with a plane*, "
"*extraction of the mesh boundary*, *refinement of each convex*, "
"*extraction of isosurfaces*, etc. The output of these slicers can be "
"stored in a |gf_smsl| object (see the file "
":file:`getfem/getfem_mesh_slice.h`). A |smsl| object may be considered as"
" a P1 discontinuous FEM on a non-conformal mesh with fast interpolation "
"ability. Slices are made of segments, triangles and tetrahedrons, so the "
"convexes of the original mesh are always simplexified."
msgstr ""

# 07bd32c4d9bf438abea4c2d022221999
#: ../source/userdoc/export.rst:69
msgid ""
"All slicer operation inherit from |gf_sl_a|, it is very easy to create a "
"new slicer. Example of slicers are (some of them use a |gf_sl_ddb| which "
"is just a reference to a |mf| ``mf`` and a field ``U`` on this |mf|)."
msgstr ""

# b3d95acb9bc443d7954fb6f465415e3c
#: ../source/userdoc/export.rst:75
msgid "empty slicer."
msgstr ""

# 23d3178905d14e83a14a748c368215f9
#: ../source/userdoc/export.rst:79
msgid "extract the boundary of a mesh."
msgstr ""

# b611914396af41c59ecced91b1c800e2
#: ../source/userdoc/export.rst:83
msgid ""
"apply a deformation to the mesh , the deformation field is defined on a "
"|mf|."
msgstr ""

# b748de2bbde14ac0b333f755acfd7fc5
#: ../source/userdoc/export.rst:87
msgid ""
"cut the mesh with a half space (if ``orient`` = -1 or +1), or a plane (if"
" ``orient`` = 0), ``x0`` being a node of the plane, and ``n`` being a "
"normal of the plane."
msgstr ""

# 13469a5712594e15ab17bc3ef6725bab
#: ../source/userdoc/export.rst:93
msgid ""
"cut with the interior (``orient``=-1), boundary (``orient``=0) or "
"exterior (``orient``=+1) or a sphere of center ``x0`` and radius ``R``."
msgstr ""

# 93dd188cd10b4b67bb4dce4fd815bdd9
#: ../source/userdoc/export.rst:98
msgid ""
"slice with the interior/boundary/exterior of a cylinder of axis "
"``(x0,x1)`` and radius ``R``."
msgstr ""

# 83ab806237bb42918ace07f3804c7285
#: ../source/userdoc/export.rst:103
msgid ""
"cut with the isosurface defined by the scalar field ``mfU`` and ``val``. "
"Keep only simplices where ::math:`u(x)<val` (``orient``=-1), "
":math:`u(x)=val` (``orient=0`` or :math:`u(x)>val`."
msgstr ""

# a0c59c5b0319496ca1369f8f1029413a
#: ../source/userdoc/export.rst:109
msgid "cut the convexes with the convexes of the mesh ``m2``."
msgstr ""

# 8d118754e96741748b920af047741088
#: ../source/userdoc/export.rst:113
msgid "merges the output of two slicer operations."
msgstr ""

# 1ef683a85bdf479dbaa1d57d69e921f6
#: ../source/userdoc/export.rst:117
msgid "intersect the output of two slicer operations."
msgstr ""

# d7bf8ac84def40fa9fb756e234f50cc3
#: ../source/userdoc/export.rst:121
msgid "return the complementary of a slicer operation."
msgstr ""

# de0ee07651d64cc496dfcac1f2aa06b4
#: ../source/userdoc/export.rst:125
msgid ""
"slicer whose side-effect is to build the mesh ``edges_m`` with the edges "
"of the sliced mesh."
msgstr ""

# d4d4e0f4a720430285a665257a4d772e
#: ../source/userdoc/export.rst:130
msgid ""
"in some (rare) occasions , it might be useful to build a mesh from a "
"slice. Note however that there is absolutely no guaranty that the mesh "
"will be conformal (although it is often the case)."
msgstr ""

# ec58039218574f0e98dd1317f9cffa0f
#: ../source/userdoc/export.rst:136
msgid ""
"record the output of the slicing operation into a |smsl| object. Note "
"that it is often more convenient to use the "
"``stored_mesh_slice::build(...)`` method to achieve the same result."
msgstr ""

# e45be33c5ba74d4281a55c37243d6a1b
#: ../source/userdoc/export.rst:142
msgid "shrink or expand each convex with respect to its gravity center."
msgstr ""

# c66663efafb649dfbd2de936263d7419
#: ../source/userdoc/export.rst:144
msgid ""
"In order to apply these slicers, a ``getfem::mesh_slicer(mesh&)`` object "
"should be created, and the |gf_sl_a| are then stacked with "
"``mesh_slicer::push_back_action(slicer_action&)`` and "
"``mesh_slicer::push_front_action(slicer_action&)``. The slicing operation"
" is finally executed with ``mesh_slicer::exec(int nrefine)`` (or "
"``mesh_slicer::exec(int nrefine, const mesh_region &cvlst)`` to apply the"
" operation to a subset of the mesh, or its boundary etc.)."
msgstr ""

# 69cb999641f44d218a6444194f88143c
#: ../source/userdoc/export.rst:152
msgid ""
"The ``nrefine`` parameter is very important, as the \"precision\" of the "
"final result will depend on it: if the data that is represented on the "
"final slice is just P1 data on convexes with a linear geometric "
"transformation, ``nrefine = 1`` is the right choice, but for P2, P3, non "
"linear transformation etc, it is better to refine each convex of the "
"original mesh during the slicing operation. This allows an accurate "
"representation of any finite element field onto a very simple structure "
"(linear segment/triangles/tetrahedrons with P1 discontinuous data on "
"them) which is what most visualization programs (gmsh, mayavi, opendx, "
"matlab, etc.) expect."
msgstr ""

# 6db3f424727445b9a3b1b00cb4c92d81
#: ../source/userdoc/export.rst:161
msgid ""
"Example of use (cut the boundary of a mesh ``m`` with a half-space, and "
"save the result into a |smsl|)::"
msgstr ""

# 2e79b302f9ac44d2b6028d1a8188f7b2
#: ../source/userdoc/export.rst:174
msgid ""
"In order to build a |gf_smsl| object during the slicing operation, the "
"``stored_mesh_slice::build()`` method is often more convenient than using"
" explicitly the ``slicer_build_stored_mesh_slice`` slicer::"
msgstr ""

# f11a19e81ddd4f208d983364e59bafb0
#: ../source/userdoc/export.rst:181
msgid ""
"The simplest way to use these slices is to export them to |vtk|, "
"|opendx|, or |gmsh|. The file :file:`getfem/getfem_export.h` contains "
"three classes: |gf_vtk_export|, |gf_dx_export| and |gf_pos_export|."
msgstr ""

# fcfa4975744e4090b12fb750da005fe6
#: ../source/userdoc/export.rst:187
msgid "Exporting |m|, |mf| or slices to VTK"
msgstr ""

# cad907162e6047189d1584b91139cbc1
#: ../source/userdoc/export.rst:189
msgid ""
"First, it is important to know the limitation of VTK data files: each "
"file can contain only one mesh, with at most one scalar field and one "
"vector field and one tensor field on this mesh (in that order). VTK files"
" can handle data on segment, triangles, quadrangles, tetrahedrons and "
"hexahedrons. Although quadratic triangles, segments etc are said to be "
"supported, it is just equivalent to using ``nrefine=2`` when building a "
"slice. VTK data file do support meshes with more than one type of element"
" (i.e. meshes with triangles and quadrangles, for example)."
msgstr ""

# 54aaf84f1a454cf18eb33118c6722568
#: ../source/userdoc/export.rst:198
msgid "For example, supposing that a |smsl| ``sl`` has already been built::"
msgstr ""

# b1c46039fda3403fb7bea5a2c163680d
#: ../source/userdoc/export.rst:207
msgid ""
"In this example, the fields ``P`` and ``U`` are interpolated on the slice"
" nodes, and then written into the VTK field. The vector fields should "
"always be written after the scalar fields (and the tensor fields should "
"be written last)."
msgstr ""

# 783f8a3136444a99a6beb6d0a8dfa218
#: ../source/userdoc/export.rst:211
msgid "It is also possible to export a |mf| without having to build a slice::"
msgstr ""

# 46c886d1fc2445b88f4b0704eac9f67e
#: ../source/userdoc/export.rst:220
msgid ""
"Note however that with this approach, the ``vtk_export`` will map each "
"convex/fem of ``mfu`` to a VTK element type. As VTK does not handle "
"elements of degree greater than 2, there will be a loss of precision for "
"higher degree FEMs."
msgstr ""

# 1f968ff3c62f4bad8f16dddd7b832273
#: ../source/userdoc/export.rst:225
msgid "Exporting |m|, |mf| or slices to OpenDX"
msgstr ""

# 89ba5b17e33c43f2a3e0be22e2f7fa75
#: ../source/userdoc/export.rst:227
msgid ""
"The OpenDX data file is more versatile than the VTK one. It is able to "
"store more that one mesh, any number of fields on these meshes etc. "
"However, it does only handle elements of degree 1 and 0 (segments, "
"triangles, tetrahedrons, quadrangles etc.). And each mesh can only be "
"made of one type of element, it cannot mix triangles and quadrangles in a"
" same object. For that reason, it is generally preferable to export "
"|gf_smsl| objects (in which non simplex elements are simplexified, and "
"which allows refinement of elements) than |gf_mf| and |gf_m| objects."
msgstr ""

# 31573801e31e46b8bb2b4814d2349318
#: ../source/userdoc/export.rst:236
msgid "The basic usage is very similar to |gf_vtk_export|::"
msgstr ""

# fa86aa7d44b74231b485aa6036061fad
#: ../source/userdoc/export.rst:242
msgid ""
"Moreover, |gf_dx_export| is able to reopen a '.dx' file and append new "
"data into it. Hence it is possible, if many time-steps are to be saved, "
"to view intermediate results in OpenDX during the computations. The "
"prototype of the constructor is::"
msgstr ""

# be57bb0f3f33450488d108bac9d4f9ac
#: ../source/userdoc/export.rst:249
msgid ""
"An example of use, with multiple time steps (taken from "
":file:`tests/dynamic_friction.cc`)::"
msgstr ""

# aa5dcea91374401da343b244ff9f9b7a
#: ../source/userdoc/export.rst:270
msgid ""
"In this example, an OpenDX \"time series\" is created, for each time "
"step, two data fields are saved: a vector field called \"deformation\", "
"and a scalar field called \"von_mises_stress\"."
msgstr ""

# 7408d7bf1dd145b5870a46c5309f18d5
#: ../source/userdoc/export.rst:274
msgid ""
"Note also that the ``dx_export::exporting_mesh_edges()`` function has "
"been called. It implies that for each mesh exported, the edges of the "
"original mesh are also exported (into another OpenDX mesh). In this "
"example, you have access in OpenDX to 4 data fields: \"deformation\", "
"\"deformation_edges\", \"von_mises_stress\" and "
"\"von_mises_stress_edges\"."
msgstr ""

# e9540e83acd04a0c8fd20fff35c6a5cb
#: ../source/userdoc/export.rst:280
msgid ""
"The ``tests/dynamic_friction.net`` is an example of OpenDX program for "
"these data (run it with ``cd tests; dx -edit dynamic_friction.net`` , "
"menu \"Execute/sequencer\")."
msgstr ""

