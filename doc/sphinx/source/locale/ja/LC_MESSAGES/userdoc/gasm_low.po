# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-22 15:02+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

# 05d38800154c46cc908a70f897fe99ac
#: ../source/userdoc/gasm_low.rst:12
msgid "Compute arbitrary terms - low-level generic assembly procedures"
msgstr ""

# e10468c926574c5881402d24f7e8a859
#: ../source/userdoc/gasm_low.rst:14
msgid ""
"This section present the first version of generic assembly procedure "
"which has been implemented in |gf|. It allows to easily make the assembly"
" of arbitrary matrices in the linear case. In the nonlinear case, some "
"special \"non_linear_term\" object have to be implemented, which could be"
" a bit tricky and obliges to use very low-level internal tools of |gf|. "
"The high-level generic assembly has been developped to circumvent these "
"difficulties (see :ref:`ud-gasm-high`)."
msgstr ""

# 25d0d3c983714e668a0fb92d0dd95309
#: ../source/userdoc/gasm_low.rst:16
msgid ""
"As it can be seen in the file :file:`getfem/getfem_assembling.h`, all the"
" previous assembly procedures use a |gf_gasm| object and provide it an "
"adequate description of what must be done. For example, the assembly of a"
" volumic source term for a scalar FEM is done with the following excerpt "
"of code::"
msgstr ""

# 1c00be1af1a84a1d98a0f660c8d219b8
#: ../source/userdoc/gasm_low.rst:31
msgid ""
"The first instructions declare the object, and set the data that it will "
"use: a |mim| object which holds the integration methods, two |mf| "
"objects, the input data ``F``, and the destination vector ``B``."
msgstr ""

# fc736824d6c64ee0b5054346126642ff
#: ../source/userdoc/gasm_low.rst:35
msgid ""
"The input data is the vector :math:`F`, defined on ``mfdata``. One wants "
"to evaluate :math:`\\sum_{j} f_j (\\int_\\Omega \\phi^i \\psi^j)`. The "
"instruction must be seen as something that will be executed for each "
"convex ``cv`` of the mesh. The terms ``#1`` and ``#2`` refer to the first"
" |mf| and the second one (i.e. ``mf`` and ``mfdata``).  The instruction "
"``Z=data(#2);`` means that for each convex, the \"tensor\" ``Z`` will "
"receive the values of the first data argument provided with "
"``push_data``, at indexes corresponding to the degrees of freedom "
"attached to the convex of the second (``#2``) |mf| (here, ``Z = "
"F[mfdata.ind_dof_of_element(cv)]``."
msgstr ""

# cfdc64582799405792c88d5af3335ac1
#: ../source/userdoc/gasm_low.rst:45
msgid ""
"The part ``V(#1)+=...`` means that the result of the next expression will"
" be accumulated into the output vector (provided with ``push_vec``). Here"
" again, ``#1`` means that we will write the result at indexes "
"corresponding to the degrees of freedom of the current convex with "
"respect to the first (``#1``) |mf|."
msgstr ""

# 3cb09d5ad22f4c04af73b5e39458bf7e
#: ../source/userdoc/gasm_low.rst:50
msgid ""
"The right hand side ``comp(Base(#1).Base(#2))(:,j).Z(j)`` contains two "
"operations. The first one is a computation of a tensor on the convex: "
"``comp(Base(#1).Base(#2))`` is evaluated as a 2-dimensions tensor, "
":math:`\\int\\phi^i \\psi^j`, for all degrees of freedom :math:`i` of "
"``mf`` and :math:`j` of ``mfdata`` attached to the current convex. The "
"next part is a reduction operation, ``C(:,j).Z(j)``: each named index "
"(here :math:`j`) is summed, i.e. the result is :math:`\\sum_j c_{i,j} "
"z_j`."
msgstr ""

# 06eee08ff0f34caba45e7c8604195467
#: ../source/userdoc/gasm_low.rst:58
msgid ""
"The integration method used inside ``comp(Base(#1).Base(#2))`` is taken "
"from ``mim``. If you need to use integration methods from another |mim| "
"object, you can specify it as the first argument of ``comp``, for example"
" ``comp(\\%2, Base(#1).Grad(#2))`` will use the second |mim| object (New "
"in getfem++-2.0)."
msgstr ""

# a0314a1793b3428fb6dddfc142c9dab5
#: ../source/userdoc/gasm_low.rst:63
msgid ""
"An other example is the assembly of the stiffness matrix for a vector "
"Laplacian::"
msgstr ""

# a700155d5ea647c69ffccdae20d46299
#: ../source/userdoc/gasm_low.rst:75
msgid ""
"Now the output is written in a sparse matrix, inserted with "
"``assem.push_mat(SM)``. The ``$1`` in ``M$1(#1,#1)`` just indicates that "
"we refer to the first matrix \"pushed\" (it is optional, but if the "
"assembly builds two matrices, the second one must be referred this way). "
"The ``sym`` function ensure that the result is symmetric (if this is not "
"done, some round-off errors may cancel the symmetricity, and the assembly"
" will be a little bit slower). Next, the ``comp`` part evaluates a 7D "
"tensor,"
msgstr ""

# 0049993f9ffd4a0b94bbd598fc6bc6e4
#: ../source/userdoc/gasm_low.rst:87
msgid ""
"where :math:`\\varphi^i_j` is a :math:`jth` component of the :math:`ith` "
"base function of ``mf`` and :math:`\\psi^p` is a (scalar) base function "
"of the second |mf|. Since we want to assemble"
msgstr ""

# bd96ef53b4704003bd239ed004d3bf9f
#: ../source/userdoc/gasm_low.rst:97
msgid "the reduction is:"
msgstr ""

# 4fe8092c89274e67b410b08097990d21
#: ../source/userdoc/gasm_low.rst:105
msgid ""
"In the ``comp`` function, ``vGrad`` was used instead of ``Grad`` since we"
" said that we were assembling a *vector* Laplacian: that is why each "
"``vGrad`` part has three dimensions (dof number, component number, and "
"derivative number). For a scalar Laplacian, we could have used "
"``comp(Grad(#1).Grad(#1).Base(#2))(:,k,:,k,p).a(p)``. But the vector form"
" has the advantage to work in both vector and scalar case."
msgstr ""

# 0a78e805e03446c29e8dc05aa5f0bd14
#: ../source/userdoc/gasm_low.rst:112
msgid ""
"The last instruction, ``assem.assembly()``, does evaluate the expression "
"on each convex. For an assembly over a boundary just call "
"``assem.assembly(rg)``, where ``rg`` is a |gf_mr| object.  ``rg`` might "
"also be a number, in that case the mesh region taken into account is "
"``mim.linked_mesh().region(rg)``."
msgstr ""

# 6387c4c83b6743e0bccb476ad6bec49d
#: ../source/userdoc/gasm_low.rst:117
msgid ""
"The third example shows how to compute the :math:`L^2` norm of a scalar "
"or vector field on a mesh boundary::"
msgstr ""

# afc8734d1605472cb1a79e8bbcbc2419
#: ../source/userdoc/gasm_low.rst:129
msgid "This one is easy to read. When ``assembly`` returns, ``v[0]`` will contain"
msgstr ""

# 27bc9ecad1b14e018a59bedb416ecd88
#: ../source/userdoc/gasm_low.rst:135
msgid ""
"The fourth and last example shows an (sub-optimal) assembly of the linear"
" elasticity problem with a complete Hooke tensor::"
msgstr ""

# be03157285c045d69e4d4dd3d31c64af
#: ../source/userdoc/gasm_low.rst:143
msgid "The original equations are:"
msgstr ""

# 4145839b57cc454093c1e2946d771e86
#: ../source/userdoc/gasm_low.rst:151
msgid ""
"where :math:`h` is the Hooke tensor, and :math:`:` means the scalar "
"product between matrices. Since we assume it is not constant, :math:`h` "
"is given on the second |mf|: :math:`h_{ijkl}(x)=\\sum_p h_{ijkl}^p "
"\\psi^p`. Hence the first line declares that the first data \"pushed\" is"
" indeed a five-dimensions tensor, the first fourth ones being all equal "
"to the target dimension of the first |mf|, and the last one being equal "
"to the number of degrees of freedom of the second |mf|. The ``comp`` part"
" still computes the same 7D tensor than for the vector Laplacian case. "
"From this tensor, one evaluates "
":math:`\\varepsilon(\\varphi^i)_{jk}\\varepsilon(\\phi^l)_{mn}\\psi^p` "
"via permutations, and finally the expression is reduced against the hook "
"tensor."
msgstr ""

# b567c66251c342a883c3ab26884f4438
#: ../source/userdoc/gasm_low.rst:164
msgid "available operations inside the ``comp`` command"
msgstr ""

# 4a11120cbb754ee887ccdc6457ec9a5f
#: ../source/userdoc/gasm_low.rst:166
msgid "``Base(#i)``: evaluate the value of the base functions of the *ith* |mf|"
msgstr ""

# af368ea347d24eaba9c713b68db88089
#: ../source/userdoc/gasm_low.rst:168
msgid ""
"``Grad(#i)``: evaluate the value of the gradient of the base functions of"
" the *ith* |mf|"
msgstr ""

# aa7b414087be4733a3824cec98271a5a
#: ../source/userdoc/gasm_low.rst:171
msgid ""
"``Hess(#i)``: evaluate the value of the Hessian of the base functions of "
"the *ith* |mf|"
msgstr ""

# 8f27d7214a0046ea9fbd09fc231218dd
#: ../source/userdoc/gasm_low.rst:174
msgid ""
"``Normal()``: evaluate the unit normal (should not be used for volumic "
"integrations !)"
msgstr ""

# 08f0f56ee9064e5580bced7286792ddf
#: ../source/userdoc/gasm_low.rst:177
msgid ""
"``NonLin$x(#mf1,... #mfn)``: evaluate the *xth* non-linear term (inserted"
" with ``push_nonlinear_term(pnonlinear_elem_term)``) using the listed "
"|mf| objects."
msgstr ""

# c13c4620d9f44d1e96aa7cd08eedc8dd
#: ../source/userdoc/gasm_low.rst:181
msgid ""
"``GradGT()``, ``GradGTInv()``: evaluate the gradient (and its inverse) of"
" the geometric transformation of the current convex."
msgstr ""

# d390b423646341e89c238bf32c7411f7
#: ../source/userdoc/gasm_low.rst:186
msgid ""
"you may reference any data object inside the ``comp`` command, and "
"perform reductions inside the ``comp()``. This feature is mostly "
"interesting for speeding up assembly of nonlinear terms (see the file "
":file:`getfem/getfem_nonlinear_elasticity.h` for an example of use)."
msgstr ""

# f6e681cf028d4c6389a1c8cec45a59f6
#: ../source/userdoc/gasm_low.rst:193
msgid "others operations"
msgstr ""

# 54caeca1625f405eb907a72747f777bf
#: ../source/userdoc/gasm_low.rst:195
msgid ""
"Slices may be mixed with reduction operations ``t(:,4,i,i)`` takes a "
"slice at index 4 of the second dimension, and reduces the diagonal of "
"dimension 3 and 4. *Please note that index numbers for slices start at 1 "
"and not 0 !!*"
msgstr ""

# 313ab559c12d446ca006b965d1a85d3d
#: ../source/userdoc/gasm_low.rst:199
msgid ""
"``mdim(#2)`` is evaluated as the mesh dimension associated to the second "
"|mf|, while ``qdim(#2)`` is the target dimension of the |mf|."
msgstr ""

# f6742804d9be4a5b9f8b1d29899916f3
#: ../source/userdoc/gasm_low.rst:202
msgid ""
"The diagonal of a tensor can be obtained with ``t{:,:,3,3}`` (which is "
"strictly equivalent to ``t{1,2,3,3}``: the colon is just here to improve "
"the readability). This is the same operator than for permutation "
"operations. Note that ``t{:,:,1,1}`` or ``t{:,:,4,4}`` are not valid "
"operations."
msgstr ""

# ba3399b0f9aa4f16873d80d8c7eefebd
#: ../source/userdoc/gasm_low.rst:207
msgid ""
"The ``print`` command can be used to see the tensor: ``\"print "
"comp(Base(#1));\"`` will print the integrals of the base functions for "
"each convex."
msgstr ""

# 185319c358cd43479ed27783037ad3fb
#: ../source/userdoc/gasm_low.rst:210
msgid ""
"If there is more than one data array, output array or output sparse "
"matrix, one can use ``data$2``, ``data$3, ``V$2``, ``M$2``,..."
msgstr ""

# 3d1fa54f753a46a899134c2f6272d4ab
#: ../source/userdoc/gasm_low.rst:7
msgid "asm"
msgstr ""

# 3d1fa54f753a46a899134c2f6272d4ab
#: ../source/userdoc/gasm_low.rst:7
msgid "generic assembly"
msgstr ""

