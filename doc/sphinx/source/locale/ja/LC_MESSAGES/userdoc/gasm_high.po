# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-22 15:02+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

# b8a4aeb94b3d40bd86ff25ab47c0a2cd
#: ../source/userdoc/gasm_high.rst:12
msgid "Compute arbitrary terms - high-level generic assembly procedures"
msgstr ""

# 0699fadc5be7448b9e212ec2064c6a2a
#: ../source/userdoc/gasm_high.rst:14
msgid ""
"This section presents what is now the main generic assembly of |gf|. It "
"is a high-level generic assembly in the sense that it is based on a weak "
"form language to describe the weak formulation of boundary value problems"
" of partial differential equations. It mainly has been developed to "
"circumvent the difficulties with the previous low-level generic assembly "
"(see  :ref:`ud-gasm-low`) for which nonlinear terms were quite difficult "
"to describe. Conversely, a symbolic differentiation algorithm is used "
"with this version. It simplifies a lot the approximation of nonlinear "
"coupled problems since only the weak form is necessary to be described, "
"the tangent system being automatically computed. Moreover, the weak form "
"language is compiled into optimized instructions before the evaluation on"
" each integration point in order to obtain a an optimal computational "
"cost."
msgstr ""

# 6630327fc4e54df7ad796f03c42f78eb
#: ../source/userdoc/gasm_high.rst:16
msgid ""
"The header file to be included to use the high-level generic assembly "
"procedures in C++ is :file:`getfem/generic\\_assembly.h`."
msgstr ""

# 7d8392d850e847399e110c94fb1ba68d
#: ../source/userdoc/gasm_high.rst:19
msgid "Differences in execution time between high and low level generic assembly"
msgstr ""

# 73a7087da6cd4664bc2acc0366e2ac3d
#: ../source/userdoc/gasm_high.rst:20
msgid ""
"For basic linear assembly terms, the high level generic assembly is most "
"of the time faster than the low-level one. This is due to the fact that "
"the high-level generic assembly incorporates a compilation in basic "
"optimized instructions and operates simplifications. On complexe terms it"
" can be really faster due to the simplifications on repeated terms. On "
"the other hand, the fact that the low-level generic assembly incorporates"
" a mechanism to pre-compute on the reference element the linear term for "
"elements with a linear transformation makes that it can be faster on a "
"few simple linear terms. Of course, a possibility would be to incorporate"
" the ability to pre-compute on the reference element the linear term for "
"linear transformations in the high level generic assembly. However, it "
"would be rather complicated due to the high genericity of the language. A"
" consequence also is that exact integration is not allowed in the high "
"level generic assembly."
msgstr ""

# 0f2da426a03c4ed092cfd4395097351f
#: ../source/userdoc/gasm_high.rst:25
msgid "Overview of the weak form language syntax"
msgstr ""

# 19e9eafdbdf14967aef7f4abe6da5bf9
#: ../source/userdoc/gasm_high.rst:27
msgid ""
"A specific weak form language has been developed to describe the weak "
"formulation of boundary value problems. It is intended to be close to the"
" structure of a standard weak formulation and it incorporates the "
"following components:"
msgstr ""

# 95e50cf0046b40ecbb373defb0713362
#: ../source/userdoc/gasm_high.rst:29
msgid ""
"Variable names: A list of variables should be given. The variables are "
"described on a finite element method or can be a simple vector of "
"unknowns. For instance ``u``, ``v``, ``p``, ``pressure``, "
"``electric_field`` are valid variable names."
msgstr ""

# ae5cbaa8c6c8444c8bbeb6e9ea48e260
#: ../source/userdoc/gasm_high.rst:31
msgid ""
"Constant names: A list of constants could be given. The rules are the "
"same as for the variables but no test functions can be associated to "
"constants."
msgstr ""

# e0d61471bbce45188969a6cab0745008
#: ../source/userdoc/gasm_high.rst:33
msgid ""
"Test functions: Can be used with respect to any of the variables. They "
"are identified by the prefix ``Test_`` followed by the corresponding "
"variable name. For instance  ``Test_u``, ``Test_v``, ``Test_p``, "
"``Test_pressure``, ``Test_electric_field``. For the tangent system, "
"second order test functions are denoted ``Test2_`` followed by the "
"variable name."
msgstr ""

# 29e64a4c3e6449de939480ee386fc9e8
#: ../source/userdoc/gasm_high.rst:35
msgid ""
"Gradients: Spatial gradients of variables or test functions are "
"identified by the prefix ``Grad_`` followed by the variable name or by "
"``Test_`` or ``Test2_`` followed itself by the variable name. This is "
"available for FEM variables only. For instance ``Grad_u``, "
"``Grad_pressure``, ``Grad_electric_field`` and ``Grad_Test_u``, "
"``Grad_Test2_v``. For vector fields, ``Div_u`` and ``Div_Test_u`` are "
"some shortcuts for ``Trace(Grad_u)`` and ``Trace(Grad_Test_u)``, "
"respectively."
msgstr ""

# 1da2d7de4e624502bf27cbc86fb2304d
#: ../source/userdoc/gasm_high.rst:37
msgid ""
"Hessians: The Hessian of a variable or test function is identified by the"
" prefix ``Hess_`` followed by the variable name or by ``Test_`` or "
"``Test2_`` followed itself by the variable name. This is available for "
"FEM variables only. For instance ``Hess_u``, ``Hess_v``, ``Hess_p``, "
"``Hess_Test2_v``, ``Hess_Test_p``, ``Hess_Test_pressure``."
msgstr ""

# 6a09895f088a4b5c861000eea3d96fd5
#: ../source/userdoc/gasm_high.rst:39
msgid ""
"A certain number of predefined scalar functions (``sin(t)``, ``cos(t)``, "
"``pow(t,u)``, ``sqrt(t)``, ``sqr(t)``, ``Heaviside(t)``, ...). A scalar "
"function can be applied to scalar or vector/matrix/tensor expressions. It"
" applies componentwise. For functions having two arguments (``pow(t,u)``,"
" ``min(t,u)`` ...) if two non-scalar arguments are passed, the dimension "
"have to be the same. For instance \"max([1;2],[0;3])\" will return "
"\"[1;3]\"."
msgstr ""

# a61fd837435a4f5381d3902cbe45031f
#: ../source/userdoc/gasm_high.rst:41
msgid ""
"A certain number of operators: ``+``, ``-``, ``*``, ``/``, ``:``, ``.``, "
"``.*``, ``./``, ``@``, ``'``."
msgstr ""

# 6edf9231b7b6440aabc9d786d4502a7d
#: ../source/userdoc/gasm_high.rst:43
msgid ""
"Some constants: ``pi``, ``meshdim`` (the dimension of the current mesh), "
"``qdim(u)`` and ``qdims(u)`` the dimensions of the variable ``u`` (the "
"size for fixed size variables and the dimension of the vector field for "
"FEM variables), ``Id(n)`` the identity :math:`n\\times n` matrix."
msgstr ""

# 3b4bfdcaee394d33adeb9e24159a3878
#: ../source/userdoc/gasm_high.rst:45
msgid ""
"Parentheses can be used to change the operations order in a standard way."
" For instance ``(1+2)*4`` or ``(u+v)*Test_u`` are valid expressions."
msgstr ""

# c9ad4a0e47bd450485b7d95176f57a80
#: ../source/userdoc/gasm_high.rst:47
msgid ""
"The access to a component of a vector/matrix/tensor can be done by "
"following a term by a left parenthesis, the list of components and a "
"right parenthesis. For instance ``[1,1,2](3)`` is correct and will return"
" ``2``. Note that indices are assumed to begin by 1 (even in C++ and with"
" the python interface). A colon can replace the value of an index in a "
"Matlab like syntax."
msgstr ""

# d6785a45844046a9929adbb43ae9e794
#: ../source/userdoc/gasm_high.rst:49
msgid ""
"Explicit vectors: For instance ``[1;2;3;4]`` is an explicit vector of "
"size four. Each component can be an expression."
msgstr ""

# 77afa1f198c94731a3c9d4c75117f610
#: ../source/userdoc/gasm_high.rst:51
msgid ""
"Explicit matrices: For instance ``[1,3;2,4]`` and ``[[1,2],[3,4]]`` "
"denote the same 2x2 matrix. Each component can be an expression."
msgstr ""

# 70e3fa4b03754cb0a928844c3c00c426
#: ../source/userdoc/gasm_high.rst:53
msgid ""
"Explicit fourth order tensors: example of explicit 3x2x2x2 fourth order "
"tensor in the nested format: "
"``[[[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]],[[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]]]``."
msgstr ""

# 9369ef4af3ea41029da85d591f9129e0
#: ../source/userdoc/gasm_high.rst:55
msgid ""
"``X`` is the current coordinate on the real element, ``X(i)`` is its i-th"
" component."
msgstr ""

# 41f282c457b1426eb8381a562cc69261
#: ../source/userdoc/gasm_high.rst:57
msgid ""
"``Normal`` is the outward unit normal vector to a boundary, when "
"integrating on a domain boundary, or the unit normal vector to a level-"
"set when integrating on a level-set with a ``mesh_im_level_set`` method. "
"In the latter case, the normal vector is in the direction of the level-"
"set function gradient."
msgstr ""

# 0d1387abd1584e7fb3dfd9f174324215
#: ../source/userdoc/gasm_high.rst:59
msgid ""
"``Reshape(t, i, j, ...)``: Reshape a vector/matrix/tensor. Note that all "
"tensors in |gf| are stored in the Fortran order."
msgstr ""

# 1bc957ea2a084b64a57d87f98e8fa1f7
#: ../source/userdoc/gasm_high.rst:61
msgid ""
"A certain number of linear and nonlinear operators (``Trace``, ``Norm``, "
"``Det``, ``Deviator``, ``Contract``, ...). The nonlinear operators cannot"
" be applied to test functions."
msgstr ""

# 9ac7cc4b9e924a618a056d8bf7eb5103
#: ../source/userdoc/gasm_high.rst:63
msgid ""
"``Diff(expression, variable)``: The possibility to explicit differentiate"
" an expression with respect to a variable (symbolic differentiation)."
msgstr ""

# ba56e5e50c2340ecb41addfccce14558
#: ../source/userdoc/gasm_high.rst:65
msgid ""
"``Diff(expression, variable, direction)``: computes the derivative of "
"``expression`` with respect to ``variable`` in the direction "
"``direction``."
msgstr ""

# 8196ee67c37349098c48f72475a7e093
#: ../source/userdoc/gasm_high.rst:67
msgid ""
"``Grad(expression)``: When possible, symbolically derive the gradient of "
"the given expression."
msgstr ""

# cfed19f5e4454ee3b1243e3dbaabddd3
#: ../source/userdoc/gasm_high.rst:69
msgid ""
"Possiblility of macro definition (in the model, the ga_workspace object "
"or directly in the assembly string). The macros should be some valid "
"expressions that are expanded inline at the lexical analysis phase (if "
"they are used several times, the computation is automatically factorized "
"at the compilation stage)."
msgstr ""

# 22e9f5c8d48747da9aedec321f44c7a3
#: ../source/userdoc/gasm_high.rst:71
msgid ""
"``Interpolate(variable, transformation)``: Powerful operation which "
"allows to interpolate the variables, or test functions either on the same"
" mesh on other elements or on another mesh. ``transformation`` is an "
"object stored by the workspace or model object which describes the map "
"from the current point to the point where to perform the interpolation. "
"This functionality can be used for instance to prescribe periodic "
"conditions or to compute mortar matrices for two finite element spaces "
"defined on different meshes or more generally for fictitious domain "
"methods such as fluid-structure interaction."
msgstr ""

# 99bc4b2945304b05baabf605ac4a322c
#: ../source/userdoc/gasm_high.rst:73
msgid ""
"``Elementary_transformation(variable, transformation)``: Allow a linear "
"tranformation defined at the element level (i.e. not possible to define "
"at the gauss point level). This feature has been added mostly for "
"defining a reduction for plate elements (projection onto low-level vector"
" element such as rotated RT0). ``transformation`` is an object stored by "
"the workspace or model object which describes the trasformation for a "
"particular element."
msgstr ""

# 5f9a5b061ca340698bde43c706c60846
#: ../source/userdoc/gasm_high.rst:77
msgid "Some basic examples"
msgstr ""

# 3a76a32cd85944d5bd65292fd18078e6
#: ../source/userdoc/gasm_high.rst:79
msgid "The weak formulation for the Poisson problem on a domain :math:`\\Omega`"
msgstr ""

# 16290a02a6254dd0a65cbd65c6747889
#: ../source/userdoc/gasm_high.rst:85
msgid ""
"with Dirichlet boundary conditions :math:`u = 0` on "
":math:`\\partial\\Omega` is classically"
msgstr ""

# ee6cea50776e46b9bf4cba44652dd86e
#: ../source/userdoc/gasm_high.rst:92
msgid ""
"for all test functions :math:`v` vanishing on  :math:`\\partial\\Omega`. "
"The corresponding expression on the assembly string is::"
msgstr ""

# f49491b1a42149e695e4cec7c092cc4f
#: ../source/userdoc/gasm_high.rst:97
msgid ""
"where ``my_f`` is the expression of the source term. If now the equation "
"is"
msgstr ""

# ab44e2a1c68248daaa114cfff636446c
#: ../source/userdoc/gasm_high.rst:103
msgid "for ``a`` a scalar coefficient, the corresponding assembly string is::"
msgstr ""

# 2ac59e93a6ca4f1dbdf94c9e28054ec9
#: ../source/userdoc/gasm_high.rst:107
msgid ""
"where ``a`` has to be declared as a scalar constant or a scalar field. "
"Not that is is also possible to describe it explicitly. For instance the "
"problem"
msgstr ""

# a8d9f9b1e70c4bbca29dbfb176f21de5
#: ../source/userdoc/gasm_high.rst:113
msgid "where :math:`x_1, x_2` are the coordinates on the mesh, can be expressed::"
msgstr ""

# e5eccf1c4c8e458bbadb957eb412231c
#: ../source/userdoc/gasm_high.rst:117
msgid "Another classical equation is linear elasticity:"
msgstr ""

# 7b7be689d96e4680b737415aa23ae04f
#: ../source/userdoc/gasm_high.rst:123
msgid ""
"for :math:`u` a vector field and :math:`\\sigma(u) = \\lambda \\mbox{div "
"} u + \\mu (\\nabla u + (\\nabla u)^T)` when isotropic linear elasticity "
"is considered. The corresponding assembly string to describe the weak "
"formulation can be written::"
msgstr ""

# 983a11d8decb4225b03eba045914e80a
# 7b19a54b942a4d309601682afd89911c
# 022e0280c731427aae1c54c2151f1600
#: ../source/userdoc/gasm_high.rst:127 ../source/userdoc/gasm_high.rst:617
#: ../source/userdoc/gasm_high.rst:721
msgid "or::"
msgstr ""

# 272e48e59cb542c68f049c79051b79f5
#: ../source/userdoc/gasm_high.rst:131
msgid ""
"Here again, the coefficients ``lambda`` and ``mu`` can be given "
"constants, or scalar field or explicit expression or even expression "
"coming from some other variables in order to couples some problems. For "
"instance, if the coefficients depends on a temperature field one can "
"write::"
msgstr ""

# 1d7c5b85ff6d47ba88cb1eb27c65bb04
#: ../source/userdoc/gasm_high.rst:136
msgid ""
"where ``theta`` is the temperature which can be the solution to a Poisson"
" equation::"
msgstr ""

# a4f3452072c148d8a0d7a1a8a9207079
#: ../source/userdoc/gasm_high.rst:140
msgid ""
"and ``my_f1`` and ``my_f2`` are some given functions. Note that in that "
"case, the problem is nonlinear due to the coupling, even if the two "
"functions  ``my_f1`` and ``my_f2`` are linear."
msgstr ""

# 05a0718cb7304af9b9238ea2a470e6f0
#: ../source/userdoc/gasm_high.rst:144
msgid "Derivation order and symbolic differentiation"
msgstr ""

# 16bcbb0af1364ed384290c7debee6c8b
#: ../source/userdoc/gasm_high.rst:146
msgid ""
"The derivation order of the assembly string is automatically detected. "
"This means that if no test functions are found, the order will be "
"considered to be 0 (potential energy), if first order test functions are "
"found, the order will be considered to be 1 (weak formulation) and if "
"both first and second order test functions are found, the order will be "
"considered to be 2 (tangent system)."
msgstr ""

# 0155f9cee1f74cfda1712b11b9a2321a
#: ../source/userdoc/gasm_high.rst:148
msgid ""
"In order to perform an assembly (see next section), one should specify "
"the order (0, 1 or 2). If an order 1 string is furnished and an order 2 "
"assembly is required, a symbolic differentiation of the expression is "
"performed. The same if an order 0 string is furnished and if an order 1 "
"or 2 assembly is required. Of course, the converse is not true. If an "
"order 1 expression is given and an order 0 assembly is expected, no "
"integration is performed. This should not be generally not possible since"
" an arbitrary weak formulation do not necessary derive from a potential "
"energy."
msgstr ""

# dcc53c5de3d14fd09b519f6aeefbf09a
#: ../source/userdoc/gasm_high.rst:150
msgid ""
"The standard way to use the generic assembly is to furnish order 1 "
"expressions (i.e. a weak formulation). If a potential energy exists, one "
"may furnish it. However, it will be derived twice to obtain the tangent "
"system which could result in complicated expressions. For nonlinear "
"problems, it is not allowed to furnish order 2 expressions directly. The "
"reason is that the weak formulation is necessary to obtain the residual. "
"So nothing could be done with a tangent term without having the "
"corresponding order 1 term."
msgstr ""

# a5fa2af241cb43d399c6ed59ebd358ef
#: ../source/userdoc/gasm_high.rst:152
msgid ""
"IMPORTANT REMARK: Note that for coupled problems, a global potential "
"frequently do not exists. So that the part of problems directly defined "
"with a potential may be difficult to couple. To illustrate this, if you "
"defined a potential with some parameters (elasticity coefficients for "
"instance), and the couplingconsists in a variation of these coefficients "
"with respect to another variable, then the weak formulation do not "
"consist of course in the derivative of the potential with respect to the "
"coefficients which has generally no sense. This is the reason why the "
"definition through a potential should be the exception."
msgstr ""

# fca987ffe41b400e8a0170fd32c81eb0
#: ../source/userdoc/gasm_high.rst:156
msgid "C++ Call of the assembly"
msgstr ""

# 3e7614ebca80470292e166128742d0da
#: ../source/userdoc/gasm_high.rst:158
msgid ""
"Note that the most natural way to use the generic assembly is by the use "
"of the generic assembly bricks of the model object, see Section :ref:`ud-"
"model-generic-assembly`. It is however also possible to use the high "
"level generic assembly on its own."
msgstr ""

# a80135de73a44a74a985d75bb9928b4e
#: ../source/userdoc/gasm_high.rst:160
msgid ""
"The generic assembly is driven by the object ``getfem::ga_workspace`` "
"defined in :file:`getfem/getfem\\_generic_assembly.h`."
msgstr ""

# 7b71b69abcc34283934bb15aa47b490e
#: ../source/userdoc/gasm_high.rst:162
msgid ""
"There is two ways to define a ``getfem::ga_workspace`` object. It can "
"depend on a model (see :ref:`ud-model`) and should be declared as::"
msgstr ""

# dc4d345ff0a4440f949f0f1df67d9d4e
#: ../source/userdoc/gasm_high.rst:166
msgid ""
"with ``md`` a previously define ``getfem::model`` object. In that case "
"the variable and constant considered are the one of the model. The second"
" way it to define an independent ``getfem::ga_workspace`` object by::"
msgstr ""

# bc86d430d6504815b7d2f47497569b19
#: ../source/userdoc/gasm_high.rst:170
msgid ""
"In that case, the variable and constant have to be added to the "
"workspace. This can be done thanks to the following methods::"
msgstr ""

# cb8f6700c8c74a41ab8c31d666f777ff
#: ../source/userdoc/gasm_high.rst:182
msgid ""
"where ``name`` is the variable/constant name (see in the next sections "
"the restriction on possible names), ``mf`` is the ``getfem::mesh_fem`` "
"object describing the finite element method, ``I`` is an object of class "
"``gmm::sub_interval`` indicating the interval of the variable on the "
"assembled vector/matrix and ``V`` is a ``getfem::base_vector`` being the "
"value of the variable/constant. The last method add a constant defined on"
" an ``im_data`` object ``imd`` which allows to store scalar/vector/tensor"
" field informations on the integration points of an ``mesh_im`` object."
msgstr ""

# 8a69d4e161b14bea9165bdd6147969ad
#: ../source/userdoc/gasm_high.rst:185
msgid ""
"Once it is declared and once the variables and constant are declared, it "
"is possible to add assembly string to the workspace with::"
msgstr ""

# b6a46ab9c96e401cab56fd919450b9d8
#: ../source/userdoc/gasm_high.rst:189
msgid ""
"where ``\"my expression\"`` is the assembly string, ``mim`` is a "
"``getfem::mesh_im`` object and ``rg`` if an optional valid region of the "
"mesh corresponding to ``mim``."
msgstr ""

# 5e378bcebfb447768bb120194c8d1eb6
#: ../source/userdoc/gasm_high.rst:191
msgid ""
"As it is explained in the previous section, the order of the string will "
"be automatically detected and a symbolic differentiation will be "
"performed to obtain the corresponding tangent term."
msgstr ""

# 997a20a0d8904fe4bdbec81609bd914c
#: ../source/userdoc/gasm_high.rst:193
msgid "Once assembly strings are added to the workspace, is is possible to call::"
msgstr ""

# 7c3aef86e2764a0a97bcecededd29ac8
#: ../source/userdoc/gasm_high.rst:197
msgid ""
"where ``order`` should be equal to 0 (potential energy), 1 (residual "
"vector) or 2 (tangent term, or stiffness matrix for linear problems). The"
" result of the assembly is available as follows::"
msgstr ""

# f5a618053094426495f30026dc62e905
#: ../source/userdoc/gasm_high.rst:205
msgid ""
"By default, the assembled potential, vector and matrix is initialized to "
"zero at the beginning of the assembly. It is however possible (and "
"recommended) to set the assembly vector and matrix to external ones to "
"perform an incremental assembly. The two methods::"
msgstr ""

# 78d81dea40a7431fa5463a5caf9fec29
#: ../source/userdoc/gasm_high.rst:211
msgid ""
"allows to do so. Be aware to give a vector and a matrix of the right "
"dimension."
msgstr ""

# 0e541dae5c8d4170bd7a57e08d4bec61
#: ../source/userdoc/gasm_high.rst:214
msgid "Note also that the method::"
msgstr ""

# 081cb9a6090a42b5827b40a493c91f47
#: ../source/userdoc/gasm_high.rst:218
msgid ""
"allows to cancel all furnished expressions and allows to re-use the same "
"workspace for another assembly."
msgstr ""

# 052c2a55c6ca4122adc084f05c85b67f
#: ../source/userdoc/gasm_high.rst:221
msgid ""
"It is also possible to call the generic assembly from the "
"Python/Scilab/Matlab interface. See ``gf_asm`` command of the interface "
"for more details."
msgstr ""

# c62d56f8b2ee4dddbd235df36da88a6f
#: ../source/userdoc/gasm_high.rst:224
msgid "C++ assembly examples"
msgstr ""

# 3c92c9e2eda7471a9a3e120a92479761
#: ../source/userdoc/gasm_high.rst:226
msgid ""
"As a first example, if one needs to perform the assembly of a Poisson "
"problem"
msgstr ""

# 27454879c7714bbe88f3811c4c19fd51
#: ../source/userdoc/gasm_high.rst:232
msgid "the stiffness matrix is given"
msgstr ""

# 4f49a1986f784c17ad58e1b5d0edb91a
#: ../source/userdoc/gasm_high.rst:238
msgid "and will be assembled by the following code::"
msgstr ""

# 6f63e80496844237af4712450cdacd9c
#: ../source/userdoc/gasm_high.rst:250
msgid ""
"where of course, ``mf`` is supposed to be an already declared "
"``getfem::mesh_fem`` object and ``mim`` a already declared "
"``getfem::mesh_im`` object on the same mesh. Note that the value of the "
"variable do not really intervene because of the linearity of the problem."
" This allows to pass ``getfem::base_vector(nbdof)`` as the value of the "
"variable which will not be used. Note also that two other possible "
"expressions for exactly the same result for the assembly string are "
"``\"Grad_Test2_u.Grad_Test_u\"`` (i.e. an order 2 expression) or "
"``\"Norm_sqr(Grad_u)/2\"`` (i.e. a potential). In fact other possible "
"assembly string will give the same result such as ``\"Grad_u.Grad_u/2\"``"
" or ``\"[Grad_u(1), Grad_u(2)].[Grad_Test_u(1), Grad_Test_u(2)]\"`` for "
"two-dimensional problems. However, the recommendation is preferably to "
"give an order 1 expression (weak formulation) if there is no particular "
"reason to prefer an order 0 or an order 2 expression."
msgstr ""

# c39dc4e74aec4754ab495d5208002a5f
#: ../source/userdoc/gasm_high.rst:252
msgid ""
"As a second example, let us consider a coupled problem, for instance the "
"mixed problem of incompressible elasticity given by the equations"
msgstr ""

# 0125bea9933845caa9a021cced70980b
#: ../source/userdoc/gasm_high.rst:260
msgid ""
"where ``u`` is the vector valued displacement and ``p`` the pressure. The"
" assembly of the matrix for the whole coupled system can be performed as "
"follows::"
msgstr ""

# 6ffb44f1521648e6b6f139a6deed044e
#: ../source/userdoc/gasm_high.rst:277
msgid ""
"where, here, ``mf_u`` and ``mf_p`` are supposed to be some already "
"declared ``getfem::mesh_fem`` objects defined on the same mesh, ``mim`` a"
" already declared ``getfem::mesh_im`` object and ``mu`` is the Lame "
"coefficient. It is also possible to perform the assembly of the sub-"
"matrix of this system separately."
msgstr ""

# 002e7af0b5524c1fa63585a2923409ac
#: ../source/userdoc/gasm_high.rst:280
msgid ""
"Let us see now how to perform the assembly of a source term. The weak "
"formulation of a volumic source term is"
msgstr ""

# df91b6e4b6d040dd86e7b9eb9b424534
#: ../source/userdoc/gasm_high.rst:285
msgid ""
"where :math:`f` is the source term and :math:`v` the test function. The "
"corresponding assembly can be written::"
msgstr ""

# d153fc3daf45417c822dc586c0c647c0
#: ../source/userdoc/gasm_high.rst:297
msgid ""
"if the source term is describe on a finite element ``mf_data`` and the "
"corresponding vector of degrees of freedom ``F``. Explicit source terms "
"are also possible. For instance::"
msgstr ""

# 42374ef179394b29b3419e8ababe7ccd
#: ../source/userdoc/gasm_high.rst:308
msgid ""
"is also valid. If the source term is a boundary term (in case of a "
"Neumann condition) the only difference is that the mesh region "
"corresponding to the boundary have to be given as follows::"
msgstr ""

# a3060254acf5418b965e2987f5b289f7
#: ../source/userdoc/gasm_high.rst:312
msgid "where ``region`` is the mesh region number."
msgstr ""

# 7655976e062c4f098ac6099fc4a3f740
#: ../source/userdoc/gasm_high.rst:314
msgid ""
"As another example, let us describe a simple nonlinear elasticity "
"problem. Assume that we consider a Saint-Venant Kirchhoff constitutive "
"law which means that we consider the following elastic energy on a body "
"of reference configuration :math:`\\Omega`:"
msgstr ""

# b87f5fedc37d4a53b4686ba38ab1d4d1
#: ../source/userdoc/gasm_high.rst:319
msgid ""
"where :math:`\\lambda, \\mu` are the |Lame| coefficients and  :math:`E` "
"is the strain tensor given by :math:`E = (\\nabla u + (\\nabla u)^T + "
"(\\nabla u)^T\\nabla u)/2`."
msgstr ""

# dc2efe32d39d4426b89b5ef48da99565
#: ../source/userdoc/gasm_high.rst:321
msgid ""
"This is possible to perform the assembly of the corresponding tangent "
"problem as follows::"
msgstr ""

# 15e7f34086f8435c87d151b5971a1b56
#: ../source/userdoc/gasm_high.rst:340
msgid ""
"and to adapt a Newton-Raphson algorithm to solve that nonlinear problem. "
"Of course the expression is rather repetitive and it would be preferable "
"to define some intermediate nonlinear operators. However, note that "
"repeated expressions are automatically detected and computed only once in"
" the assembly."
msgstr ""

# c50ee9aff17f4408a5699aaacd0d2ef2
#: ../source/userdoc/gasm_high.rst:342
msgid ""
"The last example is the assembly of the stiffness matrix of an order four"
" problem, the Kirchhoff-Love plate problem::"
msgstr ""

# 43b95b598d13412a946fe128b91a42d3
#: ../source/userdoc/gasm_high.rst:357
msgid "with ``D`` the flexion modulus and ``nu`` the Poisson ratio."
msgstr ""

# a800e74dd3ef44269f30efd321d22204
#: ../source/userdoc/gasm_high.rst:362
msgid "The tensors"
msgstr ""

# 94d999d4ce7042d487e172978ad3c7e5
#: ../source/userdoc/gasm_high.rst:364
msgid ""
"Basically, what is manipulated in the weak form language are tensors. "
"This can be order 0 tensors in scalar expressions (for instance in "
"``3+sin(pi/2)``), order 1 tensors in vector expressions (such as ``X.X`` "
"or ``Grad_u`` if u is a scalar variable), order 2 tensors for matrix "
"expressions and so on. For efficiency reasons, the language manipulates "
"tensors up to order six. The language could be easily extended to support"
" tensors of order greater than six but it may lead to inefficient "
"computations. When an expression contains test functions (as in "
"``Trace(Grad_Test_u)`` for a vector field ``u``), the computation is done"
" for each test functions, which means that the tensor implicitly have a "
"supplementary component. This means that, implicitly, the maximal order "
"of manipulated tensors are in fact six (in ``Grad_Test_u:Grad_Test2_u`` "
"there are two components implicitly added for first and second order test"
" functions)."
msgstr ""

# ab81a6a8818444ea99fd6343b9cec45c
#: ../source/userdoc/gasm_high.rst:366
msgid ""
"Order four tensors are necessary for instance to express elasticity "
"tensors or in general to obtain the tangent term for vector valued "
"unknowns."
msgstr ""

# 1383fadfec6640cd93a4ae5543a21110
#: ../source/userdoc/gasm_high.rst:370
msgid "The variables"
msgstr ""

# cb619a1e89394662b1170a2b08f2a136
#: ../source/userdoc/gasm_high.rst:372
msgid ""
"A list of variables should be given to the ``ga_worspace`` object "
"(directly or through a model object). The variables are described on a "
"finite element method or can be a simple vector of unknowns. This means "
"that it is possible also to couple algebraic equations to pde ones on a "
"model. A variable name should begin by a letter (case sensitive) or an "
"underscore followed by a letter, a number or an underscore. Some name are"
" reserved, this is the case of operators names (``Det``, ``Norm``, "
"``Trace``, ``Deviator``, ...) and thus cannot be used as variable names. "
"The name should not begin by ``Test_``, ``Test2_``, ``Grad_``, ``Div_`` "
"or ``Hess_``. The variable name should not correspond to a predefined "
"function (``sin``, ``cos``, ``acos`` ...) and to constants (``pi``, "
"``Normal``, ``X``, ``Id`` ...)."
msgstr ""

# 49a40dedd0fe48dd958ee6c96dcd71e0
#: ../source/userdoc/gasm_high.rst:375
msgid "The constants or data"
msgstr ""

# 78229b6822304622a568546a0be12e50
#: ../source/userdoc/gasm_high.rst:377
msgid ""
"A list of constants could also be given to the ``ga_worspace`` object. "
"The rule are the same as for the variables but no test function can be "
"associated to constants and there is no symbolic differentiation with "
"respect to constants. Scalar constants are often defined to represent the"
" coefficients which intervene in constitutive laws. Additionally, "
"constants can be some scalar/vector/tensor fields defined on integration "
"points via a ``im_data`` object (for instance for some implementation of "
"the approximation of constitutive laws such as plasticity)."
msgstr ""

# 66678778fff34340bb747f084ea98f1f
#: ../source/userdoc/gasm_high.rst:381
msgid "Test functions"
msgstr ""

# c09411fd097b4ce9a4f44804a7994738
#: ../source/userdoc/gasm_high.rst:383
msgid ""
"Each variable is associated with first order and second order test "
"functions. The first order test function are used in the weak formulation"
" (which derive form the potential equation if it exists) and the second "
"order test functions are used in the tangent system. For a variable ``u``"
" the associated test functions are ``Test_u`` and ``Test2_u``. The "
"assembly string have to be linear with respect to test functions. As a "
"result of the presence of the term ``Test_u`` on a assembly string, the "
"expression will be evaluated for each shape function of the finite "
"element corresponding to the variable ``u``. On a given element, if the "
"finite element have ``N`` shape functions ans if ``u`` is a scalar field,"
" the value of ``Test_u`` will be the value of each shape function on the "
"current point. So ``Test_u`` return if face a vector of ``N`` values. But"
" of course, this is implicit in the language. So one do not have to care "
"about this."
msgstr ""

# 95b043219fbb487c8c0d2f3c5b0c3066
#: ../source/userdoc/gasm_high.rst:388
msgid "Gradient"
msgstr ""

# 453271d1582943619ec899951b5c5972
#: ../source/userdoc/gasm_high.rst:390
msgid ""
"The gradient of a variable or of test functions are identified by "
"``Grad_`` followed by the variable name or by ``Test_`` followed itself "
"by the variable name. This is available for FEM variables (or constants) "
"only. For instance ``Grad_u``, ``Grad_v``, ``Grad_p``, ``Grad_pressure``,"
" ``Grad_electric_field`` and ``Grad_Test_u``, ``Grad_Test_v``, "
"``Grad_Test_p``, ``Grad_Test_pressure``, ``Grad_Test_electric_field``. "
"The gradient is either a vector for scalar variables or a matrix for "
"vector field variables. In the latter case, the first index corresponds "
"to the vector field dimension and the second one to the index of the "
"partial derivative.  ``Div_u`` and ``Div_Test_u`` are some optimized "
"shortcuts for ``Trace(Grad_u)`` and ``Trace(Grad_Test_u)``, respectively."
msgstr ""

# c8eab9f1a6fb4d8ca19fbe6fc9ed21b2
#: ../source/userdoc/gasm_high.rst:393
msgid "Hessian"
msgstr ""

# 66b74f2113c64fbdbd14bdb75b1f4fd5
#: ../source/userdoc/gasm_high.rst:395
msgid ""
"Similarly, the Hessian of a variable or of test functions are identified "
"by ``Hess_`` followed by the variable name or by ``Test_`` followed "
"itself by the variable name. This is available for FEM variables only. "
"For instance ``Hess_u``, ``Hess_v``, ``Hess_p``, ``Hess_pressure``, "
"``Hess_electric_field`` and ``Hess_Test_u``, ``Hess_Test_v``, "
"``Hess_Test_p``, ``Hess_Test_pressure``, ``Hess_Test_electric_field``. "
"The Hessian is either a matrix for scalar variables or a third order "
"tensor for vector field variables. In the latter case, the first index "
"corresponds to the vector field dimension and the two remaining to the "
"indices of partial derivatives."
msgstr ""

# 5a37010f236041d68e21dd3ba028fa52
#: ../source/userdoc/gasm_high.rst:399
msgid "Predefined scalar functions"
msgstr ""

# 6fa27ab24e1d47fd89e4689145fb4ec8
#: ../source/userdoc/gasm_high.rst:401
msgid ""
"A certain number of predefined scalar functions can be used. The "
"exhaustive list is the following and for most of them are equivalent to "
"the corresponding C function:"
msgstr ""

# 95e8baf4990341a492069f46263e5113
#: ../source/userdoc/gasm_high.rst:403
msgid ""
"``sqr(t)`` (the square of t, equivalent to t*t), ``pow(t, u)`` (t to the "
"power u), ``sqrt(t)`` (square root of t), ``exp(t)``, ``log(t)``, "
"``log10(t)``"
msgstr ""

# 31f627186ad64fa4adeb86544075858c
#: ../source/userdoc/gasm_high.rst:406
msgid ""
"``sin(t)``, ``cos(t)``, ``tan(t)``, ``asin(t)``, ``acos(t)``, "
"``atan(t)``, ``atan2(t, u)``"
msgstr ""

# e97716712aef4edab31fc06e23aa28f2
#: ../source/userdoc/gasm_high.rst:408
msgid ""
"``sinh(t)``, ``cosh(t)``, ``tanh(t)``, ``asinh(t)``, ``acosh(t)``, "
"``atanh(t)``"
msgstr ""

# 79a5fefd20a84da7a6c5616624925a56
#: ../source/userdoc/gasm_high.rst:410
msgid "``erf(t)``, ``erfc(t)``"
msgstr ""

# bd42a6680c2c4999b662c00414a24104
#: ../source/userdoc/gasm_high.rst:411
msgid "``sinc(t)`` (the cardinal sine function sin(t)/t)"
msgstr ""

# 4de0a2c7e77849a488b7d5dbd0f47c1d
#: ../source/userdoc/gasm_high.rst:413
msgid "``Heaviside(t)`` (:math:`0 \\mbox{ for } t < 0, 1 \\mbox{ for } t \\ge 0`)"
msgstr ""

# 99fee65812d54c5596565486fbe795f5
#: ../source/userdoc/gasm_high.rst:414
msgid "``sign(t)``"
msgstr ""

# e25ebbac06794504940f9d2f33447cd7
#: ../source/userdoc/gasm_high.rst:415
msgid "``abs(t)``"
msgstr ""

# af062fca34dd469ea1d2cebb629dd081
#: ../source/userdoc/gasm_high.rst:416
msgid "``pos_part(t)`` (:math:`tH(t)`)"
msgstr ""

# 936584417acc4bd59122461fe4963dc5
#: ../source/userdoc/gasm_high.rst:417
msgid ""
"``reg_pos_part(t, eps)`` (:math:`(t-eps/2-t^2/(2eps))H(t-eps) + "
"t^2H(t)/(2eps)`)"
msgstr ""

# f8185d1932cd4d3b9fa1f3f09813b8da
#: ../source/userdoc/gasm_high.rst:418
msgid "``neg_part(t)`` (:math:`-tH(-t)`), ``max(t, u)``, ``min(t, u)``"
msgstr ""

# e499451d4fa34db192593846569ccecc
#: ../source/userdoc/gasm_high.rst:420
msgid ""
"A scalar function can be applied to a scalar expression, but also to a "
"tensor one. If is is applied to a tensor expression, is is applied "
"componentwise and the result is a tensor with the same dimensions. For "
"functions having two arguments (pow(t,u), min(t,u) ...) if two non-scalar"
" arguments are passed, the dimension have to be the same. For instance "
"\"max([1;2],[0;3])\" will return \"[0;3]\"."
msgstr ""

# 2310ac1e9f664b0fb7e35292b499b0de
#: ../source/userdoc/gasm_high.rst:425
msgid "User defined scalar functions"
msgstr ""

# 18c8dd2c7bbe405f8757aa897795cb9f
#: ../source/userdoc/gasm_high.rst:427
msgid ""
"It is possible to add a scalar function to the already predefined ones. "
"Note that the generic assembly consider only scalar function with one or "
"two parameters. In order to add a scalar function to the generic "
"assembly, one has to call::"
msgstr ""

# 8f380b7d6893420882794b47fa77c071
#: ../source/userdoc/gasm_high.rst:435
msgid ""
"where ``name`` is the name of the function to be defined, ``nb_args`` is "
"equal to 1 or 2. In the first call, ``expr`` is a string describing the "
"function in the generic weak form language and using ``t`` as the first "
"variable and ``u`` as the second one (if ``nb_args`` is equal to 2). For "
"instance, ``sin(2*t)+sqr(t)`` is a valid expression. Note that it is not "
"possible to refer to constant or data defined in a ``ga_workspace`` "
"object. ``der1`` and ``der2`` are the expression of the derivatives with "
"respect to ``t`` and ``u``. They are optional. If they are not furnished,"
" a symbolic differentiation is used if the derivative is needed. If "
"``der1`` and ``der2`` are defined to be only a function name, it will be "
"understand that the derivative is the corresponding function. In the "
"second call, ``f1`` should be a C pointer on a scalar C function having "
"one scalar parameter and in the third call, ``f2``  should be a C pointer"
" on a scalar C function having two scalar parameters."
msgstr ""

# 439d7a5311414cc0a7657e6b163eddb0
#: ../source/userdoc/gasm_high.rst:438
msgid "Additionally,::"
msgstr ""

# b4331fbe60c24d9799b1014cb699f0b6
#: ../source/userdoc/gasm_high.rst:442
msgid "return true is a function ``name`` is already defined and::"
msgstr ""

# e53a0c034d324336878abc369706e42c
#: ../source/userdoc/gasm_high.rst:446
msgid ""
"cancel the definition of an already define function (it has no action if "
"the function does not exist) which allow to redefine a function."
msgstr ""

# 21524242523d43bb84279213e5e970c0
#: ../source/userdoc/gasm_high.rst:450
msgid "Derivatives of defined scalar functions"
msgstr ""

# 1c15cdd466434607996c4759cff0a9a7
#: ../source/userdoc/gasm_high.rst:452
msgid ""
"It is possible to refer directly to the derivative of defined functions "
"by adding the prefix ``Derivative_`` to the function name. For instance, "
"``Derivative_sin(t)`` will be equivalent to ``cos(t)``. For two arguments"
" functions like ``pow(t,u)`` one can refer to the derivative with respect"
" to the second argument with the prefix  ``Derivative_2_`` before the "
"function name."
msgstr ""

# 086aa4c2a5fe4edf97a25900dd2f3b5b
#: ../source/userdoc/gasm_high.rst:456
msgid "Binary operations"
msgstr ""

# 2276f9db132f474cb203c8cf89bc9016
#: ../source/userdoc/gasm_high.rst:458
msgid "A certain number of binary operations between tensors are available:"
msgstr ""

# 6de7d73aecdc4390ad653f2e585f8a56
#: ../source/userdoc/gasm_high.rst:461
msgid ""
"``+`` and ``-`` are the standard addition and subtraction of scalar, "
"vector, matrix or tensors."
msgstr ""

# fc2722dd345d49058a56ecd43df11464
#: ../source/userdoc/gasm_high.rst:463
msgid ""
"``*`` stands for the scalar, matrix-vector, matrix-matrix or (fourth "
"order tensor)-matrix multiplication."
msgstr ""

# f3cbb098a1df44478f54d445ffbb1c99
#: ../source/userdoc/gasm_high.rst:465
msgid "``/`` stands for the division by a scalar."
msgstr ""

# 2fd554c71ed74a009000e29be143558b
#: ../source/userdoc/gasm_high.rst:467
msgid ""
"``.`` stands for the scalar product of vectors, or more generally to the "
"contraction of a tensor with respect to its last index with a vector or "
"with the first index of another tensor. Note that ``*`` and ``.`` are "
"equivalent for matrix-vector or matrix-matrix multiplication."
msgstr ""

# c2bb139c8fef4ad398110b217cd1d0cd
#: ../source/userdoc/gasm_high.rst:469
msgid ""
"``:`` stands for the |Frobenius| product of matrices or more generally to"
" the contraction of a tensor with respect to the two last indices with a "
"matrix. Note that ``*`` and ``:`` are equivalent for (fourth order "
"tensor)-matrix multiplication."
msgstr ""

# 167f35f307384872b7a149d85080fd08
#: ../source/userdoc/gasm_high.rst:471
msgid ""
"``.*`` stands for the multiplication of two vectors/matrix/tensor "
"componentwise."
msgstr ""

# 50b696410bb3453884b7e74b1f882773
#: ../source/userdoc/gasm_high.rst:473
msgid "``./`` stands for the division of two vectors/matrix/tensor componentwise."
msgstr ""

# f114134aebd54cf6914b47d809b46e18
#: ../source/userdoc/gasm_high.rst:475
msgid "``@`` stands for the tensor product."
msgstr ""

# 1f56ed17287145b6aa71bf7129067291
#: ../source/userdoc/gasm_high.rst:477
msgid ""
"``Contract(A, i, B, j)`` stands for the contraction of tensors A and B "
"with respect to the ith index of A and jth index of B. The first index is"
" numbered 1. For instance ``Contract(V,1,W,1)`` is equivalent to ``V.W`` "
"for two vectors ``V`` and ``W``."
msgstr ""

# d7a6b556e3a54494bece69403b19b60a
#: ../source/userdoc/gasm_high.rst:479
msgid ""
"``Contract(A, i, j, B, k, l)`` stands for the double contraction of "
"tensors A and B with respect to indices i,j of A and indices k,l of B. "
"The first index is numbered 1. For instance ``Contract(A,1,2,B,1,2)`` is "
"equivalent to ``A:B`` for two matrices ``A`` and ``B``."
msgstr ""

# b579fa775a1846e2a96f6a468d1709af
#: ../source/userdoc/gasm_high.rst:483
msgid "Unary operators"
msgstr ""

# 8e4b220a1b2044df914ae33dca49561e
#: ../source/userdoc/gasm_high.rst:485
msgid "``-`` the unary minus operator: change the sign of an expression."
msgstr ""

# 00a5b345710b4e5d91a3f52bef8f899c
#: ../source/userdoc/gasm_high.rst:487
msgid ""
"``'`` stands for the transpose of a matrix or line view of a vector. It a"
" tensor ``A`` is of order greater than two,``A'`` denotes the inversion "
"of the two first indices."
msgstr ""

# 89d05da4bf3a47d6a9155084fbc037d7
#: ../source/userdoc/gasm_high.rst:489
msgid ""
"``Contract(A, i, j)`` stands for the contraction of tensor A with respect"
" to its ith and jth indices. The first index is numbered 1. For instance,"
" ``Contract(A, 1, 2)`` is equivalent to ``Trace(A)`` for a matrix ``A``."
msgstr ""

# bd459d6d32d5480aba922acba216d34c
#: ../source/userdoc/gasm_high.rst:491
msgid ""
"``Swap_indices(A, i, j)`` exchange indices number i and j. The first "
"index is numbered 1. For instance ``Swap_indices(A, 1, 2)`` is equivalent"
" to ``A'`` for a matrix ``A``."
msgstr ""

# 9c4ece3e40b343068234d76b97953fb0
#: ../source/userdoc/gasm_high.rst:493
msgid ""
"``Index_move_last(A, i)`` move the index number i in order to be the ast "
"one. For instance, if ``A`` is a fourth order tensor "
":math:`A_{i_1i_2i_3i_4}`, then the result of ``Index_move_last(A, 2)`` "
"will be the tensor :math:`B_{i_1i_3i_4i_2} = A_{i_1i_2i_3i_4}`. For a "
"matrix, ``Index_move_last(A, 1)`` is equivalent to ``A'``."
msgstr ""

# adc6d53e4f0748a684cf35296e177c05
#: ../source/userdoc/gasm_high.rst:495
msgid ""
"exchange indices number i and j. The first index is numbered 1. For "
"instance ``Swap_indices(A, 1, 2)`` is equivalent to ``A'`` for a matrix "
"``A``."
msgstr ""

# 666e231208da490793d7eb0ec7294110
#: ../source/userdoc/gasm_high.rst:499
msgid "Parentheses"
msgstr ""

# bebf4cc1116944fd880122dfe037ef3a
#: ../source/userdoc/gasm_high.rst:501
msgid ""
"Parentheses can be used in a standard way to change the operation order. "
"If no parentheses are indicated, the usually priority order are used. The"
" operations ``+``  and ``-`` have the lower priority (with no "
"distinction), then ``*``, ``/``, ``:``, ``.``, ``.*``, ``./``, ``@`` with"
" no distinction and the higher priority is reserved for the unary "
"operators ``-`` and ``'``."
msgstr ""

# 6360d03dbe674c73a52f757713c129d2
#: ../source/userdoc/gasm_high.rst:505
msgid "Explicit vectors"
msgstr ""

# 81205595a7024b1b95fe08d44482833a
#: ../source/userdoc/gasm_high.rst:507
msgid ""
"The weak form language allows to define explicit vectors (i.e. order 1 "
"tensors) with the notation ``[a,b,c,d,e]``, i.e. an arbitrary number of "
"components separated by a comma (note the separation with a semicolon "
"``[a;b;c;d;e]`` is also permitted), the whole vector beginning with a "
"right bracket and ended by a left bracket. The components can be some "
"numeric constants, some valid expressions and may also contain test "
"functions. In the latter case, the vector has to be homogeneous with "
"respect to the test functions. This means that a construction of the type"
" ``[Test_u; Test_v]`` is not allowed. A valid example, with ``u`` as a "
"scalar field variable is ``[5*Grad_Test_u(2), 2*Grad_Test_u(1)]``. Note "
"also that using the quite opertor (transpose), an expression "
"``[a,b,c,d,e]'`` stands for 'row vector`, i.e. a 1x5 matrix."
msgstr ""

# 179b865771e84a87800fdabaaa06766f
#: ../source/userdoc/gasm_high.rst:511
msgid "Explicit matrices"
msgstr ""

# 419f070700d54633a16610642240112e
#: ../source/userdoc/gasm_high.rst:513
msgid ""
"Similarly to explicit vectors, it is possible to define explicit matrices"
" (i.e. order 2 tensors) with the notation ``[[a,b],[c,d]]``, i.e. an "
"arbitrary number of columns vectors separated by a comma (the syntax "
"``[a,c;b,d]`` of lines separated by a semicolon is also permitted). For "
"instance ``[[11,21],[12,22],[13,23]]`` and ``[11,12,13;21,22,23]`` both "
"represent the same 2x3 matrix. The components can be some numeric "
"constants, some valid expressions and may also contain test functions."
msgstr ""

# 90b003fce3674fb198697bd954c7dcf6
#: ../source/userdoc/gasm_high.rst:517
msgid "Explicit tensors"
msgstr ""

# 6c6b012f693f4e28b96cf9249576f464
#: ../source/userdoc/gasm_high.rst:519
msgid ""
"Explicit tensors of any order are permitted with the nested format. A "
"tensor of order ``n`` is written as a succession of tensor of order "
"``n-1`` of equal dimensions and separated by a comma. For instance "
"``[[[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]],[[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]]]``"
" is a fourth order tensor. Another possibility is to use the syntax "
"``Reshape([1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], 3, 2, 2, "
"2)`` where the components have to be given in Fortran order."
msgstr ""

# 3968725e26b04e18a999813030a85d0a
#: ../source/userdoc/gasm_high.rst:523
msgid "Access to tensor components"
msgstr ""

# 084d640ec1fc480aab4a1c716a81e999
#: ../source/userdoc/gasm_high.rst:524
msgid ""
"The access to a component of a vector/matrix/tensor can be done by "
"following a term by a left parenthesis, the list of components and a "
"right parenthesis. For instance ``[1,1,2](3)`` is correct and is "
"returning ``2`` as expected. Note that indices are assumed to begin by 1 "
"(even in C++ and with the python interface). The expressions "
"``[1,1;2,3](2,2)`` and ``Grad_u(2,2)`` are also correct provided that "
"``u`` is a vector valued declared variable. Note that the components can "
"be the result of a constant computation. For instance "
"``[1,1;2,3](1+1,a)`` is correct provided that ``a`` is a declared "
"constant but not if it is declared as a variable. A colon can replace the"
" value of an index in a Matlab like syntax for instance to access to a "
"line or a column of a matrix. ``[1,1;2,3](1,:)`` denotes the first line "
"of the matrix ``[1,1;2,3]``. It can also be used for a fourth order "
"tensor."
msgstr ""

# 65ebfa74c35d44999000997b0e9cea4c
#: ../source/userdoc/gasm_high.rst:527
msgid "Constant expressions"
msgstr ""

# 5341b0f0bec341d6b2a9d77fe276cc2e
#: ../source/userdoc/gasm_high.rst:529
msgid ""
"Floating points with standards notations (for instance ``3``, ``1.456``, "
"``1E-6``)"
msgstr ""

# 3230a78c3a514406bfd282f57a4e88ce
#: ../source/userdoc/gasm_high.rst:530
msgid "``pi``: the constant Pi."
msgstr ""

# 7d494f7e7de0464b8ae88198ccc95df9
#: ../source/userdoc/gasm_high.rst:531
msgid ""
"``meshdim``: the dimension of the current mesh (i.e. size of geometrical "
"nodes)"
msgstr ""

# ef88d3a69f49456c87c33cd3db0850d4
#: ../source/userdoc/gasm_high.rst:532
msgid ""
"``timestep``: the main time step of the model on which this assembly "
"string is evaluated (defined by ``md.set_time_step(dt)``). Do not work on"
" pure workspaces."
msgstr ""

# f665360fa9734eb19b09de2070d0c09d
#: ../source/userdoc/gasm_high.rst:533
msgid ""
"``Id(n)``: the identity matrix of size :math:`n\\times n`. `n` should be "
"an integer expression. For instance ``Id(meshdim)`` is allowed."
msgstr ""

# d99e731ae8ca4284a147631fa0dafd12
#: ../source/userdoc/gasm_high.rst:534
msgid ""
"``qdim(u)``: the total dimension of the variable ``u`` (i.e. the  size "
"for fixed size variables and the total dimension of the vector/tensor "
"field for FEM variables)"
msgstr ""

# dd1fbf991ff04a79ae45abbf37d6f15a
#: ../source/userdoc/gasm_high.rst:535
msgid ""
"``qdims(u)``: the dimensions of the variable ``u`` (i.e. the size for "
"fixed size variables and the vector of dimensions of the vector/tensor "
"field for FEM variables)"
msgstr ""

# 903095a79caf4c6d8d6188e90221dca2
#: ../source/userdoc/gasm_high.rst:538
msgid "Special expressions linked to the current position"
msgstr ""

# e53c0ff8c6f44338826cf83cd5346e4a
#: ../source/userdoc/gasm_high.rst:540
msgid ""
"``X`` is the current coordinate on the real element (i.e. the position on"
" the mesh of the current Gauss point on which the expression is "
"evaluated), ``X(i)`` is its i-th component. For instance "
"``sin(X(1)+X(2))`` is a valid expression on a mesh of dimension greater "
"or equal to two."
msgstr ""

# 5faa18a994534a6a9340f8520c745062
#: ../source/userdoc/gasm_high.rst:542
msgid ""
"``Normal`` the outward unit normal vector to a boundary when integration "
"on a boundary is performed."
msgstr ""

# e0c0835920ba4fcc9fa015f3e884adff
#: ../source/userdoc/gasm_high.rst:544
msgid ""
"``element_size`` gives an estimate of the current element diameter (using"
" getfem::convex_radius_estimate)."
msgstr ""

# a1589026ad2d4ba8a0a6090422c2f550
#: ../source/userdoc/gasm_high.rst:546
msgid ""
"``element_K`` gives the gradient of the geometric transformation (see "
":ref:`dp-transgeo`) from the reference (parent) element. Could be used "
"only if the mesh do not contain elements of mixed dimensions."
msgstr ""

# d387356775ae4d089aa66672e83b07dc
#: ../source/userdoc/gasm_high.rst:548
msgid ""
"``element_B`` gives the transpose of the pseudo-inverse of the gradient "
"of the geometric transformation (see :ref:`dp-transgeo`) from the "
"reference (parent) element. Could be used only if the mesh do not contain"
" elements of mixed dimensions."
msgstr ""

# d007e70cc1914c038d6682089f6c6970
#: ../source/userdoc/gasm_high.rst:553
msgid "Print command"
msgstr ""

# a7d912ce6a464e189dc1f532137c1769
#: ../source/userdoc/gasm_high.rst:555
msgid ""
"For debugging purpose, the command ``Print(a)`` is printing the tensor "
"``a`` and pass it unchanged. For instance  ``Grad_u.Print(Grad_Test_u)`` "
"will have the same effect as ``Grad_u.Grad_Test_u`` but printing the "
"tensor ``Grad_Test_u`` for each Gauss point of each element. Note that "
"constant terms are printed only once at the beginning of the assembly. "
"Note also that the expression could be derived so that the derivative of "
"the term may be printed instead of the term itself."
msgstr ""

# e46e8a4b65204eed94bfc78c0ad3bb86
#: ../source/userdoc/gasm_high.rst:558
msgid "Reshape a tensor"
msgstr ""

# ca0b75f055b24494aa3afbbac34a8c57
#: ../source/userdoc/gasm_high.rst:560
msgid ""
"The command ``Reshape(t, i, j, ...)`` reshapes the tensor ``t`` (which "
"could be an expression). The only constraint is that the number of "
"components should be compatible. For instance  ``Reshape(Grad_u, 1, "
"meshdim)`` is equivalent to ``Grad_u'`` for u a scalar variable. Note "
"that the order of the components remain unchanged and are classically "
"stored in Fortran order for compatibility with Blas/Lapack."
msgstr ""

# e1923361a4994e2f9f2c0622982c3587
#: ../source/userdoc/gasm_high.rst:563
msgid "Trace, Deviator, Sym and Skew operators"
msgstr ""

# 9b63d4e2839e4da99241b330f4e12882
#: ../source/userdoc/gasm_high.rst:565
msgid ""
"Trace, Deviator, Sym and Skew operators are linear operators acting on "
"square matrices:"
msgstr ""

# 0dc57e6c66034544971b017c534db8a0
#: ../source/userdoc/gasm_high.rst:567
msgid ""
"``Trace(m)`` gives the trace (sum of diagonal components) of a square "
"matrix ``m``."
msgstr ""

# d00f452bbc484e8d973e0abf01afa867
#: ../source/userdoc/gasm_high.rst:569
msgid ""
"``Deviator(m)`` gives the deviator of a square matrix ``m``. It is "
"equivalent to ``m - Trace(m)*Id(m_dim)/m_dim``, where ``m_dim`` is the "
"dimension of ``m``."
msgstr ""

# ab0f92f909c84788bf75b29b485de4b5
#: ../source/userdoc/gasm_high.rst:571
msgid ""
"``Sym(m)`` gives the symmetric part of a square matrix ``m``, i.e. ``(m +"
" m')/2``."
msgstr ""

# 164f3a7dd992438db83b16017ef7ac07
#: ../source/userdoc/gasm_high.rst:573
msgid ""
"``Skew(m)`` gives the skew-symmetric part of a square matrix ``m``, i.e. "
"``(m - m')/2``."
msgstr ""

# f145e40830e9458bb20e9502b1294e09
#: ../source/userdoc/gasm_high.rst:575
msgid ""
"The four operators can be applied on test functions. Which means that for"
" instance both ``Trace(Grad_u)`` and  ``Trace(Grad_Test_u)`` are valid "
"when ``Grad_u`` is a square matrix (i.e. ``u`` a vector field of the same"
" dimension as the mesh)."
msgstr ""

# 79fd9cec48754e74af520dbb0bcd0931
#: ../source/userdoc/gasm_high.rst:580
msgid "Nonlinear operators"
msgstr ""

# 0db7fcba07db49b2bf6fddad25518eed
#: ../source/userdoc/gasm_high.rst:582
msgid ""
"The weak form language provide some predefined nonlinear operator. Each "
"nonlinear operator is available together with its first and second "
"derivatives. Nonlinear operator can be applied to an expression as long "
"as this expression do not contain some test functions."
msgstr ""

# 8f82689b9ab7490f960970063317f91a
#: ../source/userdoc/gasm_high.rst:584
msgid ""
"``Norm(v)`` for ``v`` a vector or a matrix gives the euclidean norm of a "
"vector or a |Frobenius| norm of a matrix."
msgstr ""

# 68224a0eda054785a412146dc77f7444
#: ../source/userdoc/gasm_high.rst:586
msgid ""
"``Norm_sqr(v)`` for ``v`` a vector or a matrix gives the square of the "
"euclidean norm of a vector or of the |Frobenius| norm of a matrix. For a "
"vector this is equivalent to ``v.v`` and for a matrix to ``m:m``."
msgstr ""

# f6569d50a9d444ceb0cc2ea664a451f3
#: ../source/userdoc/gasm_high.rst:588
msgid ""
"``Normalized(v)`` for ``v`` a vector or a matrix gives ``v`` divided by "
"its euclidean (for vectors) or |Frobenius| (for matrices) norm. In order "
"to avoid problems when ``v`` is close to 0, it is implemented as "
"``Normalized_reg(v, 1E-25)``. Use with care. Think that the derivative at"
" the origin of ``Normalized(v)*Norm(v)`` is wrong (it vanishes) and very "
"different from the derivative of ``v``."
msgstr ""

# d42c8be35acc411d97b4546907decbbb
#: ../source/userdoc/gasm_high.rst:590
msgid ""
"``Normalized_reg(v, eps)`` for ``v`` a vector or a matrix gives a "
"regularized version of ``Normalized(v)`` : ``v/sqrt(|v|*|v|+eps*eps)``."
msgstr ""

# 1a6461a71c034b67a22b901fe270e4f5
#: ../source/userdoc/gasm_high.rst:592
msgid ""
"``Ball_projection(v, r)`` for ``v`` a vector or a matrix and ``r`` a "
"scalar, gives the projection of ``v`` on the ball of radius ``r`` and "
"center the origin."
msgstr ""

# 83c8ff56fff5492da9a01b84c1bca67b
#: ../source/userdoc/gasm_high.rst:594
msgid "``Det(m)`` gives the determinant of a square matrix ``m``."
msgstr ""

# 0e2228c781a6488f8673c2766d311a44
#: ../source/userdoc/gasm_high.rst:596
msgid ""
"``Inv(m)`` gives the inverse of a square matrix ``m``. The second "
"derivative is not available since it is an order 6 tensor. This means "
"that ``Inv(m)`` cannot be used in the description of a potential energy."
msgstr ""

# df315ec281c5417098adcfeb3cf6f5cc
#: ../source/userdoc/gasm_high.rst:598
msgid "``Expm(m)`` gives the exponential of a square matrix ``m``."
msgstr ""

# 617ebfb859d24ce18f225e346b405c2c
#: ../source/userdoc/gasm_high.rst:600
msgid "``Logm(m)`` gives the logarithm of a square matrix ``m``."
msgstr ""

# 2114a6f2421d468fac43a0c658de0848
#: ../source/userdoc/gasm_high.rst:602
msgid ""
"``Matrix_I2(m)`` gives the second invariants of a square matrix ``m`` "
"which is defined by ``(sqr(Trace(m)) - Trace(m*m))/2``."
msgstr ""

# ad4de06e43124dd6a7fadaef539f38ff
#: ../source/userdoc/gasm_high.rst:604
msgid ""
"``Matrix_J1(m)`` gives the modified first invariant of a square matrix "
"defined by ``Trace(m)pow(Det(m),-1/3)``."
msgstr ""

# a1cbe6bffb0f4fcdb65394bd9ddd73cd
#: ../source/userdoc/gasm_high.rst:606
msgid ""
"``Matrix_J2(m)`` gives the modified first invariant of a square matrix "
"defined by ``Matrix_I2(m)*pow(Det(m),-2/3)``."
msgstr ""

# d7645888a46e47dea2f0cb4613d229f6
#: ../source/userdoc/gasm_high.rst:611
msgid "Macro definition"
msgstr ""

# 4eccbcf535ec484ca2852a794070b498
#: ../source/userdoc/gasm_high.rst:613
msgid ""
"The weak form language allows the use of macros that are either "
"predefined in the model or ga_workspace object or directly defined at the"
" begining of an assembly string. The definition into a ga_workspace or "
"model object is done as follows::"
msgstr ""

# ac88926e11064610a9664f8b8ba49734
#: ../source/userdoc/gasm_high.rst:621
msgid ""
"The definition of a macro into an assembly string is inserted before any "
"regular expression, separated by a semicolon with the following syntax::"
msgstr ""

# c2bb78a0c3ef479c84b5f59b8940beb6
#: ../source/userdoc/gasm_high.rst:625
msgid ""
"where ``name`` is he macro name which then can be used in the weak form "
"language and contains also the macro parameters, ``expr`` is a valid "
"expression of the weak form language (which may itself contain some macro"
" definitions). For instance, a valid macro with no parameter is::"
msgstr ""

# ff2447b9edb44bba88a42a27f937aeb9
#: ../source/userdoc/gasm_high.rst:629
msgid ""
"where ``alpha`` should be a valid declared variable or data. A valid "
"macro with two parameters is for instance::"
msgstr ""

# 2eb241578eb043168bd93f7e90295f37
#: ../source/userdoc/gasm_high.rst:633
msgid ""
"The following assembly string is then valid (if ``u`` is a valid "
"variable)::"
msgstr ""

# 525f718c1918478fb086d3a39319315e
#: ../source/userdoc/gasm_high.rst:637
msgid ""
"Parameter are allowed to be post-fixed to ``Grad_``, ``Hess_``, ``Test_``"
" and ``Test2_`` prefixes, so that the following assembly string is "
"valid::"
msgstr ""

# fe4d4767d6af4432947ce0d5444b76d3
#: ../source/userdoc/gasm_high.rst:641
msgid "or with an imbrication of two macros::"
msgstr ""

# efe758c0004c4e73906f2f3037fac20b
#: ../source/userdoc/gasm_high.rst:645
msgid "A macro can be deleted from a ga_workspace or model object as follows::"
msgstr ""

# 73d992ac9af04c0fa1ac5f8e32058843
#: ../source/userdoc/gasm_high.rst:650
msgid ""
"Note that a macro defined at the begining of an assembly string is only "
"defined in the assembly string and cannot be used later without being "
"added in a model or ga_workspace object."
msgstr ""

# bc13383a9b3e49e3b9ac8a09e6effc3f
#: ../source/userdoc/gasm_high.rst:652
msgid ""
"The macros are expanded inline at the lexical analysis phase. Note that a"
" the compilation phase, the repeated expressions are automatically "
"factorized and computed only once."
msgstr ""

# 00308eeaa1f64e32a9075cabefb78e27
#: ../source/userdoc/gasm_high.rst:655
msgid "Explicit Differentiation"
msgstr ""

# a5a63f86b04e4b6b9851efc4294548ff
#: ../source/userdoc/gasm_high.rst:656
msgid ""
"The workspace object automatically differentiate terms that are of lower "
"deriation order. However, it is also allowed to explicitely differentiate"
" an expression with respect to a variable. One interest is that the "
"automatic differentiation performs a derivative with respect to all the "
"declared variables of model/workspace but this is not necessarily the "
"expected behavior when using a potential energy, for instance. The syntax"
" is::"
msgstr ""

# 9b280799b49c442e99e2c34662d0c4c7
#: ../source/userdoc/gasm_high.rst:660
msgid "For instance, the following expression::"
msgstr ""

# c18dd5e9e6a84875a64564e1ccbf86c7
# b493ddc729e24816844ff3906075f5af
#: ../source/userdoc/gasm_high.rst:664 ../source/userdoc/gasm_high.rst:681
msgid "will result in::"
msgstr ""

# 0b7225bcbf214dd8955976a1a27a075e
#: ../source/userdoc/gasm_high.rst:668
msgid "So that::"
msgstr ""

# 542de496108549a5965750cca4cbd3a0
#: ../source/userdoc/gasm_high.rst:672
msgid ""
"is a valid expression. A third argument can be added to the ``Diff`` "
"command to specify the direction::"
msgstr ""

# 1dfac36638c647dcab359b8d5cfce682
#: ../source/userdoc/gasm_high.rst:676
msgid ""
"in that case, it replaces the ``Test_variable`` by the expression "
"``direction`` which has to be of the same dimension as ``variable``. It "
"computes the derivative of ``expression`` with respect to ``variable`` in"
" the direction ``direction``. For instance::"
msgstr ""

# d0c0281a87e747f0801ad11c5f211e98
#: ../source/userdoc/gasm_high.rst:685
msgid "if ``v`` is any valid expression of the same dimension than ``u``."
msgstr ""

# 8adf848553764f7f80db191209d00ba5
#: ../source/userdoc/gasm_high.rst:688
msgid "Explicit Gradient"
msgstr ""

# 658de642a1554fa09f4dec6f89a11eef
#: ../source/userdoc/gasm_high.rst:689
msgid ""
"It is possible to ask for symbolic computation of the gradient of an "
"expression with::"
msgstr ""

# 0d88b600e7c34c9389503bf2ade30fb3
#: ../source/userdoc/gasm_high.rst:693
msgid ""
"It will be computed as far as it is possible. The limitations come from "
"the fact that |gf| is limited to second order derivative of shape "
"function and nonlinear operators are supposed to provide only first and "
"second order derivatives."
msgstr ""

# 93443a4fe1a84551bec18710926dc1e7
#: ../source/userdoc/gasm_high.rst:695
msgid "Of course::"
msgstr ""

# 9d0ac600f70a43449522873ff62be234
#: ../source/userdoc/gasm_high.rst:699
msgid "is equivalent to::"
msgstr ""

# ec85ae53577b4e16ac1fc9296dca8130
#: ../source/userdoc/gasm_high.rst:703
msgid "for a varible ``u``."
msgstr ""

# 5dfeefa7a58f4ab29eb197b687a019a2
#: ../source/userdoc/gasm_high.rst:708
msgid "Interpolate transformations"
msgstr ""

# 62c4809ccdf8401e84d9f5c4c34e1683
#: ../source/userdoc/gasm_high.rst:710
msgid ""
"The ``Interpolate`` operation allows to compute integrals between "
"quantities which are either defined on different part of a mesh or even "
"on different meshes. It is a powerful operation which allows to compute "
"mortar matrices or take into account periodic conditions. However, one "
"have to remember that it is based on interpolation which may have a non-"
"negligible computational cost."
msgstr ""

# ef22713f149840cd8916990d0a58cc5b
#: ../source/userdoc/gasm_high.rst:712
msgid ""
"In order to use this functionality, the user have first to declare to the"
" workspace or to the model object an interpolate transformation which "
"described the map between the current integration point and the point "
"lying on the same mesh or on another mesh."
msgstr ""

# fcd89be3c7ef4597be0df6557496d2b9
#: ../source/userdoc/gasm_high.rst:714
msgid ""
"Different kind of transformations can be described. Several kinds of "
"transformations has been implemented. The first one, described hereafter "
"is a transformation described by an expression. A second one corresponds "
"to the raytracing contact detection (see :ref:`ud-model-contact-"
"friction_raytrace_inter_trans`). Some other transformations (neighbour "
"element and element extrapolation) are describe in the next sections."
msgstr ""

# 5e600e16696b49b3980089e22fe07a45
#: ../source/userdoc/gasm_high.rst:716
msgid ""
"The transformation defined by an expression can be added to the workspace"
" or the model thanks to the command::"
msgstr ""

# 6b6597bd96d74c9890c82680efa2189f
#: ../source/userdoc/gasm_high.rst:726
msgid ""
"where ``workspace`` is a workspace object, ``md`` a model object, "
"``transname`` is the name given to the transformation, ``source_mesh`` "
"the mesh on which the integration occurs, ``target_mesh`` the mesh on "
"which the interpolation is performed and ``expr`` is a regular expression"
" of the high-level generic weak form language which may contains "
"reference to the variables of the workspace/model."
msgstr ""

# 4a7fb0e9093f47f3bbfc92b4bd6733cc
#: ../source/userdoc/gasm_high.rst:728
msgid "For instance, an expression::"
msgstr ""

# f0cce22eaae1454c93ddb6572eeb18ab
#: ../source/userdoc/gasm_high.rst:733
msgid ""
"will allow to integrate some expressions at the current position with a "
"shift of -1 with respect to the first coordinate. This simple kind of "
"transformation can be used to prescribe a periodic condition."
msgstr ""

# 4186634b87af477bb331a1eeca11cd69
#: ../source/userdoc/gasm_high.rst:735
msgid "Of course, one may used more complex expressions such as::"
msgstr ""

# 787ceb40733d4fbbb39f8cc22ea38a44
#: ../source/userdoc/gasm_high.rst:743
msgid "where ``u`` is a vector variable of the workspace/model."
msgstr ""

# f18a6394d27a4383818fa81f20bcb204
#: ../source/userdoc/gasm_high.rst:745
msgid ""
"Once a transformation is defined in the workspace/model, one can "
"interpolate a variable or test functions, the position or the unit normal"
" vector to a boundary thanks to one of these expressions::"
msgstr ""

# a2e07426b5ce42b99469d0e8c2dc8530
#: ../source/userdoc/gasm_high.rst:758
msgid "where ``u`` is the name of the variable to be interpolated."
msgstr ""

# f81c7d9a135c4584a3ba74318cc291a1
#: ../source/userdoc/gasm_high.rst:760
msgid ""
"For instance, the assembly expression to prescribe the equality of a "
"variable ``u`` with its interpolation (for instance for prescribing a "
"periodic boundary condition) thanks to a multiplier ``lambda`` could be "
"written::"
msgstr ""

# 59b6766d7dc64cd6908c60bfbfa1c974
#: ../source/userdoc/gasm_high.rst:764
msgid ""
"(see :file:`demo\\_periodic\\_laplacian.m` in "
":file:`interface/tests/matlab` directory)."
msgstr ""

# 58673f5e93e24cf5b31f29c7cf65ad4d
#: ../source/userdoc/gasm_high.rst:766
msgid ""
"In some situations, the interpolation of a point may fail if the "
"transformed point is outside the target mesh. Both in order to treat this"
" case and to allow the transformation to differentiate some other cases "
"(see :ref:`ud-model-contact-friction_raytrace_inter_trans` for the "
"differentiation between rigid bodies and deformable ones in the "
"Raytracing_interpolate_transformation) the tranformation returns an "
"integer identifiant to the weak form language. A value 0 of this "
"identifiant means that no corresponding location on the target mesh has "
"been found. A value of 1 means that a corresponding point has been found."
" This identifiant can be used thanks to the following special command of "
"the weak form language::"
msgstr ""

# 728c1b09e6ac4cd69fb2d2d5f71a5c5a
#: ../source/userdoc/gasm_high.rst:770
msgid ""
"where ``transname`` is the name of the transformation, ``expr`` is the "
"expression to be evaluated and ``i`` value of the returned integer "
"identifiant for which the expression have to be computed. Note that ``i``"
" can be ommited, in that case, the expression is evaluated for a nonzero "
"identifiant (i.e. when a corresponding point has been found). For "
"instance, the previous assembly expression to prescribe the equality of a"
" variable ``u`` with its interpolation could be writtne::"
msgstr ""

# b646489bcb8d4f4aa084fe6c3dc7b03d
#: ../source/userdoc/gasm_high.rst:775
msgid ""
"In that case, the equality will only be prescribed in the part of the "
"domain where the transformation succeed and in the other part, the "
"mulitplier is enforced to vanish."
msgstr ""

# 224e0bc8c18643a6b502e43959db0254
#: ../source/userdoc/gasm_high.rst:778
msgid ""
"**CAUTION**: You have to think that when some variables are used in the "
"transformation, the computation of the tangent system takes into account "
"these dependence. However, the second derivative of a transformation with"
" respect to a variable used has not been implemented. Thus, such a "
"transformation is not allowed in the definition of a potential since it "
"cannot be derived twice."
msgstr ""

# 09976c9d5fa64fff87d4242d34f68c02
#: ../source/userdoc/gasm_high.rst:781
msgid "Element extrapolation transformation"
msgstr ""

# 655fe5bec95c46908c2b24037e0eb074
#: ../source/userdoc/gasm_high.rst:783
msgid ""
"A specific transformation (see previous section) is defined in order to "
"allows the evaluation of certain quantities by extrapolation with respect"
" to another element (in general a neighbour element). This is not "
"strictly speaking a transformation since the point location remain "
"unchanged, but the evaluation is made on another element extrapolating "
"the shape functions outside it. This transformation is used for "
"stabilization term in fictitious domain applications (with cut elements) "
"where it is more robust to extrapolate some quantities on a neighbour "
"element having a sufficiently large intersection with the real domain "
"than evaluating them on the current element if it has a small "
"intersection with the real domain. The functions allowing to add such a "
"transformation to a model or a workspace are::"
msgstr ""

# 3a34e9637c8644ddb4d4543e7e282cf9
#: ../source/userdoc/gasm_high.rst:791
msgid ""
"The map elt_corr should contain the correspondances between the elements "
"where the transformation is to be applied and the respective elements "
"where the extrapolation has to be made. On the element not listed in the "
"map, no transformation is applied and the evaluation is performed "
"normally on the current element."
msgstr ""

# fbb1750aca5d49a99da1a9ad4f6c1661
#: ../source/userdoc/gasm_high.rst:793
msgid ""
"The following functions allow to change the element correspondance of a "
"previously added element extrapolation transformation::"
msgstr ""

# 7cde73880571470aa29ae5bcf6b85d4e
#: ../source/userdoc/gasm_high.rst:805
msgid "Evaluating discontinuities across inter-element edges/faces"
msgstr ""

# fe0917a2e6f34f37929da69326101d97
#: ../source/userdoc/gasm_high.rst:807
msgid ""
"A specific interpolate transformation (see previous sections), called "
"``neighbour_elt`` is defined by default in all models. This "
"transformation can only be used when a computation is made on an internal"
" edge/face of a mesh, i.e. an element face shared at least by two "
"elements. It aims to compute discontinuity jumps of a variable across "
"inter-element faces. It is particularly suitable to implement "
"Discontinuous Galerkin and interior penalty methods, Ghost penalty terms "
"or a posteriori estimators. The expressions::"
msgstr ""

# 4c21b92eb2324bd0aec637c60b6b6965
#: ../source/userdoc/gasm_high.rst:820
msgid ""
"are available (as with any other interpolate transformation) and compute "
"a field on the current point but on the neighbour element. Of course, "
"``Interpolate(X, neighbour_elt)`` as no specific interest since it "
"returns the same result as ``X``. Similarly, in most cases, "
"``Interpolate(Normal, neighbour_elt)`` will return the opposite of "
"``Normal`` except for instance for 2D shell element in a 3D mesh where it"
" has an interest."
msgstr ""

# 4bb03ffae2a0483f8a506e19887afc5d
#: ../source/userdoc/gasm_high.rst:822
msgid "The jump on a variable ``u`` can be computed with::"
msgstr ""

# f61c506e6ba4442ba9cc54de9e413bdf
#: ../source/userdoc/gasm_high.rst:826
msgid "and a penalisation term of the jump can be written::"
msgstr ""

# 9d5f08965b214bb8afd9ba1de3c5e794
#: ../source/userdoc/gasm_high.rst:830
msgid ""
"Note that the region representing the set of all internal faces of a mesh"
" can be obtained thanks to the function::"
msgstr ""

# c0cf8afb00274deba72ea31f90444e3f
#: ../source/userdoc/gasm_high.rst:834
msgid ""
"where ``mr`` is an optional mesh region. If ``mr`` is specified only the "
"face internal with respect to this region are returned. An important "
"aspect is that  each face is represented only once and is arbitrarily "
"chosen between the two neighbour elements."
msgstr ""

# 507e722aa664403dbf5a3a2ca0a85ff1
#: ../source/userdoc/gasm_high.rst:836
msgid ""
"See for instance :file:`interface/tests/python/demo_laplacian_DG.py` or "
":file:`interface/tests/matlab/demo_laplacian_DG.m` for an example of use."
msgstr ""

# 9ef2eb16bac147f880e0c016ab2b6ea9
#: ../source/userdoc/gasm_high.rst:838
msgid ""
"Compared to other interpolate transformations, this transformation is "
"more optimized and benefits from finite element and geometric "
"transformation pre-computations."
msgstr ""

# 4291bb0b65ce4a53836060e3f24170a7
#: ../source/userdoc/gasm_high.rst:843
msgid "Elementary transformations"
msgstr ""

# 9c2bbd5368b94a38b88d68e7cec1b402
#: ../source/userdoc/gasm_high.rst:845
msgid ""
"An elementary transformation is a linear transformation of the shape "
"functions given by a matrix which may depend on the element which is "
"applied to the local degrees of freedom at the element level. an example "
"of definition of elementary transformation can be found in the file "
":file:`src/getfem_linearized_plates.cc`. It aims for instance to define a"
" local projection of a finite element on a lower level element to perform"
" a reduction such as the one used in MITC elements."
msgstr ""

# 99ae7c6d9dbe4bc6a4df49dd1f06889f
#: ../source/userdoc/gasm_high.rst:853
msgid ""
"Once a transformation is defined, it can be added to the model/workspace "
"with the method::"
msgstr ""

# 905ed3d2bc724c67926c69b50318c8a1
#: ../source/userdoc/gasm_high.rst:858
msgid ""
"where ``pelementary_transformation`` is a pointer to an object deriving "
"from ``virtual_elementary_transformation``. Once it is added to the "
"model/workspace, it is possible to use the following expressions in the "
"weak form language::"
msgstr ""

# 41e41ca8d29e444c8cac4c8309adba87
#: ../source/userdoc/gasm_high.rst:869
msgid ""
"where ``u`` is one of the FEM variables of the model/workspace. For the "
"moment, the only available elementary transformation is the the one for "
"the projection on rotated RT0 element for two-dimensional elements which "
"can be added thanks to the function (defined in "
":file:`src/getfem/getfem_linearized_plates.h`)::"
msgstr ""

# 52a54d6ee17849c2a0ab966aba2a907a
#: ../source/userdoc/gasm_high.rst:876
msgid "Xfem discontinuity evaluation (with mesh_fem_level_set)"
msgstr ""

# 5a2f0cd94b5d474faeec40227f600797
#: ../source/userdoc/gasm_high.rst:878
msgid ""
"For |gf| 5.1. When using a fem cut by a level-set (using fem_level_set or"
" mesh_fem_level_set objects), it is often interesting to integrate the "
"discontinuity jump of a variable, or the jump in gradient or the average "
"value. For this purpose, the weak form language furnishes the following "
"expressions for ``u`` a FEM variable::"
msgstr ""

# f5246d5fcdd249a1ab13605bffc67195
#: ../source/userdoc/gasm_high.rst:898
msgid ""
"which are only available when the evaluation (integration) is made on the"
" curve/surface separating two zones of continuity, i.e. on the zero "
"level-set of a considered level-set function (using a "
"``mesh_im_level_set`` object). For instance, a jump in the variable ``u``"
" will be given by::"
msgstr ""

# e26fbd25a028417eb4d22a797a496ed9
#: ../source/userdoc/gasm_high.rst:902
msgid "and the average by::"
msgstr ""

# 8282a53ba3c94558be5863942f04b56b
#: ../source/userdoc/gasm_high.rst:911
msgid "Storage of sub-expressions in a getfem::im_data object during assembly"
msgstr ""

# 7ee1ceddaff2421aa98cf496ecdc9e8b
#: ../source/userdoc/gasm_high.rst:913
msgid ""
"It is possible to store in a vector depending on a getfem::im_data object"
" a part of an assembly computation, for instance in order to use this "
"computation in another assembly. This is an alternative to the "
"interpolation functions which allows not to compute twice the same "
"expression."
msgstr ""

# 03b772d53f004f22a384d2e9c6d86cbc
#: ../source/userdoc/gasm_high.rst:915
msgid ""
"The method to add such an assignment in the assembly is the following for"
" a model or a ga_workspace::"
msgstr ""

# d0f92697a292483195d1921b397ef75f
#: ../source/userdoc/gasm_high.rst:923
msgid ""
"It adds expression `expr` to be evaluated at assembly time and being "
"assigned to the data `dataname` which has to be of im_data type. `order` "
"represents the order of assembly where this assignement has to be done "
"(potential(0), weak form(1) or tangent system(2) or at each order(-1)). "
"The default value is 1. If before = 1, the the assignement is performed "
"before the computation of the other assembly terms, such that the data "
"can be used in the remaining of the assembly as an intermediary result "
"(be careful that it is still considered as a data, no derivation of the "
"expression is performed for the tangent system). If before = 0 (default),"
" the assignement is done after the assembly terms."
msgstr ""

# 2bf86fc4d62045f0a04e938e825e86b3
#: ../source/userdoc/gasm_high.rst:935
msgid "Additionally, In a model, the method::"
msgstr ""

# 01b3b619e38b4bf0bf50262ddb32017b
#: ../source/userdoc/gasm_high.rst:939
msgid "allows to cancel all the assembly assignments previously added."
msgstr ""

# 9f08d59c762c4e17aa29e624aa69ae34
#: ../source/userdoc/gasm_high.rst:7
msgid "asm"
msgstr ""

# 9f08d59c762c4e17aa29e624aa69ae34
#: ../source/userdoc/gasm_high.rst:7
msgid "generic assembly"
msgstr ""

