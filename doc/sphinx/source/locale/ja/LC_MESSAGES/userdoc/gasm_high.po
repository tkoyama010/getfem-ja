# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-07 10:04+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 56ea8d9c3fec49e98721a186c4e9b905
#: ../source/userdoc/gasm_high.rst:12
msgid ""
"Compute arbitrary terms - high-level generic assembly procedures - Weak-"
"form language"
msgstr ""

# ab169573749a4fe98e0477c80d934562
#: ../source/userdoc/gasm_high.rst:14
msgid ""
"This section presents what is now the main generic assembly of |gf|. It "
"is a high-level generic assembly in the sense that it is based on a weak "
"form language to describe the weak formulation of boundary value problems"
" of partial differential equations. It mainly has been developed to "
"circumvent the difficulties with the previous low-level generic assembly "
"(see  :ref:`ud-gasm-low`) for which nonlinear terms were quite difficult "
"to describe. Conversely, a symbolic differentiation algorithm is used "
"with this version. It simplifies a lot the approximation of nonlinear "
"coupled problems since only the weak form is necessary to be described, "
"the tangent system being automatically computed. Moreover, the weak form "
"language is compiled into optimized instructions before the evaluation on"
" each integration point in order to obtain a an optimal computational "
"cost."
msgstr ""

# 3bcbce76811f4b89912df59e6e8af948
#: ../source/userdoc/gasm_high.rst:16
msgid ""
"The header file to be included to use the high-level generic assembly "
"procedures in C++ is :file:`getfem/generic\\_assembly.h`."
msgstr ""

# e10ea69bf2514cfea0b7c9507679025f
#: ../source/userdoc/gasm_high.rst:19
msgid "Differences in execution time between high and low level generic assembly"
msgstr ""

# b8d0539f37d54c4fb63feeabe169d13b
#: ../source/userdoc/gasm_high.rst:20
msgid ""
"For basic linear assembly terms, the high level generic assembly is most "
"of the time faster than the low-level one. This is due to the fact that "
"the high-level generic assembly incorporates a compilation in basic "
"optimized instructions and operates simplifications. On complexe terms it"
" can be really faster due to the simplifications on repeated terms. On "
"the other hand, the fact that the low-level generic assembly incorporates"
" a mechanism to pre-compute on the reference element the linear term for "
"elements with a linear transformation makes that it can be faster on a "
"few simple linear terms. Of course, a possibility would be to incorporate"
" the ability to pre-compute on the reference element the linear term for "
"linear transformations in the high level generic assembly. However, it "
"would be rather complicated due to the high genericity of the language. A"
" consequence also is that exact integration is not allowed in the high "
"level generic assembly."
msgstr ""

# c70fc9ddb4e4432dbb09eed137ec1473
#: ../source/userdoc/gasm_high.rst:25
msgid "Overview of the weak form language syntax"
msgstr ""

# 4665e317e8dc48618efc0cae169f7779
#: ../source/userdoc/gasm_high.rst:27
msgid ""
"A specific weak form language has been developed to describe the weak "
"formulation of boundary value problems. It is intended to be close to the"
" structure of a standard weak formulation and it incorporates the "
"following components:"
msgstr ""

# c2f105a3859a4c2db1e87928c02ab501
#: ../source/userdoc/gasm_high.rst:29
msgid ""
"Variable names: A list of variables should be given. The variables are "
"described on a finite element method or can be a simple vector of "
"unknowns. For instance ``u``, ``v``, ``p``, ``pressure``, "
"``electric_field`` are valid variable names."
msgstr ""

# 84b953b64dc64a87bb5595b9c218f736
#: ../source/userdoc/gasm_high.rst:31
msgid ""
"Constant names: A list of constants could be given. The rules are the "
"same as for the variables but no test functions can be associated to "
"constants."
msgstr ""

# df8b3706d8f849d7b7471762eeec4b0e
#: ../source/userdoc/gasm_high.rst:33
msgid ""
"Test functions: Can be used with respect to any of the variables. They "
"are identified by the prefix ``Test_`` followed by the corresponding "
"variable name. For instance  ``Test_u``, ``Test_v``, ``Test_p``, "
"``Test_pressure``, ``Test_electric_field``. For the tangent system, "
"second order test functions are denoted ``Test2_`` followed by the "
"variable name."
msgstr ""

# c205a0922db5494baa03ce4f593b1a6b
#: ../source/userdoc/gasm_high.rst:35
msgid ""
"Gradients: Spatial gradients of variables or test functions are "
"identified by the prefix ``Grad_`` followed by the variable name or by "
"``Test_`` or ``Test2_`` followed itself by the variable name. This is "
"available for FEM variables only. For instance ``Grad_u``, "
"``Grad_pressure``, ``Grad_electric_field`` and ``Grad_Test_u``, "
"``Grad_Test2_v``. For vector fields, ``Div_u`` and ``Div_Test_u`` are "
"some shortcuts for ``Trace(Grad_u)`` and ``Trace(Grad_Test_u)``, "
"respectively."
msgstr ""

# ddf26e6345e74cf18f7729b5ec2e5e8c
#: ../source/userdoc/gasm_high.rst:37
msgid ""
"Hessians: The Hessian of a variable or test function is identified by the"
" prefix ``Hess_`` followed by the variable name or by ``Test_`` or "
"``Test2_`` followed itself by the variable name. This is available for "
"FEM variables only. For instance ``Hess_u``, ``Hess_v``, ``Hess_p``, "
"``Hess_Test2_v``, ``Hess_Test_p``, ``Hess_Test_pressure``."
msgstr ""

# f432fc9872c94a09962a9624a7d45ccb
#: ../source/userdoc/gasm_high.rst:39
msgid ""
"A certain number of predefined scalar functions (``sin(t)``, ``cos(t)``, "
"``pow(t,u)``, ``sqrt(t)``, ``sqr(t)``, ``Heaviside(t)``, ...). A scalar "
"function can be applied to scalar or vector/matrix/tensor expressions. It"
" applies componentwise. For functions having two arguments (``pow(t,u)``,"
" ``min(t,u)`` ...) if two non-scalar arguments are passed, the dimension "
"have to be the same. For instance \"max([1;2],[0;3])\" will return "
"\"[1;3]\"."
msgstr ""

# 8bbeb3ed81784b02a69bf65f57c7325a
#: ../source/userdoc/gasm_high.rst:41
msgid ""
"A certain number of operators: ``+``, ``-``, ``*``, ``/``, ``:``, ``.``, "
"``.*``, ``./``, ``@``, ``'``."
msgstr ""

# 5e653358adfb48519146286774f40be7
#: ../source/userdoc/gasm_high.rst:43
msgid ""
"Some constants: ``pi``, ``meshdim`` (the dimension of the current mesh), "
"``qdim(u)`` and ``qdims(u)`` the dimensions of the variable ``u`` (the "
"size for fixed size variables and the dimension of the vector field for "
"FEM variables), ``Id(n)`` the identity :math:`n\\times n` matrix."
msgstr ""

# eab0c7397af34dada6f3c6193f6568a7
#: ../source/userdoc/gasm_high.rst:45
msgid ""
"Parentheses can be used to change the operations order in a standard way."
" For instance ``(1+2)*4`` or ``(u+v)*Test_u`` are valid expressions."
msgstr ""

# 6a5cea7d698d4465b843c4cf3dad0c72
#: ../source/userdoc/gasm_high.rst:47
msgid ""
"The access to a component of a vector/matrix/tensor can be done by "
"following a term by a left parenthesis, the list of components and a "
"right parenthesis. For instance ``[1,1,2](3)`` is correct and will return"
" ``2``. Note that indices are assumed to begin by 1 (even in C++ and with"
" the python interface). A colon can replace the value of an index in a "
"Matlab like syntax."
msgstr ""

# deda44d45ddc43c3a7a4a5229a47a75b
#: ../source/userdoc/gasm_high.rst:49
msgid ""
"Explicit vectors: For instance ``[1;2;3;4]`` is an explicit vector of "
"size four. Each component can be an expression."
msgstr ""

# dc47b2b73f8e4937a4d26109ae365442
#: ../source/userdoc/gasm_high.rst:51
msgid ""
"Explicit matrices: For instance ``[1,3;2,4]`` and ``[[1,2],[3,4]]`` "
"denote the same 2x2 matrix. Each component can be an expression."
msgstr ""

# d48750e167d54808b8b1118936345c11
#: ../source/userdoc/gasm_high.rst:53
msgid ""
"Explicit fourth order tensors: example of explicit 3x2x2x2 fourth order "
"tensor in the nested format: "
"``[[[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]],[[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]]]``."
msgstr ""

# 32d02d16d88d49cb9cc9043d4d3d632e
#: ../source/userdoc/gasm_high.rst:55
msgid ""
"``X`` is the current coordinate on the real element, ``X(i)`` is its i-th"
" component."
msgstr ""

# dedfc56f58474baf8b83f41dd8718604
#: ../source/userdoc/gasm_high.rst:57
msgid ""
"``Normal`` is the outward unit normal vector to a boundary, when "
"integrating on a domain boundary, or the unit normal vector to a level-"
"set when integrating on a level-set with a ``mesh_im_level_set`` method. "
"In the latter case, the normal vector is in the direction of the level-"
"set function gradient."
msgstr ""

# a0beef19dddf4ea6a53a29e65b8977a1
#: ../source/userdoc/gasm_high.rst:59
msgid ""
"``Reshape(t, i, j, ...)``: Reshape a vector/matrix/tensor. Note that all "
"tensors in |gf| are stored in the Fortran order."
msgstr ""

# 88834a48b3294a0789a4c5927618b2d1
#: ../source/userdoc/gasm_high.rst:61
msgid ""
"A certain number of linear and nonlinear operators (``Trace``, ``Norm``, "
"``Det``, ``Deviator``, ``Contract``, ...). The nonlinear operators cannot"
" be applied to test functions."
msgstr ""

# 5933240b874b42989299da46d71c5928
#: ../source/userdoc/gasm_high.rst:63
msgid ""
"``Diff(expression, variable)``: The possibility to explicit differentiate"
" an expression with respect to a variable (symbolic differentiation)."
msgstr ""

# 9576352eb7ce472eaf995340e31c9919
#: ../source/userdoc/gasm_high.rst:65
msgid ""
"``Diff(expression, variable, direction)``: computes the derivative of "
"``expression`` with respect to ``variable`` in the direction "
"``direction``."
msgstr ""

# d468e90e634a429db1fa5b5316676cdc
#: ../source/userdoc/gasm_high.rst:67
msgid ""
"``Grad(expression)``: When possible, symbolically derive the gradient of "
"the given expression."
msgstr ""

# 3856cdc5eb7a4b4c870d9f89322967c4
#: ../source/userdoc/gasm_high.rst:69
msgid ""
"Possiblility of macro definition (in the model, the ga_workspace object "
"or directly in the assembly string). The macros should be some valid "
"expressions that are expanded inline at the lexical analysis phase (if "
"they are used several times, the computation is automatically factorized "
"at the compilation stage)."
msgstr ""

# 332b2519d9b04b87b6448da34e053360
#: ../source/userdoc/gasm_high.rst:71
msgid ""
"``Interpolate(variable, transformation)``: Powerful operation which "
"allows to interpolate the variables, or test functions either on the same"
" mesh on other elements or on another mesh. ``transformation`` is an "
"object stored by the workspace or model object which describes the map "
"from the current point to the point where to perform the interpolation. "
"This functionality can be used for instance to prescribe periodic "
"conditions or to compute mortar matrices for two finite element spaces "
"defined on different meshes or more generally for fictitious domain "
"methods such as fluid-structure interaction."
msgstr ""

# 25361366c8424db5b1d258a8823308f1
#: ../source/userdoc/gasm_high.rst:73
msgid ""
"``Elementary_transformation(variable, transformation)``: Allow a linear "
"tranformation defined at the element level (i.e. not possible to define "
"at the gauss point level). This feature has been added mostly for "
"defining a reduction for plate elements (projection onto low-level vector"
" element such as rotated RT0). ``transformation`` is an object stored by "
"the workspace or model object which describes the trasformation for a "
"particular element."
msgstr ""

# 999581244dd44d75b5a2883b7169c27d
#: ../source/userdoc/gasm_high.rst:75
msgid ""
"Possibility of integration on the direct product of two-domains for "
"double integral computation or coupling of two variables with a Kernel / "
"convolution / exchange integral. This allows terms like "
":math:`\\displaystyle\\int_{\\Omega_1}\\int_{\\Omega_2}k(x,y)u(x)v(y)dydx`"
" with :math:`\\Omega_1` and :math:`\\Omega_2` two domains, different or "
"not, having their own meshes, integration methods and with :math:`u` a "
"variable defined on :math:`\\Omega_1` and :math:`v` a variable defined on"
" :math:`\\Omega_2`. The keyword ``Secondary_domain(variable)`` allows to "
"access to the variables on the second domain of integration."
msgstr ""

# a2513e84dedd485fb38257d44babf94f
#: ../source/userdoc/gasm_high.rst:78
msgid "Some basic examples"
msgstr ""

# 3480d26f0d7348c7b414f1ad230d5626
#: ../source/userdoc/gasm_high.rst:80
msgid "The weak formulation for the Poisson problem on a domain :math:`\\Omega`"
msgstr ""

# 8dea79671e844e0b9089546ffd46e113
#: ../source/userdoc/gasm_high.rst:86
msgid ""
"with Dirichlet boundary conditions :math:`u = 0` on "
":math:`\\partial\\Omega` is classically"
msgstr ""

# 59f8ef33bbcc4927abbba1306f9b53d8
#: ../source/userdoc/gasm_high.rst:93
msgid ""
"for all test functions :math:`v` vanishing on  :math:`\\partial\\Omega`. "
"The corresponding expression on the assembly string is::"
msgstr ""

# f9639661532948dd90f925dbe117ea70
#: ../source/userdoc/gasm_high.rst:98
msgid ""
"where ``my_f`` is the expression of the source term. If now the equation "
"is"
msgstr ""

# 10c2e4237ae74172bdd64dac79915ec9
#: ../source/userdoc/gasm_high.rst:104
msgid "for ``a`` a scalar coefficient, the corresponding assembly string is::"
msgstr ""

# c97b7e0b071d45a88d7999d87a3177c8
#: ../source/userdoc/gasm_high.rst:108
msgid ""
"where ``a`` has to be declared as a scalar constant or a scalar field. "
"Not that is is also possible to describe it explicitly. For instance the "
"problem"
msgstr ""

# 10f254ee28554c8c9db3827b8135c54e
#: ../source/userdoc/gasm_high.rst:114
msgid "where :math:`x_1, x_2` are the coordinates on the mesh, can be expressed::"
msgstr ""

# 32d06740193946839b73cb49496e85c3
#: ../source/userdoc/gasm_high.rst:118
msgid "Another classical equation is linear elasticity:"
msgstr ""

# cf912aec8c58421080f17ca52fccf84a
#: ../source/userdoc/gasm_high.rst:124
msgid ""
"for :math:`u` a vector field and :math:`\\sigma(u) = \\lambda \\mbox{div "
"} u + \\mu (\\nabla u + (\\nabla u)^T)` when isotropic linear elasticity "
"is considered. The corresponding assembly string to describe the weak "
"formulation can be written::"
msgstr ""

# 33c0ec4b80974684840a63ef859bcd0f
# ae5ba4c1ddb842fbadbb13cdf6fd05c0
# 6453e8bc7651451587bc96853577ac98
#: ../source/userdoc/gasm_high.rst:128 ../source/userdoc/gasm_high.rst:622
#: ../source/userdoc/gasm_high.rst:726
msgid "or::"
msgstr ""

# 3dcdfd9ecdb64437a18f31b0913d2582
#: ../source/userdoc/gasm_high.rst:132
msgid ""
"Here again, the coefficients ``lambda`` and ``mu`` can be given "
"constants, or scalar field or explicit expression or even expression "
"coming from some other variables in order to couples some problems. For "
"instance, if the coefficients depends on a temperature field one can "
"write::"
msgstr ""

# 4e77ee5baff840d5b638cef1d994ab6c
#: ../source/userdoc/gasm_high.rst:137
msgid ""
"where ``theta`` is the temperature which can be the solution to a Poisson"
" equation::"
msgstr ""

# ef39378bf0d44616be1546ba95514561
#: ../source/userdoc/gasm_high.rst:141
msgid ""
"and ``my_f1`` and ``my_f2`` are some given functions. Note that in that "
"case, the problem is nonlinear due to the coupling, even if the two "
"functions  ``my_f1`` and ``my_f2`` are linear."
msgstr ""

# a53bb38d35364a7a95117a1a382c961e
#: ../source/userdoc/gasm_high.rst:145
msgid "Derivation order and symbolic differentiation"
msgstr ""

# 4d8e4d63c1424fe8b0bcf636f6e222de
#: ../source/userdoc/gasm_high.rst:147
msgid ""
"The derivation order of the assembly string is automatically detected. "
"This means that if no test functions are found, the order will be "
"considered to be 0 (potential energy), if first order test functions are "
"found, the order will be considered to be 1 (weak formulation) and if "
"both first and second order test functions are found, the order will be "
"considered to be 2 (tangent system)."
msgstr ""

# 5577d0070c8549f1a42d3a4c12b0caa5
#: ../source/userdoc/gasm_high.rst:149
msgid ""
"In order to perform an assembly (see next section), one should specify "
"the order (0, 1 or 2). If an order 1 string is furnished and an order 2 "
"assembly is required, a symbolic differentiation of the expression is "
"performed. The same if an order 0 string is furnished and if an order 1 "
"or 2 assembly is required. Of course, the converse is not true. If an "
"order 1 expression is given and an order 0 assembly is expected, no "
"integration is performed. This should not be generally not possible since"
" an arbitrary weak formulation do not necessary derive from a potential "
"energy."
msgstr ""

# 5905630e5bbe47a58768a0f59ce2f007
#: ../source/userdoc/gasm_high.rst:151
msgid ""
"The standard way to use the generic assembly is to furnish order 1 "
"expressions (i.e. a weak formulation). If a potential energy exists, one "
"may furnish it. However, it will be derived twice to obtain the tangent "
"system which could result in complicated expressions. For nonlinear "
"problems, it is not allowed to furnish order 2 expressions directly. The "
"reason is that the weak formulation is necessary to obtain the residual. "
"So nothing could be done with a tangent term without having the "
"corresponding order 1 term."
msgstr ""

# 986ad0feb8694206a796c59f50f39681
#: ../source/userdoc/gasm_high.rst:153
msgid ""
"IMPORTANT REMARK: Note that for coupled problems, a global potential "
"frequently do not exists. So that the part of problems directly defined "
"with a potential may be difficult to couple. To illustrate this, if you "
"defined a potential with some parameters (elasticity coefficients for "
"instance), and the couplingconsists in a variation of these coefficients "
"with respect to another variable, then the weak formulation do not "
"consist of course in the derivative of the potential with respect to the "
"coefficients which has generally no sense. This is the reason why the "
"definition through a potential should be the exception."
msgstr ""

# a14401b81e664d75b2f038a83faaf813
#: ../source/userdoc/gasm_high.rst:157
msgid "C++ Call of the assembly"
msgstr ""

# 71adb5a6c6224e138a98225eb3a2b340
#: ../source/userdoc/gasm_high.rst:159
msgid ""
"Note that the most natural way to use the generic assembly is by the use "
"of the generic assembly bricks of the model object, see Section :ref:`ud-"
"model-generic-assembly`. It is however also possible to use the high "
"level generic assembly on its own."
msgstr ""

# 8dc7a2d9e0cf4ff28e3ee9a389ef9ba8
#: ../source/userdoc/gasm_high.rst:161
msgid ""
"The generic assembly is driven by the object ``getfem::ga_workspace`` "
"defined in :file:`getfem/getfem\\_generic_assembly.h`."
msgstr ""

# 899ef04be3c74d9b8dec4bcfa0c0013c
#: ../source/userdoc/gasm_high.rst:163
msgid ""
"There is two ways to define a ``getfem::ga_workspace`` object. It can "
"depend on a model (see :ref:`ud-model`) and should be declared as::"
msgstr ""

# a85f53bad0ad49578da3a80ea65bdbf6
#: ../source/userdoc/gasm_high.rst:167
msgid ""
"with ``model`` a previously define ``getfem::model`` object. In that case"
" the variable and constant considered are the one of the model. The "
"second way it to define an independent ``getfem::ga_workspace`` object "
"by::"
msgstr ""

# 2357bf065ef64b9cb10f2e08aa27a8a8
#: ../source/userdoc/gasm_high.rst:171
msgid ""
"In that case, the variable and constant have to be added to the "
"workspace. This can be done thanks to the following methods::"
msgstr ""

# db484735303a42fe8db55d21412bad36
#: ../source/userdoc/gasm_high.rst:183
msgid ""
"where ``name`` is the variable/constant name (see in the next sections "
"the restriction on possible names), ``mf`` is the ``getfem::mesh_fem`` "
"object describing the finite element method, ``I`` is an object of class "
"``gmm::sub_interval`` indicating the interval of the variable on the "
"assembled vector/matrix and ``V`` is a ``getfem::base_vector`` being the "
"value of the variable/constant. The last method add a constant defined on"
" an ``im_data`` object ``imd`` which allows to store scalar/vector/tensor"
" field informations on the integration points of an ``mesh_im`` object."
msgstr ""

# d7be7291e328423fbd2a53da9a0f50f2
#: ../source/userdoc/gasm_high.rst:186
msgid ""
"Once it is declared and once the variables and constant are declared, it "
"is possible to add assembly string to the workspace with::"
msgstr ""

# e7060db986054ff89bd35b75bd494448
#: ../source/userdoc/gasm_high.rst:190
msgid ""
"where ``\"my expression\"`` is the assembly string, ``mim`` is a "
"``getfem::mesh_im`` object and ``rg`` if an optional valid region of the "
"mesh corresponding to ``mim``."
msgstr ""

# 0e8eac1e3a034e22ad981382d395f73a
#: ../source/userdoc/gasm_high.rst:192
msgid ""
"As it is explained in the previous section, the order of the string will "
"be automatically detected and a symbolic differentiation will be "
"performed to obtain the corresponding tangent term."
msgstr ""

# 46750d9c7d3e449fbaa72019c0e9e245
#: ../source/userdoc/gasm_high.rst:194
msgid "Once assembly strings are added to the workspace, is is possible to call::"
msgstr ""

# f922e9fdfc524adf85091e0b1d802d7c
#: ../source/userdoc/gasm_high.rst:198
msgid ""
"where ``order`` should be equal to 0 (potential energy), 1 (residual "
"vector) or 2 (tangent term, or stiffness matrix for linear problems). The"
" result of the assembly is available as follows::"
msgstr ""

# bf9ef9b7fe4e41b7be841e371634d696
#: ../source/userdoc/gasm_high.rst:206
msgid ""
"By default, the assembled potential, vector and matrix is initialized to "
"zero at the beginning of the assembly. It is however possible (and "
"recommended) to set the assembly vector and matrix to external ones to "
"perform an incremental assembly. The two methods::"
msgstr ""

# f5f69f2f3257489fbd419a9ed8433c4b
#: ../source/userdoc/gasm_high.rst:212
msgid ""
"allows to do so. Be aware to give a vector and a matrix of the right "
"dimension."
msgstr ""

# c64dd7c033da4c8fa29d06fe1c7a62e2
#: ../source/userdoc/gasm_high.rst:215
msgid "Note also that the method::"
msgstr ""

# 775629be046d4b7c9e63072656c70911
#: ../source/userdoc/gasm_high.rst:219
msgid ""
"allows to cancel all furnished expressions and allows to re-use the same "
"workspace for another assembly."
msgstr ""

# f7dd2274829d4ed99ccf03719c799a41
#: ../source/userdoc/gasm_high.rst:222
msgid ""
"It is also possible to call the generic assembly from the "
"Python/Scilab/Matlab interface. See ``gf_asm`` command of the interface "
"for more details."
msgstr ""

# c41d7351298849bf812384b11dbbf4cf
#: ../source/userdoc/gasm_high.rst:225
msgid "C++ assembly examples"
msgstr ""

# f2906a354f754345b6e069ca10f65431
#: ../source/userdoc/gasm_high.rst:227
msgid ""
"As a first example, if one needs to perform the assembly of a Poisson "
"problem"
msgstr ""

# 17423aea58884b12a2327d7050128647
#: ../source/userdoc/gasm_high.rst:233
msgid "the stiffness matrix is given"
msgstr ""

# ac6b7a01396c4c17b1482bd6e6787986
#: ../source/userdoc/gasm_high.rst:239
msgid "and will be assembled by the following code::"
msgstr ""

# 133a6a17506f4e289e8de766eb80ceaa
#: ../source/userdoc/gasm_high.rst:251
msgid ""
"where of course, ``mf`` is supposed to be an already declared "
"``getfem::mesh_fem`` object and ``mim`` a already declared "
"``getfem::mesh_im`` object on the same mesh. Note that the value of the "
"variable do not really intervene because of the linearity of the problem."
" This allows to pass ``getfem::base_vector(nbdof)`` as the value of the "
"variable which will not be used. Note also that two other possible "
"expressions for exactly the same result for the assembly string are "
"``\"Grad_Test2_u.Grad_Test_u\"`` (i.e. an order 2 expression) or "
"``\"Norm_sqr(Grad_u)/2\"`` (i.e. a potential). In fact other possible "
"assembly string will give the same result such as ``\"Grad_u.Grad_u/2\"``"
" or ``\"[Grad_u(1), Grad_u(2)].[Grad_Test_u(1), Grad_Test_u(2)]\"`` for "
"two-dimensional problems. However, the recommendation is preferably to "
"give an order 1 expression (weak formulation) if there is no particular "
"reason to prefer an order 0 or an order 2 expression."
msgstr ""

# b1c5a908b093495d8e897dab8b19a5c5
#: ../source/userdoc/gasm_high.rst:253
msgid ""
"As a second example, let us consider a coupled problem, for instance the "
"mixed problem of incompressible elasticity given by the equations"
msgstr ""

# 39f505e049f24eeeabc744aaa0e8c261
#: ../source/userdoc/gasm_high.rst:261
msgid ""
"where ``u`` is the vector valued displacement and ``p`` the pressure. The"
" assembly of the matrix for the whole coupled system can be performed as "
"follows::"
msgstr ""

# def638112efc4e08a22d187c379ae4d5
#: ../source/userdoc/gasm_high.rst:278
msgid ""
"where, here, ``mf_u`` and ``mf_p`` are supposed to be some already "
"declared ``getfem::mesh_fem`` objects defined on the same mesh, ``mim`` a"
" already declared ``getfem::mesh_im`` object and ``mu`` is the Lame "
"coefficient. It is also possible to perform the assembly of the sub-"
"matrix of this system separately."
msgstr ""

# cb64a810507c4b99bd5f9630a8db420e
#: ../source/userdoc/gasm_high.rst:281
msgid ""
"Let us see now how to perform the assembly of a source term. The weak "
"formulation of a volumic source term is"
msgstr ""

# 9733db189dac46dd880803d0f24de992
#: ../source/userdoc/gasm_high.rst:286
msgid ""
"where :math:`f` is the source term and :math:`v` the test function. The "
"corresponding assembly can be written::"
msgstr ""

# 38ccea71633d4b73bb5d91e420b2cbfe
#: ../source/userdoc/gasm_high.rst:298
msgid ""
"if the source term is describe on a finite element ``mf_data`` and the "
"corresponding vector of degrees of freedom ``F``. Explicit source terms "
"are also possible. For instance::"
msgstr ""

# d4f5722a3ed94340adb6cd9c56a5bdf4
#: ../source/userdoc/gasm_high.rst:309
msgid ""
"is also valid. If the source term is a boundary term (in case of a "
"Neumann condition) the only difference is that the mesh region "
"corresponding to the boundary have to be given as follows::"
msgstr ""

# 32b8c829a9f74b388cefec40730a4587
#: ../source/userdoc/gasm_high.rst:313
msgid "where ``region`` is the mesh region number."
msgstr ""

# f4f2ce60fb194459bc4db20eea6aa8a1
#: ../source/userdoc/gasm_high.rst:315
msgid ""
"As another example, let us describe a simple nonlinear elasticity "
"problem. Assume that we consider a Saint-Venant Kirchhoff constitutive "
"law which means that we consider the following elastic energy on a body "
"of reference configuration :math:`\\Omega`:"
msgstr ""

# 272da6eedaf145f0bfcbfc044e11f083
#: ../source/userdoc/gasm_high.rst:320
msgid ""
"where :math:`\\lambda, \\mu` are the |Lame| coefficients and  :math:`E` "
"is the strain tensor given by :math:`E = (\\nabla u + (\\nabla u)^T + "
"(\\nabla u)^T\\nabla u)/2`."
msgstr ""

# bcb047914161497e9f4283c3acae96d8
#: ../source/userdoc/gasm_high.rst:322
msgid ""
"This is possible to perform the assembly of the corresponding tangent "
"problem as follows::"
msgstr ""

# 320f4e534cc24d65a279e86e5ab02241
#: ../source/userdoc/gasm_high.rst:341
msgid ""
"and to adapt a Newton-Raphson algorithm to solve that nonlinear problem. "
"Of course the expression is rather repetitive and it would be preferable "
"to define some intermediate nonlinear operators. However, note that "
"repeated expressions are automatically detected and computed only once in"
" the assembly."
msgstr ""

# 950c174bbe7a47289243482eba3a41f8
#: ../source/userdoc/gasm_high.rst:343
msgid ""
"The last example is the assembly of the stiffness matrix of an order four"
" problem, the Kirchhoff-Love plate problem::"
msgstr ""

# b4755a268cb148ff9063bc58bbfe0c52
#: ../source/userdoc/gasm_high.rst:358
msgid "with ``D`` the flexion modulus and ``nu`` the Poisson ratio."
msgstr ""

# dc9433f4a6d4449f8e33635fb47b18cc
#: ../source/userdoc/gasm_high.rst:361
msgid "Script languages call of the assembly"
msgstr ""

# f26c6b2b05e943e9a10be5a636bc6b13
#: ../source/userdoc/gasm_high.rst:363
msgid ""
"For the use with Python, Scilab or Matlab interfaces, see the respective "
"documentation, in particular the ``gf_asm`` command and the ``model`` "
"object."
msgstr ""

# 43c06b9f88a4408e94d901ddb9c396f0
#: ../source/userdoc/gasm_high.rst:367
msgid "The tensors"
msgstr ""

# d2ad1a1d834342d0b98c5427ec07d540
#: ../source/userdoc/gasm_high.rst:369
msgid ""
"Basically, what is manipulated in the weak form language are tensors. "
"This can be order 0 tensors in scalar expressions (for instance in "
"``3+sin(pi/2)``), order 1 tensors in vector expressions (such as ``X.X`` "
"or ``Grad_u`` if u is a scalar variable), order 2 tensors for matrix "
"expressions and so on. For efficiency reasons, the language manipulates "
"tensors up to order six. The language could be easily extended to support"
" tensors of order greater than six but it may lead to inefficient "
"computations. When an expression contains test functions (as in "
"``Trace(Grad_Test_u)`` for a vector field ``u``), the computation is done"
" for each test functions, which means that the tensor implicitly have a "
"supplementary component. This means that, implicitly, the maximal order "
"of manipulated tensors are in fact six (in ``Grad_Test_u:Grad_Test2_u`` "
"there are two components implicitly added for first and second order test"
" functions)."
msgstr ""

# 0b67e842cbdf4ab3b846e45c026de6c8
#: ../source/userdoc/gasm_high.rst:371
msgid ""
"Order four tensors are necessary for instance to express elasticity "
"tensors or in general to obtain the tangent term for vector valued "
"unknowns."
msgstr ""

# 3999ecc82b254a84a209bc66d28e5285
#: ../source/userdoc/gasm_high.rst:375
msgid "The variables"
msgstr ""

# 053b168545714cb0bcbaf617be9ca7a3
#: ../source/userdoc/gasm_high.rst:377
msgid ""
"A list of variables should be given to the ``ga_worspace`` object "
"(directly or through a model object). The variables are described on a "
"finite element method or can be a simple vector of unknowns. This means "
"that it is possible also to couple algebraic equations to pde ones on a "
"model. A variable name should begin by a letter (case sensitive) or an "
"underscore followed by a letter, a number or an underscore. Some name are"
" reserved, this is the case of operators names (``Det``, ``Norm``, "
"``Trace``, ``Deviator``, ...) and thus cannot be used as variable names. "
"The name should not begin by ``Test_``, ``Test2_``, ``Grad_``, ``Div_`` "
"or ``Hess_``. The variable name should not correspond to a predefined "
"function (``sin``, ``cos``, ``acos`` ...) and to constants (``pi``, "
"``Normal``, ``X``, ``Id`` ...)."
msgstr ""

# eba6c7d02d2c41f98a5d352b1a09d8cb
#: ../source/userdoc/gasm_high.rst:380
msgid "The constants or data"
msgstr ""

# a0ffc2472f144380b8313086927a7976
#: ../source/userdoc/gasm_high.rst:382
msgid ""
"A list of constants could also be given to the ``ga_worspace`` object. "
"The rule are the same as for the variables but no test function can be "
"associated to constants and there is no symbolic differentiation with "
"respect to constants. Scalar constants are often defined to represent the"
" coefficients which intervene in constitutive laws. Additionally, "
"constants can be some scalar/vector/tensor fields defined on integration "
"points via a ``im_data`` object (for instance for some implementation of "
"the approximation of constitutive laws such as plasticity)."
msgstr ""

# abf5701317564fc4b06ba24dd36f0ea5
#: ../source/userdoc/gasm_high.rst:386
msgid "Test functions"
msgstr ""

# 93639926d24c49659b1f17a31427d05b
#: ../source/userdoc/gasm_high.rst:388
msgid ""
"Each variable is associated with first order and second order test "
"functions. The first order test function are used in the weak formulation"
" (which derive form the potential equation if it exists) and the second "
"order test functions are used in the tangent system. For a variable ``u``"
" the associated test functions are ``Test_u`` and ``Test2_u``. The "
"assembly string have to be linear with respect to test functions. As a "
"result of the presence of the term ``Test_u`` on a assembly string, the "
"expression will be evaluated for each shape function of the finite "
"element corresponding to the variable ``u``. On a given element, if the "
"finite element have ``N`` shape functions ans if ``u`` is a scalar field,"
" the value of ``Test_u`` will be the value of each shape function on the "
"current point. So ``Test_u`` return if face a vector of ``N`` values. But"
" of course, this is implicit in the language. So one do not have to care "
"about this."
msgstr ""

# 1d59c57fd23e45da9c241399f7083af7
#: ../source/userdoc/gasm_high.rst:393
msgid "Gradient"
msgstr ""

# f0d39aeba2f24338bcee0196add03758
#: ../source/userdoc/gasm_high.rst:395
msgid ""
"The gradient of a variable or of test functions are identified by "
"``Grad_`` followed by the variable name or by ``Test_`` followed itself "
"by the variable name. This is available for FEM variables (or constants) "
"only. For instance ``Grad_u``, ``Grad_v``, ``Grad_p``, ``Grad_pressure``,"
" ``Grad_electric_field`` and ``Grad_Test_u``, ``Grad_Test_v``, "
"``Grad_Test_p``, ``Grad_Test_pressure``, ``Grad_Test_electric_field``. "
"The gradient is either a vector for scalar variables or a matrix for "
"vector field variables. In the latter case, the first index corresponds "
"to the vector field dimension and the second one to the index of the "
"partial derivative.  ``Div_u`` and ``Div_Test_u`` are some optimized "
"shortcuts for ``Trace(Grad_u)`` and ``Trace(Grad_Test_u)``, respectively."
msgstr ""

# 6baf58e5038042e392d47c07976c7cca
#: ../source/userdoc/gasm_high.rst:398
msgid "Hessian"
msgstr ""

# 8dce55a90ce64adfb376e11ba04c0b49
#: ../source/userdoc/gasm_high.rst:400
msgid ""
"Similarly, the Hessian of a variable or of test functions are identified "
"by ``Hess_`` followed by the variable name or by ``Test_`` followed "
"itself by the variable name. This is available for FEM variables only. "
"For instance ``Hess_u``, ``Hess_v``, ``Hess_p``, ``Hess_pressure``, "
"``Hess_electric_field`` and ``Hess_Test_u``, ``Hess_Test_v``, "
"``Hess_Test_p``, ``Hess_Test_pressure``, ``Hess_Test_electric_field``. "
"The Hessian is either a matrix for scalar variables or a third order "
"tensor for vector field variables. In the latter case, the first index "
"corresponds to the vector field dimension and the two remaining to the "
"indices of partial derivatives."
msgstr ""

# c31a5a1ec1f24b82bf8bc04d9870d613
#: ../source/userdoc/gasm_high.rst:404
msgid "Predefined scalar functions"
msgstr ""

# d7d90da1ca0f44d1a984bfe456d66d7b
#: ../source/userdoc/gasm_high.rst:406
msgid ""
"A certain number of predefined scalar functions can be used. The "
"exhaustive list is the following and for most of them are equivalent to "
"the corresponding C function:"
msgstr ""

# 1cfa1fd5af7f4dfd8dfb11380976ba17
#: ../source/userdoc/gasm_high.rst:408
msgid ""
"``sqr(t)`` (the square of t, equivalent to t*t), ``pow(t, u)`` (t to the "
"power u), ``sqrt(t)`` (square root of t), ``exp(t)``, ``log(t)``, "
"``log10(t)``"
msgstr ""

# b79c0e59b42e44d0ba7b348c35e4a04d
#: ../source/userdoc/gasm_high.rst:411
msgid ""
"``sin(t)``, ``cos(t)``, ``tan(t)``, ``asin(t)``, ``acos(t)``, "
"``atan(t)``, ``atan2(t, u)``"
msgstr ""

# b6377e16fd31459ab12d9fc1af0e7667
#: ../source/userdoc/gasm_high.rst:413
msgid ""
"``sinh(t)``, ``cosh(t)``, ``tanh(t)``, ``asinh(t)``, ``acosh(t)``, "
"``atanh(t)``"
msgstr ""

# 8f931d27c5954cbfba684f5c01a9afcd
#: ../source/userdoc/gasm_high.rst:415
msgid "``erf(t)``, ``erfc(t)``"
msgstr ""

# 3c0733627783440fbd0fb163c739d1eb
#: ../source/userdoc/gasm_high.rst:416
msgid "``sinc(t)`` (the cardinal sine function sin(t)/t)"
msgstr ""

# 1e9a7f18f8494f04a45675133a42914b
#: ../source/userdoc/gasm_high.rst:418
msgid "``Heaviside(t)`` (:math:`0 \\mbox{ for } t < 0, 1 \\mbox{ for } t \\ge 0`)"
msgstr ""

# b93da51de32d4d25a52a20bba6b85fbb
#: ../source/userdoc/gasm_high.rst:419
msgid "``sign(t)``"
msgstr ""

# 21865bd5a6524046835abe10bb646623
#: ../source/userdoc/gasm_high.rst:420
msgid "``abs(t)``"
msgstr ""

# eb0b98d4ac98420f83ee4a9cf3e977bd
#: ../source/userdoc/gasm_high.rst:421
msgid "``pos_part(t)`` (:math:`tH(t)`)"
msgstr ""

# bfc02b3a5a2c4a36b4e1163a8a0e5b56
#: ../source/userdoc/gasm_high.rst:422
msgid ""
"``reg_pos_part(t, eps)`` (:math:`(t-eps/2-t^2/(2eps))H(t-eps) + "
"t^2H(t)/(2eps)`)"
msgstr ""

# 7478f41e0f594e6696c2a8243b8043e8
#: ../source/userdoc/gasm_high.rst:423
msgid "``neg_part(t)`` (:math:`-tH(-t)`), ``max(t, u)``, ``min(t, u)``"
msgstr ""

# ecc1caffacdd4b5c99352ee2b6fa83f3
#: ../source/userdoc/gasm_high.rst:425
msgid ""
"A scalar function can be applied to a scalar expression, but also to a "
"tensor one. If is is applied to a tensor expression, is is applied "
"componentwise and the result is a tensor with the same dimensions. For "
"functions having two arguments (pow(t,u), min(t,u) ...) if two non-scalar"
" arguments are passed, the dimension have to be the same. For instance "
"\"max([1;2],[0;3])\" will return \"[0;3]\"."
msgstr ""

# 2bb2c25de2214e0c9521e0ab49834c15
#: ../source/userdoc/gasm_high.rst:430
msgid "User defined scalar functions"
msgstr ""

# f73b78f674764d9289065f9bd98aae8d
#: ../source/userdoc/gasm_high.rst:432
msgid ""
"It is possible to add a scalar function to the already predefined ones. "
"Note that the generic assembly consider only scalar function with one or "
"two parameters. In order to add a scalar function to the generic "
"assembly, one has to call::"
msgstr ""

# 00c704d71d634206ab7262c57ba5fb4c
#: ../source/userdoc/gasm_high.rst:440
msgid ""
"where ``name`` is the name of the function to be defined, ``nb_args`` is "
"equal to 1 or 2. In the first call, ``expr`` is a string describing the "
"function in the generic weak form language and using ``t`` as the first "
"variable and ``u`` as the second one (if ``nb_args`` is equal to 2). For "
"instance, ``sin(2*t)+sqr(t)`` is a valid expression. Note that it is not "
"possible to refer to constant or data defined in a ``ga_workspace`` "
"object. ``der1`` and ``der2`` are the expression of the derivatives with "
"respect to ``t`` and ``u``. They are optional. If they are not furnished,"
" a symbolic differentiation is used if the derivative is needed. If "
"``der1`` and ``der2`` are defined to be only a function name, it will be "
"understand that the derivative is the corresponding function. In the "
"second call, ``f1`` should be a C pointer on a scalar C function having "
"one scalar parameter and in the third call, ``f2``  should be a C pointer"
" on a scalar C function having two scalar parameters."
msgstr ""

# 211be0e9d65a42b688c009567ba43f72
#: ../source/userdoc/gasm_high.rst:443
msgid "Additionally,::"
msgstr ""

# 8d0cd3f234c644d696a08da514352594
#: ../source/userdoc/gasm_high.rst:447
msgid "return true is a function ``name`` is already defined and::"
msgstr ""

# eef7223e48c14099acd32fa6d57be78a
#: ../source/userdoc/gasm_high.rst:451
msgid ""
"cancel the definition of an already define function (it has no action if "
"the function does not exist) which allow to redefine a function."
msgstr ""

# 306db13517be4ca998e98cfa6ed94be8
#: ../source/userdoc/gasm_high.rst:455
msgid "Derivatives of defined scalar functions"
msgstr ""

# d52adcd108a94cda85ddfeacd4fd2881
#: ../source/userdoc/gasm_high.rst:457
msgid ""
"It is possible to refer directly to the derivative of defined functions "
"by adding the prefix ``Derivative_`` to the function name. For instance, "
"``Derivative_sin(t)`` will be equivalent to ``cos(t)``. For two arguments"
" functions like ``pow(t,u)`` one can refer to the derivative with respect"
" to the second argument with the prefix  ``Derivative_2_`` before the "
"function name."
msgstr ""

# 9fffa8e1a264447c834fce7d6c3ff93a
#: ../source/userdoc/gasm_high.rst:461
msgid "Binary operations"
msgstr ""

# c015fd4fffdb48799a29f93095476baf
#: ../source/userdoc/gasm_high.rst:463
msgid "A certain number of binary operations between tensors are available:"
msgstr ""

# 12ccd6b5a5f24e6c9a837976231c86ae
#: ../source/userdoc/gasm_high.rst:466
msgid ""
"``+`` and ``-`` are the standard addition and subtraction of scalar, "
"vector, matrix or tensors."
msgstr ""

# 377fbd47f56143e8b82ba7b45439d6a1
#: ../source/userdoc/gasm_high.rst:468
msgid ""
"``*`` stands for the scalar, matrix-vector, matrix-matrix or (fourth "
"order tensor)-matrix multiplication."
msgstr ""

# df8340e239fd4da9a5b00c80a7eaf0ca
#: ../source/userdoc/gasm_high.rst:470
msgid "``/`` stands for the division by a scalar."
msgstr ""

# b0289d601d1c4fc1a226d64590a39b99
#: ../source/userdoc/gasm_high.rst:472
msgid ""
"``.`` stands for the scalar product of vectors, or more generally to the "
"contraction of a tensor with respect to its last index with a vector or "
"with the first index of another tensor. Note that ``*`` and ``.`` are "
"equivalent for matrix-vector or matrix-matrix multiplication."
msgstr ""

# 1f8c07e1c4dc42c68af4e1760fe80cfb
#: ../source/userdoc/gasm_high.rst:474
msgid ""
"``:`` stands for the |Frobenius| product of matrices or more generally to"
" the contraction of a tensor with respect to the two last indices with a "
"matrix. Note that ``*`` and ``:`` are equivalent for (fourth order "
"tensor)-matrix multiplication."
msgstr ""

# d2cde6cc2e7d456ea670df9c76595a46
#: ../source/userdoc/gasm_high.rst:476
msgid ""
"``.*`` stands for the multiplication of two vectors/matrix/tensor "
"componentwise."
msgstr ""

# 88e83ccdfd934904b9d875b17911d2f3
#: ../source/userdoc/gasm_high.rst:478
msgid "``./`` stands for the division of two vectors/matrix/tensor componentwise."
msgstr ""

# ee3aca1fe77b4f18adf60de37f7285a3
#: ../source/userdoc/gasm_high.rst:480
msgid "``@`` stands for the tensor product."
msgstr ""

# 8581c6a052c348e9b1ae1f1578f1d837
#: ../source/userdoc/gasm_high.rst:482
msgid ""
"``Contract(A, i, B, j)`` stands for the contraction of tensors A and B "
"with respect to the ith index of A and jth index of B. The first index is"
" numbered 1. For instance ``Contract(V,1,W,1)`` is equivalent to ``V.W`` "
"for two vectors ``V`` and ``W``."
msgstr ""

# 9abe535965a6429aabc6a0b1ef36bab9
#: ../source/userdoc/gasm_high.rst:484
msgid ""
"``Contract(A, i, j, B, k, l)`` stands for the double contraction of "
"tensors A and B with respect to indices i,j of A and indices k,l of B. "
"The first index is numbered 1. For instance ``Contract(A,1,2,B,1,2)`` is "
"equivalent to ``A:B`` for two matrices ``A`` and ``B``."
msgstr ""

# dc6035ae115d438f92cd035a01220a9c
#: ../source/userdoc/gasm_high.rst:488
msgid "Unary operators"
msgstr ""

# 74da0c9670424e6384e7ddbb81641fef
#: ../source/userdoc/gasm_high.rst:490
msgid "``-`` the unary minus operator: change the sign of an expression."
msgstr ""

# 5275cb482a644b9dbfc4941c76a987b5
#: ../source/userdoc/gasm_high.rst:492
msgid ""
"``'`` stands for the transpose of a matrix or line view of a vector. It a"
" tensor ``A`` is of order greater than two,``A'`` denotes the inversion "
"of the two first indices."
msgstr ""

# 02ddf2fde84b4032adc37d9d1a7649bf
#: ../source/userdoc/gasm_high.rst:494
msgid ""
"``Contract(A, i, j)`` stands for the contraction of tensor A with respect"
" to its ith and jth indices. The first index is numbered 1. For instance,"
" ``Contract(A, 1, 2)`` is equivalent to ``Trace(A)`` for a matrix ``A``."
msgstr ""

# d38e6b7cd7e44a2ba98cbb1c35d10e7a
#: ../source/userdoc/gasm_high.rst:496
msgid ""
"``Swap_indices(A, i, j)`` exchange indices number i and j. The first "
"index is numbered 1. For instance ``Swap_indices(A, 1, 2)`` is equivalent"
" to ``A'`` for a matrix ``A``."
msgstr ""

# f9d250613fe54dc5b04800849da8c20f
#: ../source/userdoc/gasm_high.rst:498
msgid ""
"``Index_move_last(A, i)`` move the index number i in order to be the ast "
"one. For instance, if ``A`` is a fourth order tensor "
":math:`A_{i_1i_2i_3i_4}`, then the result of ``Index_move_last(A, 2)`` "
"will be the tensor :math:`B_{i_1i_3i_4i_2} = A_{i_1i_2i_3i_4}`. For a "
"matrix, ``Index_move_last(A, 1)`` is equivalent to ``A'``."
msgstr ""

# a6b88c73b37241ba80c655df8a82a719
#: ../source/userdoc/gasm_high.rst:500
msgid ""
"exchange indices number i and j. The first index is numbered 1. For "
"instance ``Swap_indices(A, 1, 2)`` is equivalent to ``A'`` for a matrix "
"``A``."
msgstr ""

# ece51b14fa664b58b298a438fb999f1a
#: ../source/userdoc/gasm_high.rst:504
msgid "Parentheses"
msgstr ""

# 4b91b76a2f154a0aa3c7f81694c3ba7c
#: ../source/userdoc/gasm_high.rst:506
msgid ""
"Parentheses can be used in a standard way to change the operation order. "
"If no parentheses are indicated, the usually priority order are used. The"
" operations ``+``  and ``-`` have the lower priority (with no "
"distinction), then ``*``, ``/``, ``:``, ``.``, ``.*``, ``./``, ``@`` with"
" no distinction and the higher priority is reserved for the unary "
"operators ``-`` and ``'``."
msgstr ""

# 45b3a32cf4d04204b83b3134dba74c0f
#: ../source/userdoc/gasm_high.rst:510
msgid "Explicit vectors"
msgstr ""

# 9caa6bc1b2dc446ead0022f3fc0de85b
#: ../source/userdoc/gasm_high.rst:512
msgid ""
"The weak form language allows to define explicit vectors (i.e. order 1 "
"tensors) with the notation ``[a,b,c,d,e]``, i.e. an arbitrary number of "
"components separated by a comma (note the separation with a semicolon "
"``[a;b;c;d;e]`` is also permitted), the whole vector beginning with a "
"right bracket and ended by a left bracket. The components can be some "
"numeric constants, some valid expressions and may also contain test "
"functions. In the latter case, the vector has to be homogeneous with "
"respect to the test functions. This means that a construction of the type"
" ``[Test_u; Test_v]`` is not allowed. A valid example, with ``u`` as a "
"scalar field variable is ``[5*Grad_Test_u(2), 2*Grad_Test_u(1)]``. Note "
"also that using the quite opertor (transpose), an expression "
"``[a,b,c,d,e]'`` stands for 'row vector`, i.e. a 1x5 matrix."
msgstr ""

# b827ea59b7e141bba19bace5191db97c
#: ../source/userdoc/gasm_high.rst:516
msgid "Explicit matrices"
msgstr ""

# 691d949ca43a4eb990fecf209ff2e3db
#: ../source/userdoc/gasm_high.rst:518
msgid ""
"Similarly to explicit vectors, it is possible to define explicit matrices"
" (i.e. order 2 tensors) with the notation ``[[a,b],[c,d]]``, i.e. an "
"arbitrary number of columns vectors separated by a comma (the syntax "
"``[a,c;b,d]`` of lines separated by a semicolon is also permitted). For "
"instance ``[[11,21],[12,22],[13,23]]`` and ``[11,12,13;21,22,23]`` both "
"represent the same 2x3 matrix. The components can be some numeric "
"constants, some valid expressions and may also contain test functions."
msgstr ""

# 51159bd214e44e88ae2f359c704bbaae
#: ../source/userdoc/gasm_high.rst:522
msgid "Explicit tensors"
msgstr ""

# f5a716351da846728f7039583372d96b
#: ../source/userdoc/gasm_high.rst:524
msgid ""
"Explicit tensors of any order are permitted with the nested format. A "
"tensor of order ``n`` is written as a succession of tensor of order "
"``n-1`` of equal dimensions and separated by a comma. For instance "
"``[[[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]],[[[1,2,3],[1,2,3]],[[1,2,3],[1,2,3]]]]``"
" is a fourth order tensor. Another possibility is to use the syntax "
"``Reshape([1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3,1,2,3], 3, 2, 2, "
"2)`` where the components have to be given in Fortran order."
msgstr ""

# 7487f587d0594a5ea0a427dd4b02feb5
#: ../source/userdoc/gasm_high.rst:528
msgid "Access to tensor components"
msgstr ""

# f48b51ac59eb496d9eaf2c9eca83bf21
#: ../source/userdoc/gasm_high.rst:529
msgid ""
"The access to a component of a vector/matrix/tensor can be done by "
"following a term by a left parenthesis, the list of components and a "
"right parenthesis. For instance ``[1,1,2](3)`` is correct and is "
"returning ``2`` as expected. Note that indices are assumed to begin by 1 "
"(even in C++ and with the python interface). The expressions "
"``[1,1;2,3](2,2)`` and ``Grad_u(2,2)`` are also correct provided that "
"``u`` is a vector valued declared variable. Note that the components can "
"be the result of a constant computation. For instance "
"``[1,1;2,3](1+1,a)`` is correct provided that ``a`` is a declared "
"constant but not if it is declared as a variable. A colon can replace the"
" value of an index in a Matlab like syntax for instance to access to a "
"line or a column of a matrix. ``[1,1;2,3](1,:)`` denotes the first line "
"of the matrix ``[1,1;2,3]``. It can also be used for a fourth order "
"tensor."
msgstr ""

# 9e10a58df0ca448b83364a074c734de2
#: ../source/userdoc/gasm_high.rst:532
msgid "Constant expressions"
msgstr ""

# 4a51bb56946d4d93932e06c930ba4b25
#: ../source/userdoc/gasm_high.rst:534
msgid ""
"Floating points with standards notations (for instance ``3``, ``1.456``, "
"``1E-6``)"
msgstr ""

# f87ebf0bbb5e458baf504ad30e1f4cf3
#: ../source/userdoc/gasm_high.rst:535
msgid "``pi``: the constant Pi."
msgstr ""

# 6b2fca7e4e19453cab8b6784d5d5220d
#: ../source/userdoc/gasm_high.rst:536
msgid ""
"``meshdim``: the dimension of the current mesh (i.e. size of geometrical "
"nodes)"
msgstr ""

# 22d9a83c765346648c1a5f0995463b54
#: ../source/userdoc/gasm_high.rst:537
msgid ""
"``timestep``: the main time step of the model on which this assembly "
"string is evaluated (defined by ``model.set_time_step(dt)``). Do not work"
" on pure workspaces."
msgstr ""

# f4f7b220cb484b898aed8d0d223f1cf4
#: ../source/userdoc/gasm_high.rst:538
msgid ""
"``Id(n)``: the identity matrix of size :math:`n\\times n`. `n` should be "
"an integer expression. For instance ``Id(meshdim)`` is allowed."
msgstr ""

# 1bfc5da4cb524f4899cee30a194ba50b
#: ../source/userdoc/gasm_high.rst:539
msgid ""
"``qdim(u)``: the total dimension of the variable ``u`` (i.e. the  size "
"for fixed size variables and the total dimension of the vector/tensor "
"field for FEM variables)"
msgstr ""

# 74753c213ce4403a97ecaed22d367498
#: ../source/userdoc/gasm_high.rst:540
msgid ""
"``qdims(u)``: the dimensions of the variable ``u`` (i.e. the size for "
"fixed size variables and the vector of dimensions of the vector/tensor "
"field for FEM variables)"
msgstr ""

# 65d924c3c37b495abd4013a9097911f4
#: ../source/userdoc/gasm_high.rst:543
msgid "Special expressions linked to the current position"
msgstr ""

# 8a92adcf716146b49b9320daffb88a90
#: ../source/userdoc/gasm_high.rst:545
msgid ""
"``X`` is the current coordinate on the real element (i.e. the position on"
" the mesh of the current Gauss point on which the expression is "
"evaluated), ``X(i)`` is its i-th component. For instance "
"``sin(X(1)+X(2))`` is a valid expression on a mesh of dimension greater "
"or equal to two."
msgstr ""

# e2159adddc05414ab4b60b85df3ece6f
#: ../source/userdoc/gasm_high.rst:547
msgid ""
"``Normal`` the outward unit normal vector to a boundary when integration "
"on a boundary is performed."
msgstr ""

# a733d8b5cf66443db4df3e3b7e6e457a
#: ../source/userdoc/gasm_high.rst:549
msgid ""
"``element_size`` gives an estimate of the current element diameter (using"
" getfem::convex_radius_estimate)."
msgstr ""

# 8aecf34086714922a2e8f356d0533139
#: ../source/userdoc/gasm_high.rst:551
msgid ""
"``element_K`` gives the gradient of the geometric transformation (see "
":ref:`dp-transgeo`) from the reference (parent) element. Could be used "
"only if the mesh do not contain elements of mixed dimensions."
msgstr ""

# 72eb01cc6f954e369fbbbd726192c72d
#: ../source/userdoc/gasm_high.rst:553
msgid ""
"``element_B`` gives the transpose of the pseudo-inverse of the gradient "
"of the geometric transformation (see :ref:`dp-transgeo`) from the "
"reference (parent) element. Could be used only if the mesh do not contain"
" elements of mixed dimensions."
msgstr ""

# 9fb5f1ed23af4a9e9a2f70b6f730c0b0
#: ../source/userdoc/gasm_high.rst:558
msgid "Print command"
msgstr ""

# ac954f2b3a1f4bd985e083e139851799
#: ../source/userdoc/gasm_high.rst:560
msgid ""
"For debugging purpose, the command ``Print(a)`` is printing the tensor "
"``a`` and pass it unchanged. For instance  ``Grad_u.Print(Grad_Test_u)`` "
"will have the same effect as ``Grad_u.Grad_Test_u`` but printing the "
"tensor ``Grad_Test_u`` for each Gauss point of each element. Note that "
"constant terms are printed only once at the beginning of the assembly. "
"Note also that the expression could be derived so that the derivative of "
"the term may be printed instead of the term itself."
msgstr ""

# 9d213ae29c3a4e509c4af6a1aa8da76c
#: ../source/userdoc/gasm_high.rst:563
msgid "Reshape a tensor"
msgstr ""

# 6f638c385cca49aebedb418f5a300b07
#: ../source/userdoc/gasm_high.rst:565
msgid ""
"The command ``Reshape(t, i, j, ...)`` reshapes the tensor ``t`` (which "
"could be an expression). The only constraint is that the number of "
"components should be compatible. For instance  ``Reshape(Grad_u, 1, "
"meshdim)`` is equivalent to ``Grad_u'`` for u a scalar variable. Note "
"that the order of the components remain unchanged and are classically "
"stored in Fortran order for compatibility with Blas/Lapack."
msgstr ""

# e8d4c7ce83954e799de038a2d4af15d2
#: ../source/userdoc/gasm_high.rst:568
msgid "Trace, Deviator, Sym and Skew operators"
msgstr ""

# a1897238af8540418e0e963f1e5b629e
#: ../source/userdoc/gasm_high.rst:570
msgid ""
"Trace, Deviator, Sym and Skew operators are linear operators acting on "
"square matrices:"
msgstr ""

# c119afb32f40468ab656bbf2480d1bcd
#: ../source/userdoc/gasm_high.rst:572
msgid ""
"``Trace(m)`` gives the trace (sum of diagonal components) of a square "
"matrix ``m``."
msgstr ""

# 105f70bac6a04131a3c9130adc685de4
#: ../source/userdoc/gasm_high.rst:574
msgid ""
"``Deviator(m)`` gives the deviator of a square matrix ``m``. It is "
"equivalent to ``m - Trace(m)*Id(m_dim)/m_dim``, where ``m_dim`` is the "
"dimension of ``m``."
msgstr ""

# 5417d12dbda242df9692f008a40d3644
#: ../source/userdoc/gasm_high.rst:576
msgid ""
"``Sym(m)`` gives the symmetric part of a square matrix ``m``, i.e. ``(m +"
" m')/2``."
msgstr ""

# e3b38ff4022a4668ab986fc7b7cc6eca
#: ../source/userdoc/gasm_high.rst:578
msgid ""
"``Skew(m)`` gives the skew-symmetric part of a square matrix ``m``, i.e. "
"``(m - m')/2``."
msgstr ""

# c834d5b74a744153bc06872fcf14e0c0
#: ../source/userdoc/gasm_high.rst:580
msgid ""
"The four operators can be applied on test functions. Which means that for"
" instance both ``Trace(Grad_u)`` and  ``Trace(Grad_Test_u)`` are valid "
"when ``Grad_u`` is a square matrix (i.e. ``u`` a vector field of the same"
" dimension as the mesh)."
msgstr ""

# 36be21dabb0d432f93958ae28709db65
#: ../source/userdoc/gasm_high.rst:585
msgid "Nonlinear operators"
msgstr ""

# 7899ef29de1847bb81a4e56bcc7ddae8
#: ../source/userdoc/gasm_high.rst:587
msgid ""
"The weak form language provide some predefined nonlinear operator. Each "
"nonlinear operator is available together with its first and second "
"derivatives. Nonlinear operator can be applied to an expression as long "
"as this expression do not contain some test functions."
msgstr ""

# 0549500143c5465fa5caa3e1068e79e1
#: ../source/userdoc/gasm_high.rst:589
msgid ""
"``Norm(v)`` for ``v`` a vector or a matrix gives the euclidean norm of a "
"vector or a |Frobenius| norm of a matrix."
msgstr ""

# 3eed7962d5aa4b8595789d456410d905
#: ../source/userdoc/gasm_high.rst:591
msgid ""
"``Norm_sqr(v)`` for ``v`` a vector or a matrix gives the square of the "
"euclidean norm of a vector or of the |Frobenius| norm of a matrix. For a "
"vector this is equivalent to ``v.v`` and for a matrix to ``m:m``."
msgstr ""

# 6bc6c4876a014644b053fd7aaca86cca
#: ../source/userdoc/gasm_high.rst:593
msgid ""
"``Normalized(v)`` for ``v`` a vector or a matrix gives ``v`` divided by "
"its euclidean (for vectors) or |Frobenius| (for matrices) norm. In order "
"to avoid problems when ``v`` is close to 0, it is implemented as "
"``Normalized_reg(v, 1E-25)``. Use with care. Think that the derivative at"
" the origin of ``Normalized(v)*Norm(v)`` is wrong (it vanishes) and very "
"different from the derivative of ``v``."
msgstr ""

# 23bc42ab7cb846e6b19c7574c1a03f42
#: ../source/userdoc/gasm_high.rst:595
msgid ""
"``Normalized_reg(v, eps)`` for ``v`` a vector or a matrix gives a "
"regularized version of ``Normalized(v)`` : ``v/sqrt(|v|*|v|+eps*eps)``."
msgstr ""

# 219df766c4724dc388db7c401c75b553
#: ../source/userdoc/gasm_high.rst:597
msgid ""
"``Ball_projection(v, r)`` for ``v`` a vector or a matrix and ``r`` a "
"scalar, gives the projection of ``v`` on the ball of radius ``r`` and "
"center the origin."
msgstr ""

# 4177226197b347c3a990be42852e4289
#: ../source/userdoc/gasm_high.rst:599
msgid "``Det(m)`` gives the determinant of a square matrix ``m``."
msgstr ""

# a95b7b42ed284832b2659ba76a07b3a7
#: ../source/userdoc/gasm_high.rst:601
msgid ""
"``Inv(m)`` gives the inverse of a square matrix ``m``. The second "
"derivative is not available since it is an order 6 tensor. This means "
"that ``Inv(m)`` cannot be used in the description of a potential energy."
msgstr ""

# abb29a8539db4ae59d4d36440ed6d80b
#: ../source/userdoc/gasm_high.rst:603
msgid "``Expm(m)`` gives the exponential of a square matrix ``m``."
msgstr ""

# 1ac4da12a76c4a0ba8862d15ed5fc8a2
#: ../source/userdoc/gasm_high.rst:605
msgid "``Logm(m)`` gives the logarithm of a square matrix ``m``."
msgstr ""

# e632e6e2ccaa49a7b0d06d2b4ad2e673
#: ../source/userdoc/gasm_high.rst:607
msgid ""
"``Matrix_I2(m)`` gives the second invariants of a square matrix ``m`` "
"which is defined by ``(sqr(Trace(m)) - Trace(m*m))/2``."
msgstr ""

# c3480b6af7ef45a8a9c22b02e17bf003
#: ../source/userdoc/gasm_high.rst:609
msgid ""
"``Matrix_J1(m)`` gives the modified first invariant of a square matrix "
"defined by ``Trace(m)pow(Det(m),-1/3)``."
msgstr ""

# 8296a95ef05a454e832ae016ac8f72f4
#: ../source/userdoc/gasm_high.rst:611
msgid ""
"``Matrix_J2(m)`` gives the modified first invariant of a square matrix "
"defined by ``Matrix_I2(m)*pow(Det(m),-2/3)``."
msgstr ""

# f64932e910c94477aaf31cae2d122591
#: ../source/userdoc/gasm_high.rst:616
msgid "Macro definition"
msgstr ""

# d192a6f9759f4d47983e3def2db09a91
#: ../source/userdoc/gasm_high.rst:618
msgid ""
"The weak form language allows the use of macros that are either "
"predefined in the model or ga_workspace object or directly defined at the"
" begining of an assembly string. The definition into a ga_workspace or "
"model object is done as follows::"
msgstr ""

# 1bfad1425e5545d789cb21a2cd74960c
#: ../source/userdoc/gasm_high.rst:626
msgid ""
"The definition of a macro into an assembly string is inserted before any "
"regular expression, separated by a semicolon with the following syntax::"
msgstr ""

# 59557ffb89214113971db7ce3c7a5881
#: ../source/userdoc/gasm_high.rst:630
msgid ""
"where ``name`` is he macro name which then can be used in the weak form "
"language and contains also the macro parameters, ``expr`` is a valid "
"expression of the weak form language (which may itself contain some macro"
" definitions). For instance, a valid macro with no parameter is::"
msgstr ""

# dd449870f1ae4adcbd118681ccf3e155
#: ../source/userdoc/gasm_high.rst:634
msgid ""
"where ``alpha`` should be a valid declared variable or data. A valid "
"macro with two parameters is for instance::"
msgstr ""

# 65bf036bdb8648f1b89200fe23d5d92b
#: ../source/userdoc/gasm_high.rst:638
msgid ""
"The following assembly string is then valid (if ``u`` is a valid "
"variable)::"
msgstr ""

# c95b690c8d4a497383337add29a47239
#: ../source/userdoc/gasm_high.rst:642
msgid ""
"Parameter are allowed to be post-fixed to ``Grad_``, ``Hess_``, ``Test_``"
" and ``Test2_`` prefixes, so that the following assembly string is "
"valid::"
msgstr ""

# 98f3842b8da6461ca63ed450c9b1ca3d
#: ../source/userdoc/gasm_high.rst:646
msgid "or with an imbrication of two macros::"
msgstr ""

# 6c6dab9e164b4b50870cda07e7ff61f2
#: ../source/userdoc/gasm_high.rst:650
msgid "A macro can be deleted from a ga_workspace or model object as follows::"
msgstr ""

# 3f86b5df59a14de08757aa749f698afd
#: ../source/userdoc/gasm_high.rst:655
msgid ""
"Note that a macro defined at the begining of an assembly string is only "
"defined in the assembly string and cannot be used later without being "
"added in a model or ga_workspace object."
msgstr ""

# 967eb458f72b46d497f84a7f605921b9
#: ../source/userdoc/gasm_high.rst:657
msgid ""
"The macros are expanded inline at the lexical analysis phase. Note that a"
" the compilation phase, the repeated expressions are automatically "
"factorized and computed only once."
msgstr ""

# fac8502156aa4390b49979271166b375
#: ../source/userdoc/gasm_high.rst:660
msgid "Explicit Differentiation"
msgstr ""

# 18b5e7bbe4504137a98f55cbc15f8667
#: ../source/userdoc/gasm_high.rst:661
msgid ""
"The workspace object automatically differentiate terms that are of lower "
"deriation order. However, it is also allowed to explicitely differentiate"
" an expression with respect to a variable. One interest is that the "
"automatic differentiation performs a derivative with respect to all the "
"declared variables of model/workspace but this is not necessarily the "
"expected behavior when using a potential energy, for instance. The syntax"
" is::"
msgstr ""

# cef94c7abc7e4c569e4b64041ee736be
#: ../source/userdoc/gasm_high.rst:665
msgid "For instance, the following expression::"
msgstr ""

# b7cd517f471344abb7b38fef5ed7ea6f
# b2bf9d850cc7451e84d2c81e2a303390
#: ../source/userdoc/gasm_high.rst:669 ../source/userdoc/gasm_high.rst:686
msgid "will result in::"
msgstr ""

# 45e9a9702cbc422cb2af100925667652
#: ../source/userdoc/gasm_high.rst:673
msgid "So that::"
msgstr ""

# 40cd5e95260f4f059893dc94ca6c085c
#: ../source/userdoc/gasm_high.rst:677
msgid ""
"is a valid expression. A third argument can be added to the ``Diff`` "
"command to specify the direction::"
msgstr ""

# 77411168e3e74bb79df34af16ee44128
#: ../source/userdoc/gasm_high.rst:681
msgid ""
"in that case, it replaces the ``Test_variable`` by the expression "
"``direction`` which has to be of the same dimension as ``variable``. It "
"computes the derivative of ``expression`` with respect to ``variable`` in"
" the direction ``direction``. For instance::"
msgstr ""

# 976ebb0d9c2a408b84afe4a7598bdbc4
#: ../source/userdoc/gasm_high.rst:690
msgid "if ``v`` is any valid expression of the same dimension than ``u``."
msgstr ""

# 2dc2090e38f24f91afc9d8ea9e4567da
#: ../source/userdoc/gasm_high.rst:693
msgid "Explicit Gradient"
msgstr ""

# cbd7b226fa5045b4a9362a9ce99a88a7
#: ../source/userdoc/gasm_high.rst:694
msgid ""
"It is possible to ask for symbolic computation of the gradient of an "
"expression with::"
msgstr ""

# b011790beb4f4e1a98451a57e85d3f03
#: ../source/userdoc/gasm_high.rst:698
msgid ""
"It will be computed as far as it is possible. The limitations come from "
"the fact that |gf| is limited to second order derivative of shape "
"function and nonlinear operators are supposed to provide only first and "
"second order derivatives."
msgstr ""

# 6cf623aa60da4573adb6dea0653db6e2
#: ../source/userdoc/gasm_high.rst:700
msgid "Of course::"
msgstr ""

# 579d7e813662470aae2be54236c319c3
#: ../source/userdoc/gasm_high.rst:704
msgid "is equivalent to::"
msgstr ""

# 3ddb48023cd34e2686069149d710c68d
#: ../source/userdoc/gasm_high.rst:708
msgid "for a varible ``u``."
msgstr ""

# e0e05a04d3574b65832306ef7a859089
#: ../source/userdoc/gasm_high.rst:713
msgid "Interpolate transformations"
msgstr ""

# c52de046af694822a05ebff8f95bfdd5
#: ../source/userdoc/gasm_high.rst:715
msgid ""
"The ``Interpolate`` operation allows to compute integrals between "
"quantities which are either defined on different part of a mesh or even "
"on different meshes. It is a powerful operation which allows to compute "
"mortar matrices or take into account periodic conditions. However, one "
"have to remember that it is based on interpolation which may have a non-"
"negligible computational cost."
msgstr ""

# c5412ad0a91f444da2f08b39f0fd4e8e
#: ../source/userdoc/gasm_high.rst:717
msgid ""
"In order to use this functionality, the user have first to declare to the"
" workspace or to the model object an interpolate transformation which "
"described the map between the current integration point and the point "
"lying on the same mesh or on another mesh."
msgstr ""

# 9c35d9c593f34953998a0531eea9499a
#: ../source/userdoc/gasm_high.rst:719
msgid ""
"Different kind of transformations can be described. Several kinds of "
"transformations has been implemented. The first one, described hereafter "
"is a transformation described by an expression. A second one corresponds "
"to the raytracing contact detection (see :ref:`ud-model-contact-"
"friction_raytrace_inter_trans`). Some other transformations (neighbour "
"element and element extrapolation) are describe in the next sections."
msgstr ""

# 33dda062821c4662a32ff662295671cb
#: ../source/userdoc/gasm_high.rst:721
msgid ""
"The transformation defined by an expression can be added to the workspace"
" or the model thanks to the command::"
msgstr ""

# a2a2f224352c4525871b14630ee079f0
#: ../source/userdoc/gasm_high.rst:731
msgid ""
"where ``workspace`` is a workspace object, ``model`` a model object, "
"``transname`` is the name given to the transformation, ``source_mesh`` "
"the mesh on which the integration occurs, ``target_mesh`` the mesh on "
"which the interpolation is performed and ``expr`` is a regular expression"
" of the high-level generic weak form language which may contains "
"reference to the variables of the workspace/model."
msgstr ""

# d4f0b7ec0c7d4258bc4579df899778b2
#: ../source/userdoc/gasm_high.rst:733
msgid "For instance, an expression::"
msgstr ""

# 1341b4282ff04caab5c395a2c356a27c
#: ../source/userdoc/gasm_high.rst:738
msgid ""
"will allow to integrate some expressions at the current position with a "
"shift of -1 with respect to the first coordinate. This simple kind of "
"transformation can be used to prescribe a periodic condition."
msgstr ""

# 067a9832a20e432abe3e51d56579078d
#: ../source/userdoc/gasm_high.rst:740
msgid "Of course, one may used more complex expressions such as::"
msgstr ""

# aaf48940d4114f9cbf24e21bdc0e764b
#: ../source/userdoc/gasm_high.rst:748
msgid "where ``u`` is a vector variable of the workspace/model."
msgstr ""

# a0c3c988729444278d3bdaa056753afc
#: ../source/userdoc/gasm_high.rst:750
msgid ""
"Once a transformation is defined in the workspace/model, one can "
"interpolate a variable or test functions, the position or the unit normal"
" vector to a boundary thanks to one of these expressions::"
msgstr ""

# 9f6006b6ec2e4e4f90f4ed2cb0d6a9d8
#: ../source/userdoc/gasm_high.rst:763
msgid "where ``u`` is the name of the variable to be interpolated."
msgstr ""

# b0fe54ca9f614e1f989def9a7431fda0
#: ../source/userdoc/gasm_high.rst:765
msgid ""
"For instance, the assembly expression to prescribe the equality of a "
"variable ``u`` with its interpolation (for instance for prescribing a "
"periodic boundary condition) thanks to a multiplier ``lambda`` could be "
"written::"
msgstr ""

# a50e00ccb7af4733b823a3608674fbfc
#: ../source/userdoc/gasm_high.rst:769
msgid ""
"(see :file:`demo\\_periodic\\_laplacian.m` in "
":file:`interface/tests/matlab` directory)."
msgstr ""

# 058137966b494391afa6460cd17f3ec7
#: ../source/userdoc/gasm_high.rst:771
msgid ""
"In some situations, the interpolation of a point may fail if the "
"transformed point is outside the target mesh. Both in order to treat this"
" case and to allow the transformation to differentiate some other cases "
"(see :ref:`ud-model-contact-friction_raytrace_inter_trans` for the "
"differentiation between rigid bodies and deformable ones in the "
"Raytracing_interpolate_transformation) the tranformation returns an "
"integer identifiant to the weak form language. A value 0 of this "
"identifiant means that no corresponding location on the target mesh has "
"been found. A value of 1 means that a corresponding point has been found."
" This identifiant can be used thanks to the following special command of "
"the weak form language::"
msgstr ""

# 61d70366fd014d26855416c2e9fae674
#: ../source/userdoc/gasm_high.rst:775
msgid ""
"where ``transname`` is the name of the transformation, ``expr`` is the "
"expression to be evaluated and ``i`` value of the returned integer "
"identifiant for which the expression have to be computed. Note that ``i``"
" can be ommited, in that case, the expression is evaluated for a nonzero "
"identifiant (i.e. when a corresponding point has been found). For "
"instance, the previous assembly expression to prescribe the equality of a"
" variable ``u`` with its interpolation could be writtne::"
msgstr ""

# a3be4556fd994fea851c81e456db55f8
#: ../source/userdoc/gasm_high.rst:780
msgid ""
"In that case, the equality will only be prescribed in the part of the "
"domain where the transformation succeed and in the other part, the "
"mulitplier is enforced to vanish."
msgstr ""

# 10cfe805e6ee412b992b2e1538e70d7b
#: ../source/userdoc/gasm_high.rst:783
msgid ""
"**CAUTION**: You have to think that when some variables are used in the "
"transformation, the computation of the tangent system takes into account "
"these dependence. However, the second derivative of a transformation with"
" respect to a variable used has not been implemented. Thus, such a "
"transformation is not allowed in the definition of a potential since it "
"cannot be derived twice."
msgstr ""

# 97e81ebc57eb4661a4f17772c2e2734c
#: ../source/userdoc/gasm_high.rst:786
msgid "Element extrapolation transformation"
msgstr ""

# d5d13ce3d2124519a9c82369ce064ba0
#: ../source/userdoc/gasm_high.rst:788
msgid ""
"A specific transformation (see previous section) is defined in order to "
"allows the evaluation of certain quantities by extrapolation with respect"
" to another element (in general a neighbour element). This is not "
"strictly speaking a transformation since the point location remain "
"unchanged, but the evaluation is made on another element extrapolating "
"the shape functions outside it. This transformation is used for "
"stabilization term in fictitious domain applications (with cut elements) "
"where it is more robust to extrapolate some quantities on a neighbour "
"element having a sufficiently large intersection with the real domain "
"than evaluating them on the current element if it has a small "
"intersection with the real domain. The functions allowing to add such a "
"transformation to a model or a workspace are::"
msgstr ""

# 30b0aa1ac14745e384ec291608bf85cc
#: ../source/userdoc/gasm_high.rst:796
msgid ""
"The map elt_corr should contain the correspondances between the elements "
"where the transformation is to be applied and the respective elements "
"where the extrapolation has to be made. On the element not listed in the "
"map, no transformation is applied and the evaluation is performed "
"normally on the current element."
msgstr ""

# 7f30f66b8f1b49cdb82d48101e9004b9
#: ../source/userdoc/gasm_high.rst:798
msgid ""
"The following functions allow to change the element correspondance of a "
"previously added element extrapolation transformation::"
msgstr ""

# 1693e0d29eff49f4862fa95457be3b26
#: ../source/userdoc/gasm_high.rst:810
msgid "Evaluating discontinuities across inter-element edges/faces"
msgstr ""

# 4e65f509da76489c994119d7e761af80
#: ../source/userdoc/gasm_high.rst:812
msgid ""
"A specific interpolate transformation (see previous sections), called "
"``neighbour_elt`` is defined by default in all models. This "
"transformation can only be used when a computation is made on an internal"
" edge/face of a mesh, i.e. an element face shared at least by two "
"elements. It aims to compute discontinuity jumps of a variable across "
"inter-element faces. It is particularly suitable to implement "
"Discontinuous Galerkin and interior penalty methods, Ghost penalty terms "
"or a posteriori estimators. The expressions::"
msgstr ""

# 66a09fd548494a02abea23ba0aba1dad
#: ../source/userdoc/gasm_high.rst:825
msgid ""
"are available (as with any other interpolate transformation) and compute "
"a field on the current point but on the neighbour element. Of course, "
"``Interpolate(X, neighbour_elt)`` as no specific interest since it "
"returns the same result as ``X``. Similarly, in most cases, "
"``Interpolate(Normal, neighbour_elt)`` will return the opposite of "
"``Normal`` except for instance for 2D shell element in a 3D mesh where it"
" has an interest."
msgstr ""

# c68e3dca903d4fd48236192957c73aa5
#: ../source/userdoc/gasm_high.rst:827
msgid "The jump on a variable ``u`` can be computed with::"
msgstr ""

# 124b3a2ab8654ae3839f9b3744ba1c5d
#: ../source/userdoc/gasm_high.rst:831
msgid "and a penalisation term of the jump can be written::"
msgstr ""

# d1347cea4f60455dadcb90ea69a543e7
#: ../source/userdoc/gasm_high.rst:835
msgid ""
"Note that the region representing the set of all internal faces of a mesh"
" can be obtained thanks to the function::"
msgstr ""

# 66192f0d06e24a459b5599b1b4228add
#: ../source/userdoc/gasm_high.rst:839
msgid ""
"where ``mr`` is an optional mesh region. If ``mr`` is specified only the "
"face internal with respect to this region are returned. An important "
"aspect is that  each face is represented only once and is arbitrarily "
"chosen between the two neighbour elements."
msgstr ""

# 7d546c554fd54cdb9eb8a25f6f3cb910
#: ../source/userdoc/gasm_high.rst:841
msgid ""
"See for instance :file:`interface/tests/python/demo_laplacian_DG.py` or "
":file:`interface/tests/matlab/demo_laplacian_DG.m` for an example of use."
msgstr ""

# e61c06ae210c4f6e99a7eff56552083d
#: ../source/userdoc/gasm_high.rst:843
msgid ""
"Compared to other interpolate transformations, this transformation is "
"more optimized and benefits from finite element and geometric "
"transformation pre-computations."
msgstr ""

# 73db11af81bb4e8e941dde15d1f3c1f7
#: ../source/userdoc/gasm_high.rst:848
msgid ""
"Double domain integrals or terms (convolution - Kernel - Exchange "
"integrals)"
msgstr ""

# a30b827722104534aba53a162511c2d3
#: ../source/userdoc/gasm_high.rst:850
msgid ""
"In some very special cases, it can be interesting to compute an integral "
"on the direct product of two domains, i.e. a double integral such as for "
"instance"
msgstr ""

# 2fac10c9ac3f471a9dcb83b66c2148f4
#: ../source/userdoc/gasm_high.rst:856
msgid ""
"where :math:`k(x,y)` is a given kernel, :math:`u` a quantity defined on "
":math:`\\Omega_1` and  :math:`v` a quantity defined on :math:`\\Omega_2`,"
" eventually with  :math:`\\Omega_1` and :math:`\\Omega_2` the same "
"domain. This can be interesting either to compute such an integral or to "
"define an interaction term between two variables defined on two different"
" domains."
msgstr ""

# 0934f1c57e024c8ab4d6728f501851ac
#: ../source/userdoc/gasm_high.rst:858
msgid ""
"CAUTION: Of course, this kind of term have to be used with great care, "
"since it naturally leads to fully populated stiffness or tangent "
"matrices."
msgstr ""

# 61a1be12f45d45a586cb195c5460cf76
#: ../source/userdoc/gasm_high.rst:861
msgid ""
"The weak form language of |gf| furnishes a mecanism to compute such a "
"term. First, the secondary domain has to be declared in the "
"workspace/model with its integration methods. The addition of a standard "
"secondary domain can be done with one of the two following functions::"
msgstr ""

# e0b703e9e1dc4ed5aeea28df37098f7d
#: ../source/userdoc/gasm_high.rst:867
msgid ""
"where ``model`` or ``workspace`` is the model or workspace where the "
"secondary domain has to be declared, ``domain_name`` is a string for the "
"identification of this domain together with the mesh region and "
"integration method, ``mim`` the integration method and ``region`` a mesh "
"region. Note that with these standard secondary domains, the integration "
"is done on the whole region for each element of the primary domain. It "
"can be interesting to implement specific secondary domains restricting "
"the integration to the necessary elements with respect to the element of "
"the primary domain. A structure is dedicated to this in |gf|."
msgstr ""

# e4721341dba844fea2a567f0038208fe
#: ../source/userdoc/gasm_high.rst:873
msgid ""
"Once a secondary domain has been declared, it can be specified that a "
"weak form language expression has to be assembled on the direct product "
"of a current domain and a secondary domain, adding the name of the "
"secondary domain to the ``add_expression`` method of the workspace object"
" or using ``add_linear_twodomain_term``, ``add_nonlinear_twodomain_term``"
" or ``add_twodomain_source_term`` functions::"
msgstr ""

# 24edcf57bfbe4aae945fd3cea9685a84
#: ../source/userdoc/gasm_high.rst:870
msgid ""
"workspace.add_expression(expr, mim, region, derivative_order, "
"secondary_domain) add_twodomain_source_term(model, mim, expr, region, "
"secondary_domain) add_linear_twodomain_term(model, mim, expr, region, "
"secondary_domain) add_nonlinear_twodomain_term(model, mim, expr, region, "
"secondary_domain)"
msgstr ""

# 4877bbace2474257a60240a86a0b7730
#: ../source/userdoc/gasm_high.rst:875
msgid ""
"For the utilisation with the Python/Scilab/Matlab interface, see the "
"documentation on ``gf_asm`` command and the ``model`` object."
msgstr ""

# 1b6ab0a6c4124300a5845c4610d304db
#: ../source/userdoc/gasm_high.rst:878
msgid ""
"Inside an expression of the weak form language, one can refer to the unit"
" normal vector to a boundary, to the current position or to the value of "
"a variable thanks to the expressions::"
msgstr ""

# e6b352d51e564d92b461f585d0deef68
#: ../source/userdoc/gasm_high.rst:891
msgid "For instance, a term like"
msgstr ""

# bdab636285ed429db86c0705d7deffb1
#: ../source/userdoc/gasm_high.rst:897
msgid "would correspond to the following weak for language expression::"
msgstr ""

# 4c1c5818d40c4edca2dce6764572a115
#: ../source/userdoc/gasm_high.rst:905
msgid "Elementary transformations"
msgstr ""

# f08fb00db8cd4e5298f45971dbe46c4b
#: ../source/userdoc/gasm_high.rst:907
msgid ""
"An elementary transformation is a linear transformation of the shape "
"functions given by a matrix which may depend on the element which is "
"applied to the local degrees of freedom at the element level. an example "
"of definition of elementary transformation can be found in the file "
":file:`src/getfem_linearized_plates.cc`. It aims for instance to define a"
" local projection of a finite element on a lower level element to perform"
" a reduction such as the one used in MITC elements."
msgstr ""

# 60a450478fef47af97a2834d0355e15c
#: ../source/userdoc/gasm_high.rst:915
msgid ""
"Once a transformation is defined, it can be added to the model/workspace "
"with the method::"
msgstr ""

# c52d638b9a6a43f396f87643dd882ed7
#: ../source/userdoc/gasm_high.rst:920
msgid ""
"where ``pelementary_transformation`` is a pointer to an object deriving "
"from ``virtual_elementary_transformation``. Once it is added to the "
"model/workspace, it is possible to use the following expressions in the "
"weak form language::"
msgstr ""

# 94d73ffef1b344208c5889f068e690fb
#: ../source/userdoc/gasm_high.rst:931
msgid ""
"where ``u`` is one of the FEM variables of the model/workspace. For the "
"moment, the only available elementary transformation is the the one for "
"the projection on rotated RT0 element for two-dimensional elements which "
"can be added thanks to the function (defined in "
":file:`src/getfem/getfem_linearized_plates.h`)::"
msgstr ""

# ea0823cb485746baa7967889ebf322c4
#: ../source/userdoc/gasm_high.rst:938
msgid "Xfem discontinuity evaluation (with mesh_fem_level_set)"
msgstr ""

# 97636a4f7a6146c6be26fc80e8b78621
#: ../source/userdoc/gasm_high.rst:940
msgid ""
"For |gf| 5.1. When using a fem cut by a level-set (using fem_level_set or"
" mesh_fem_level_set objects), it is often interesting to integrate the "
"discontinuity jump of a variable, or the jump in gradient or the average "
"value. For this purpose, the weak form language furnishes the following "
"expressions for ``u`` a FEM variable::"
msgstr ""

# 5270c9936da441878bbafe139790011f
#: ../source/userdoc/gasm_high.rst:960
msgid ""
"which are only available when the evaluation (integration) is made on the"
" curve/surface separating two zones of continuity, i.e. on the zero "
"level-set of a considered level-set function (using a "
"``mesh_im_level_set`` object). For instance, a jump in the variable ``u``"
" will be given by::"
msgstr ""

# fa49d2f5fe164dd5bbc79a9ac37c06d8
#: ../source/userdoc/gasm_high.rst:964
msgid "and the average by::"
msgstr ""

# 1be2db8f070740079b23bc554975164a
#: ../source/userdoc/gasm_high.rst:973
msgid "Storage of sub-expressions in a getfem::im_data object during assembly"
msgstr ""

# dd8f094f8b2c4496a94e86cdd66c6445
#: ../source/userdoc/gasm_high.rst:975
msgid ""
"It is possible to store in a vector depending on a getfem::im_data object"
" a part of an assembly computation, for instance in order to use this "
"computation in another assembly. This is an alternative to the "
"interpolation functions which allows not to compute twice the same "
"expression."
msgstr ""

# ea20f009ac8841a8a437a7b3f7fe08db
#: ../source/userdoc/gasm_high.rst:977
msgid ""
"The method to add such an assignment in the assembly is the following for"
" a model or a ga_workspace::"
msgstr ""

# 30186ce2f825460ab0a150d45c1d08a5
#: ../source/userdoc/gasm_high.rst:985
msgid ""
"It adds expression `expr` to be evaluated at assembly time and being "
"assigned to the data `dataname` which has to be of im_data type. `order` "
"represents the order of assembly where this assignement has to be done "
"(potential(0), weak form(1) or tangent system(2) or at each order(-1)). "
"The default value is 1. If before = 1, the the assignement is performed "
"before the computation of the other assembly terms, such that the data "
"can be used in the remaining of the assembly as an intermediary result "
"(be careful that it is still considered as a data, no derivation of the "
"expression is performed for the tangent system). If before = 0 (default),"
" the assignement is done after the assembly terms."
msgstr ""

# 994f3d19a61f48f781a0be8f5bca0044
#: ../source/userdoc/gasm_high.rst:997
msgid "Additionally, In a model, the method::"
msgstr ""

# 205cb7eb461a485cab55a6ed16168ce6
#: ../source/userdoc/gasm_high.rst:1001
msgid "allows to cancel all the assembly assignments previously added."
msgstr ""

# 9ce6454d4e7d490d8d1724ecfe66b9dd
#: ../source/userdoc/gasm_high.rst:7
msgid "asm"
msgstr ""

# 9ce6454d4e7d490d8d1724ecfe66b9dd
#: ../source/userdoc/gasm_high.rst:7
msgid "generic assembly"
msgstr ""

# b8a4aeb94b3d40bd86ff25ab47c0a2cd
#~ msgid "Compute arbitrary terms - high-level generic assembly procedures"
#~ msgstr ""

# dc4d345ff0a4440f949f0f1df67d9d4e
#~ msgid ""
#~ "with ``md`` a previously define "
#~ "``getfem::model`` object. In that case "
#~ "the variable and constant considered are"
#~ " the one of the model. The "
#~ "second way it to define an "
#~ "independent ``getfem::ga_workspace`` object by::"
#~ msgstr ""

# ef88d3a69f49456c87c33cd3db0850d4
#~ msgid ""
#~ "``timestep``: the main time step of "
#~ "the model on which this assembly "
#~ "string is evaluated (defined by "
#~ "``md.set_time_step(dt)``). Do not work on "
#~ "pure workspaces."
#~ msgstr ""

# 6b6597bd96d74c9890c82680efa2189f
#~ msgid ""
#~ "where ``workspace`` is a workspace "
#~ "object, ``md`` a model object, "
#~ "``transname`` is the name given to "
#~ "the transformation, ``source_mesh`` the mesh"
#~ " on which the integration occurs, "
#~ "``target_mesh`` the mesh on which the"
#~ " interpolation is performed and ``expr``"
#~ " is a regular expression of the "
#~ "high-level generic weak form language"
#~ " which may contains reference to the"
#~ " variables of the workspace/model."
#~ msgstr ""

