# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-22 15:02+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

# 474d638807e047fca5936c20df7554d8
#: ../source/userdoc/interNMM.rst:10
msgid "Interpolation of a finite element method on non-matching meshes"
msgstr "非マッチングメッシュ上の有限要素法の補間\n"

# a19fe010adfd4374afdb667e27b3a6e5
#: ../source/userdoc/interNMM.rst:12
msgid ""
"A special finite element method is defined in "
":file:`getfem/getfem_interpolated_fem.h` which is not a real finite element "
"method, but a pseudo-fem which interpolates a finite element method defined "
"on another mesh. If you need to assemble a matrix with finite element "
"methods defined on different meshes, you may use the \"interpolated fem\" "
"for that purpose::"
msgstr ""
"特殊な有限要素法は、file： `getfem / "
"getfem_interpolated_fem.h`で定義されていますが、これは実際の有限要素法ではありませんが、別のメッシュで定義された有限要素法を補間するpseudo-"
"femです。異なるメッシュで定義された有限要素法を使用して行列をアセンブルする必要がある場合は、その目的のために「interpolated "
"fem」を使用することができます。\n"

# 1b09d1bcfec64ebf92151b8efb9a144d
#: ../source/userdoc/interNMM.rst:21
msgid ""
"Because each base function of the finite element method has to be "
"interpolated, such a computation can be a heavy procedure. By default, the "
"interpolated fem object store the interpolation data."
msgstr ""
"有限要素法の各基底関数は補間されなければならないので、そのような計算は重い手順である可能性がある。デフォルトでは、補間されたfemオブジェクトは補間データを格納します。\n"

# 8cc84392bad54260b23a4171ba8338c5
#: ../source/userdoc/interNMM.rst:25
msgid ""
"The interpolation is made on each Gauss point of the integration methods of "
"``mim``, so that you have to use these integration methods in the assembling"
" procedures."
msgstr "補間は `` mim``の積分方法の各ガウス点で行われるので、組み立て手順でこれらの積分方法を使わなければなりません。\n"

# 742326abd6d14adfacbb1e38fcd475ae
#: ../source/userdoc/interNMM.rst:29
msgid ""
"For instance if you need to compute the mass matrix between two different "
"finite element methods defined on two different meshes, this is an example "
"of code which interpolate the second FEM. on the mesh of the first FEM., "
"assuming that ``mf`` describes the finite element method and ``mim`` is the "
"chosen integration method::"
msgstr ""
"たとえば、2つの異なるメッシュで定義された2つの異なる有限要素法の間の質量行列を計算する必要がある場合、これは2番目のFEMを補間するコードの例です。 "
"`` mf``が有限要素法を記述し、 `` mim``が選択された積分法であると仮定して、最初のFEMのメッシュ上で::\n"

# fcf4706d854f41d1847bf201af270eef
#: ../source/userdoc/interNMM.rst:41
msgid ""
"The object pointed by ``ifem`` contains all the information concerning the "
"interpolation. It could use a lot of memory. As pfem is a smart pointer (a "
"boost `intrusive_ptr "
"<http://www.boost.org/libs/smart_ptr/intrusive_ptr.html>`_), the "
"interpolated fem will be automatically destroyed when the last pointer on it"
" is destroyed. To obtain a better accuracy, it is better to refine the "
"integration method (with ``IM_STRUCTURED_COMPOSITE`` for instance) rather "
"than increase its order."
msgstr ""
"`` ifem``が指すオブジェクトには、補間に関するすべての情報が含まれています。それは多くのメモリを使用する可能性があります。 "
"pfemはスマートポインタ（boost `intrusive_ptr "
"<http://www.boost.org/libs/smart_ptr/intrusive_ptr.html>` "
"_）であるため、補間されたfemは、最後のポインタが破棄されると自動的に破棄されます。より正確な精度を得るには、その順序を増やすのではなく、統合メソッド（たとえば、"
" `` IM_STRUCTURED_COMPOSITE``を使って）を改良する方が良いでしょう。\n"

# f6f36cbc6bef43c1a0bc7afeb44ccadb
#: ../source/userdoc/interNMM.rst:51
msgid "mixed methods with different meshes"
msgstr "異なるメッシュの混合メソッド\n"

# e8008b2adef44fe29eb9d901a3cca671
# c84e7e799f0a41b5b9a26d6291c58ecd
#: ../source/userdoc/interNMM.rst:52 ../source/userdoc/interNMM.rst:57
msgid "to be described ..."
msgstr "説明する...\n"

# 33ce30e6437e4c6297c89bb8702549bc
#: ../source/userdoc/interNMM.rst:56
msgid "mortar methods"
msgstr "モルタル法\n"
