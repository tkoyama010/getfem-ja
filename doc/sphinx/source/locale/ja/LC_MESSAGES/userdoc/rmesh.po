# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-22 15:02+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

# acee5d25274848b09b9e5e0aaee963b8
#: ../source/userdoc/rmesh.rst:10
msgid "Mesh refinement"
msgstr ""

# 3737ac3b08e9446795f841f19e040cdf
#: ../source/userdoc/rmesh.rst:12
msgid ""
"Mesh refinement with the Bank et all method (see [bank1983]_) is "
"available in dimension 1, 2 or 3 for simplex meshes (segments, triangles "
"and tetrahedrons). For a given object ``mymesh`` of type |gf_m|, the "
"method::"
msgstr ""

# e4e7934ec60e441bb3b56e8a3748b206
#: ../source/userdoc/rmesh.rst:18
msgid ""
"refines the elements whose indices are stored in ``bv`` (a |dal_bv| "
"object). The conformity of the mesh is kept thanks to additional "
"refinement (the so called green triangles). Information about green "
"triangles (in Figure :ref:`ud-fig-refine`) is stored on the mesh object "
"to gather them for further refinements (see [bank1983]_)."
msgstr ""

# ba42f6537d9147209f54597372d9c51e
#: ../source/userdoc/rmesh.rst:29
msgid "Example of Bank refinement in 2D"
msgstr ""

# e6d006b2f39a4476a504ed220b39706b
#: ../source/userdoc/rmesh.rst:31
msgid ""
"Mesh refinement is most of the time coupled with an *a posteriori* error "
"estimate. A very basic error estimate is available in the file "
":file:`getfem/getfem_error_estimate.h`::"
msgstr ""

# f748040e2d18478bbad02f9ffdc4aed7
#: ../source/userdoc/rmesh.rst:37
msgid ""
"where ``mim`` is the integration method (a |gf_mim| object), ``mf`` is "
"the finite element method on which the unknown has been computed (a "
"|gf_mf| object), ``U`` is the vector of degrees of freedom of the "
"unknown, ``err`` is a sufficiently large vector in which the error "
"estimate is computed for each element of the mesh, and ``rg`` is a mesh "
"region bulild from elements on which the error estimate should be "
"computed (a |gf_mr| object)."
msgstr ""

# 1a8fb220229f4e119f15835d505c1c76
#: ../source/userdoc/rmesh.rst:43
msgid ""
"This basic error estimate is only valid for order two problems and just "
"compute the sum of the jump in normal derivative across the elements on "
"each edge (for two-dimensional problems) or each face (for three-"
"dimensional problems). This means that for each face :math:`e` of the "
"mesh the following quantity is computed:"
msgstr ""

# 2089f4e00786429189feb5fd0f101c3f
#: ../source/userdoc/rmesh.rst:54
msgid ""
"where :math:`[\\hspace{-0.12em}[\\partial_n u]\\hspace{-0.12em}]` is the "
"jump of the normal derivative. Then, the error estimate for a given "
"element is the sum of the computed quantities on each internal face "
"multiplied by the element diameter. This basic error estimate can be "
"taken as a model for more elaborated ones. It uses the high-level generic"
" assembly and the ``neighbour_elt`` interpolate transformation (see :ref"
":`ud-gasm-high-inter-elt-disc`)."
msgstr ""

