# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-22 15:02+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

# 62fb66a1fa61415a892ed21d4b118cb9
#: ../source/scilab/cmdref_gf_model_get.rst:8
msgid "gf_model_get"
msgstr ""

# 466bf7d7f612417ebf41a8e519143957
#: ../source/scilab/cmdref_gf_model_get.rst:10
msgid "**Synopsis**"
msgstr ""

# c726c0fe9cdf47aaad9ee89d7f387c60
#: ../source/scilab/cmdref_gf_model_get.rst:60
msgid "**Description :**"
msgstr ""

# 64d23847857b4ea18ca252556bfe8b97
#: ../source/scilab/cmdref_gf_model_get.rst:63
msgid "Get information from a model object."
msgstr ""

# 2b10c7fcc474472f9aa1c92932979153
#: ../source/scilab/cmdref_gf_model_get.rst:66
msgid "**Command list :**"
msgstr ""

# d75c903db5fb49f1974564f30f983f83
#: ../source/scilab/cmdref_gf_model_get.rst:70
msgid "``b = gf_model_get(model M, 'is_complex')``"
msgstr ""

# 88e6686e25fa4cd2b28d3b58af9dc987
#: ../source/scilab/cmdref_gf_model_get.rst:72
msgid "Return 0 is the model is real, 1 if it is complex."
msgstr ""

# 1db61b0d7f0f46d38292ea66df18b3f6
#: ../source/scilab/cmdref_gf_model_get.rst:75
msgid "``T = gf_model_get(model M, 'nbdof')``"
msgstr ""

# 272ec472a057489893dae7ce1bc51cb6
#: ../source/scilab/cmdref_gf_model_get.rst:77
msgid "Return the total number of degrees of freedom of the model."
msgstr ""

# 8d3cd686aa0d480ab80da3ffe9996ef8
#: ../source/scilab/cmdref_gf_model_get.rst:80
msgid "``dt = gf_model_get(model M, 'get time step')``"
msgstr ""

# 98711f45fe8e4f069d8e66dd36b67586
#: ../source/scilab/cmdref_gf_model_get.rst:82
msgid "Gives the value of the time step."
msgstr ""

# e326b294d0e34792a97ec1039190a9d4
#: ../source/scilab/cmdref_gf_model_get.rst:85
msgid "``t = gf_model_get(model M, 'get time')``"
msgstr ""

# 59a44979e4884a46990bc345d9f8c73f
#: ../source/scilab/cmdref_gf_model_get.rst:87
msgid ""
"Give the value of the data <literal>t</literal> corresponding to the "
"current time."
msgstr ""

# fca958dbfe0f4e2d804936d752182032
#: ../source/scilab/cmdref_gf_model_get.rst:91
msgid "``T = gf_model_get(model M, 'tangent_matrix')``"
msgstr ""

# 32ac5b1b87b84af68c5a0e92690b2ba5
#: ../source/scilab/cmdref_gf_model_get.rst:93
msgid "Return the tangent matrix stored in the model ."
msgstr ""

# 8595289c6b56480b9604d22d6d02cdb7
#: ../source/scilab/cmdref_gf_model_get.rst:96
msgid "``gf_model_get(model M, 'rhs')``"
msgstr ""

# 4c64605573aa47779b3667345e3abb6b
#: ../source/scilab/cmdref_gf_model_get.rst:98
msgid "Return the right hand side of the tangent problem."
msgstr ""

# 668880fc3e5549e89fa76beff0dfc6b8
#: ../source/scilab/cmdref_gf_model_get.rst:101
msgid ""
"``gf_model_get(model M, 'brick term rhs', int ind_brick[, int ind_term, "
"int sym, int ind_iter])``"
msgstr ""

# 86b9d40c86144ec6a4cdf0d9e3eb4c58
#: ../source/scilab/cmdref_gf_model_get.rst:103
msgid ""
"Gives the access to the part of the right hand side of a term of a "
"particular nonlinear brick. Does not account of the eventual time "
"dispatcher. An assembly of the rhs has to be done first. "
"<literal>ind_brick</literal> is the brick index. "
"<literal>ind_term</literal> is the index of the term inside the brick "
"(default value : 1). <literal>sym</literal> is to access to the second "
"right hand side of for symmetric terms acting on two different variables "
"(default is 0). <literal>ind_iter</literal> is the iteration number when "
"time dispatchers are used (default is 1)."
msgstr ""

# a25d806e88c449d5bd7ebaa09fbce6e3
#: ../source/scilab/cmdref_gf_model_get.rst:115
msgid "``z = gf_model_get(model M, 'memsize')``"
msgstr ""

# 6d5e165a6d864fa98240f6c1231edcbd
#: ../source/scilab/cmdref_gf_model_get.rst:117
msgid ""
"Return a rough approximation of the amount of memory (in bytes) used by "
"the model."
msgstr ""

# f8c2583a3da546eba1dc084d384fe57a
#: ../source/scilab/cmdref_gf_model_get.rst:121
msgid "``gf_model_get(model M, 'variable list')``"
msgstr ""

# 0ccd9ec77a5c4446be979055a81e958f
#: ../source/scilab/cmdref_gf_model_get.rst:123
msgid "print to the output the list of variables and constants of the model."
msgstr ""

# 17147896d4304855a3681c85c998f34d
#: ../source/scilab/cmdref_gf_model_get.rst:126
msgid "``gf_model_get(model M, 'brick list')``"
msgstr ""

# b7b9d353326544c6be01f8e0ab8bfd23
#: ../source/scilab/cmdref_gf_model_get.rst:128
msgid "print to the output the list of bricks of the model."
msgstr ""

# 476700338d254118817be106bdce9afc
#: ../source/scilab/cmdref_gf_model_get.rst:131
msgid "``gf_model_get(model M, 'list residuals')``"
msgstr ""

# 29e9334c85e540eeaa8343f4e4306885
#: ../source/scilab/cmdref_gf_model_get.rst:133
msgid ""
"print to the output the residuals corresponding to all terms included in "
"the model."
msgstr ""

# 461d75eac1e44e8a80a7a6c0fcd82643
#: ../source/scilab/cmdref_gf_model_get.rst:137
msgid "``V = gf_model_get(model M, 'variable', string name)``"
msgstr ""

# 1e3677aaf23c4b288dc37a83d3f6397d
#: ../source/scilab/cmdref_gf_model_get.rst:139
msgid "Gives the value of a variable or data."
msgstr ""

# c1d914673bbf4d14907951f29c334072
#: ../source/scilab/cmdref_gf_model_get.rst:142
msgid ""
"``V = gf_model_get(model M, 'interpolation', string expr, {mesh_fem mf | "
"mesh_imd mimd | vec pts,  mesh m}[, int region[, int extrapolation[, int "
"rg_source]]])``"
msgstr ""

# 4cdc3e55d38c4ceb9d98cd045f2e6e08
#: ../source/scilab/cmdref_gf_model_get.rst:144
msgid ""
"Interpolate a certain expression with respect to the mesh_fem "
"<literal>mf</literal> or the mesh_im_data <literal>mimd</literal> or the "
"set of points <literal>pts</literal> on mesh <literal>m</literal>. The "
"expression has to be valid according to the high-level generic assembly "
"language possibly including references to the variables and data of the "
"model."
msgstr ""

# 48dc3cfc04864f10a3670feebbef49a7
#: ../source/scilab/cmdref_gf_model_get.rst:150
msgid ""
"The options <literal>extrapolation</literal> and "
"<literal>rg_source</literal> are specific to interpolations with respect "
"to a set of points <literal>pts</literal>."
msgstr ""

# 9c8b1fa703dc434ca2c04dddbe3e28e9
#: ../source/scilab/cmdref_gf_model_get.rst:154
msgid ""
"``V = gf_model_get(model M, 'local_projection', mesh_im mim, string expr,"
" mesh_fem mf[, int region])``"
msgstr ""

# 92e3726bf71743219a32783e04cdc1bc
#: ../source/scilab/cmdref_gf_model_get.rst:156
msgid ""
"Make an elementwise L2 projection of an expression with respect to the "
"mesh_fem <literal>mf</literal>. This mesh_fem has to be a discontinuous "
"one. The expression has to be valid according to the high-level generic "
"assembly language possibly including references to the variables and data"
" of the model."
msgstr ""

# 2ff13f1f43fa44269adade9b25b01d5d
#: ../source/scilab/cmdref_gf_model_get.rst:164
msgid "``mf = gf_model_get(model M, 'mesh fem of variable', string name)``"
msgstr ""

# ac6a19bf29c448acad37abf4fcf74c39
#: ../source/scilab/cmdref_gf_model_get.rst:166
msgid "Gives access to the <literal>mesh_fem</literal> of a variable or data."
msgstr ""

# f75ed804669e46d4814c2924c66b2dfc
#: ../source/scilab/cmdref_gf_model_get.rst:169
msgid "``name = gf_model_get(model M, 'mult varname Dirichlet', int ind_brick)``"
msgstr ""

# 747f045df1d3414180c3b970394b2b93
#: ../source/scilab/cmdref_gf_model_get.rst:171
msgid ""
"Gives the name of the multiplier variable for a Dirichlet brick. If the "
"brick is not a Dirichlet condition with multiplier brick, this function "
"has an undefined behavior"
msgstr ""

# 2ab9bba9fc95476693908d9018ef7f5a
#: ../source/scilab/cmdref_gf_model_get.rst:176
msgid "``I = gf_model_get(model M, 'interval of variable', string varname)``"
msgstr ""

# dea820609e054d3ab363288898269e9b
#: ../source/scilab/cmdref_gf_model_get.rst:178
msgid ""
"Gives the interval of the variable <literal>varname</literal> in the "
"linear system of the model."
msgstr ""

# 25a087f2b8d14a989571433c5f734c4f
#: ../source/scilab/cmdref_gf_model_get.rst:182
msgid "``V = gf_model_get(model M, 'from variables')``"
msgstr ""

# 0a747880c79542559501262beb7741c1
#: ../source/scilab/cmdref_gf_model_get.rst:184
msgid ""
"Return the vector of all the degrees of freedom of the model consisting "
"of the concatenation of the variables of the model (useful to solve your "
"problem with you own solver)."
msgstr ""

# 8fa30ac1f68c4b80a267479c4cd3e778
#: ../source/scilab/cmdref_gf_model_get.rst:189
msgid "``gf_model_get(model M, 'assembly'[, string option])``"
msgstr ""

# a5da505afe954e34b84e68344d674a00
#: ../source/scilab/cmdref_gf_model_get.rst:191
msgid ""
"Assembly of the tangent system taking into account the terms from all "
"bricks. <literal>option</literal>, if specified, should be 'build_all', "
"'build_rhs', 'build_matrix'. The default is to build the whole tangent "
"linear system (matrix and rhs). This function is useful to solve your "
"problem with you own solver."
msgstr ""

# 40fe0834b60a41eab858c82347468f8c
#: ../source/scilab/cmdref_gf_model_get.rst:199
msgid "``{nbit, converged} = gf_model_get(model M, 'solve'[, ...])``"
msgstr ""

# 4740b180151a4958b8de13d5d5a76c12
#: ../source/scilab/cmdref_gf_model_get.rst:201
msgid "Run the standard getfem solver."
msgstr ""

# c4131ed5ff6944ce8a09cbbb9daf2771
#: ../source/scilab/cmdref_gf_model_get.rst:203
msgid ""
"Note that you should be able to use your own solver if you want (it is "
"possible to obtain the tangent matrix and its right hand side with the "
"gf_model_get(model M, 'tangent matrix') etc.)."
msgstr ""

# 5694282007e446ec9cb9692c94527917
#: ../source/scilab/cmdref_gf_model_get.rst:207
msgid "Various options can be specified:"
msgstr ""

# 7e7f4d06ab684d9fa9825755bd0d9db4
#: ../source/scilab/cmdref_gf_model_get.rst:210
msgid "'noisy' or 'very_noisy'"
msgstr ""

# 17d761a44b00478d9d100b65bfd87906
#: ../source/scilab/cmdref_gf_model_get.rst:210
msgid ""
"the solver will display some information showing the progress (residual "
"values etc.)."
msgstr ""

# a6b42dc4c5124792936119ffd43f823d
#: ../source/scilab/cmdref_gf_model_get.rst:212
msgid "'max_iter', int NIT"
msgstr ""

# 87656bd85a594cc781faef3cec501aec
#: ../source/scilab/cmdref_gf_model_get.rst:213
msgid "set the maximum iterations numbers."
msgstr ""

# bce85ec3ff5f43189773e9d66edee0fe
#: ../source/scilab/cmdref_gf_model_get.rst:214
msgid "'max_res', @float RES"
msgstr ""

# cd23580e41ac4d5295ca520af15b4321
#: ../source/scilab/cmdref_gf_model_get.rst:215
msgid "set the target residual value."
msgstr ""

# f450329f695242ba84b14451b1298c2f
#: ../source/scilab/cmdref_gf_model_get.rst:217
msgid "'diverged_res', @float RES"
msgstr ""

# 78e3a777bc184049aecc8fd46a4a7b9b
#: ../source/scilab/cmdref_gf_model_get.rst:217
msgid ""
"set the threshold value of the residual beyond which the iterative method"
" is considered to diverge (default is 1e200)."
msgstr ""

# 107ae556d2424835bf7f94a54bd110e3
#: ../source/scilab/cmdref_gf_model_get.rst:222
msgid "'lsolver', string SOLVER_NAME"
msgstr ""

# c1273bcc606b461bad47eadd7674660e
#: ../source/scilab/cmdref_gf_model_get.rst:220
msgid ""
"select explicitely the solver used for the linear systems (the default "
"value is 'auto', which lets getfem choose itself). Possible values are "
"'superlu', 'mumps' (if supported), 'cg/ildlt', 'gmres/ilu' and "
"'gmres/ilut'."
msgstr ""

# 6a49becbb2fb4351bd5d55312bfdf702
#: ../source/scilab/cmdref_gf_model_get.rst:227
msgid "'lsearch', string LINE_SEARCH_NAME"
msgstr ""

# 97964250e22c4cc9b0b8646f724e59b3
#: ../source/scilab/cmdref_gf_model_get.rst:225
msgid ""
"select explicitely the line search method used for the linear systems "
"(the default value is 'default'). Possible values are 'simplest', "
"'systematic', 'quadratic' or 'basic'."
msgstr ""

# d763b15a23ea432b9ca1da8b0aa14a5b
#: ../source/scilab/cmdref_gf_model_get.rst:229
msgid "Return the number of iterations, if an iterative method is used."
msgstr ""

# f29bad15614249779df3e0437a445afb
#: ../source/scilab/cmdref_gf_model_get.rst:231
msgid ""
"Note that it is possible to disable some variables (see "
"gf_model_set(model M, 'disable variable') ) in order to solve the problem"
" only with respect to a subset of variables (the disabled variables are "
"then considered as data) for instance to replace the global Newton "
"strategy with a fixed point one."
msgstr ""

# 5e82aba83735418cac082feac85b1819
#: ../source/scilab/cmdref_gf_model_get.rst:240
msgid ""
"``gf_model_get(model M, 'test tangent matrix'[, scalar EPS[, int NB[, "
"scalar scale]]])``"
msgstr ""

# 8b0df57e2dbe40798026027cd3279ef9
#: ../source/scilab/cmdref_gf_model_get.rst:242
msgid ""
"Test the consistency of the tangent matrix in some random positions and "
"random directions (useful to test newly created bricks). "
"<literal>EPS</literal> is the value of the small parameter for the finite"
" difference computation of the derivative is the random direction "
"(default is 1E-6). <literal>NN</literal> is the number of tests (default "
"is 100). <literal>scale</literal> is a parameter for the random position "
"(default is 1, 0 is an acceptable value) around the current position. "
"Each dof of the random position is chosen in the range [current-scale, "
"current+scale]."
msgstr ""

# d8ff009d3ce84c54b749de74210b7285
#: ../source/scilab/cmdref_gf_model_get.rst:254
msgid ""
"``gf_model_get(model M, 'test tangent matrix term', string varname1, "
"string varname2[, scalar EPS[, int NB[, scalar scale]]])``"
msgstr ""

# 5f1f0c75fe0d4447aec78fe1c413a705
#: ../source/scilab/cmdref_gf_model_get.rst:256
msgid ""
"Test the consistency of a part of the tangent matrix in some random "
"positions and random directions (useful to test newly created bricks). "
"The increment is only made on variable <literal>varname2</literal> and "
"tested on the part of the residual corresponding to "
"<literal>varname1</literal>. This means that only the term "
"(<literal>varname1</literal>, <literal>varname2</literal>) of the tangent"
" matrix is tested. <literal>EPS</literal> is the value of the small "
"parameter for the finite difference computation of the derivative is the "
"random direction (default is 1E-6). <literal>NN</literal> is the number "
"of tests (default is 100). <literal>scale</literal> is a parameter for "
"the random position (default is 1, 0 is an acceptable value) around the "
"current position. Each dof of the random position is chosen in the range "
"[current-scale, current+scale]."
msgstr ""

# 0db150ec9df448b485418835a5c14b40
#: ../source/scilab/cmdref_gf_model_get.rst:272
msgid ""
"``expr = gf_model_get(model M, 'Neumann term', string varname, int "
"region)``"
msgstr ""

# 9975d5cae7c646a3b8b607a7d677927e
#: ../source/scilab/cmdref_gf_model_get.rst:274
msgid ""
"Gives the assembly string corresponding to the Neumann term of the fem "
"variable <literal>varname</literal> on <literal>region</literal>. It is "
"deduced from the assembly string declared by the model bricks. "
"<literal>region</literal> should be the index of a boundary region on the"
" mesh where <literal>varname</literal> is defined. Care to call this "
"function only after all the volumic bricks have been declared. Complains,"
" if a brick omit to declare an assembly string."
msgstr ""

# 682d40da54f6401f9aefcfaa5183bfe4
#: ../source/scilab/cmdref_gf_model_get.rst:284
msgid ""
"``V = gf_model_get(model M, 'compute isotropic linearized Von Mises or "
"Tresca', string varname, string dataname_lambda, string dataname_mu, "
"mesh_fem mf_vm[, string version])``"
msgstr ""

# 8402531b64474783b7dd8b8fd125fdf1
#: ../source/scilab/cmdref_gf_model_get.rst:286
msgid ""
"Compute the Von-Mises stress or the Tresca stress of a field (only valid "
"for isotropic linearized elasticity in 3D). <literal>version</literal> "
"should be  'Von_Mises' or 'Tresca' ('Von_Mises' is the default). "
"Parametrized by Lame coefficients."
msgstr ""

# 90418cfe26e042aca4386749c3785204
#: ../source/scilab/cmdref_gf_model_get.rst:293
msgid ""
"``V = gf_model_get(model M, 'compute isotropic linearized Von Mises "
"pstrain', string varname, string data_E, string data_nu, mesh_fem "
"mf_vm)``"
msgstr ""

# 55d6c63050884e628dde5b01903e6dc8
#: ../source/scilab/cmdref_gf_model_get.rst:295
msgid ""
"Compute the Von-Mises stress  of a displacement field for isotropic "
"linearized elasticity in 3D or in 2D with plane strain assumption. "
"Parametrized by Young modulus and Poisson ratio."
msgstr ""

# 04916b17b0374d9199e25bca3a359b26
#: ../source/scilab/cmdref_gf_model_get.rst:301
msgid ""
"``V = gf_model_get(model M, 'compute isotropic linearized Von Mises "
"pstress', string varname, string data_E, string data_nu, mesh_fem "
"mf_vm)``"
msgstr ""

# b73d41254f584d4c8fa5f2d3026c52c2
#: ../source/scilab/cmdref_gf_model_get.rst:303
msgid ""
"Compute the Von-Mises stress  of a displacement field for isotropic "
"linearized elasticity in 3D or in 2D with plane stress assumption. "
"Parametrized by Young modulus and Poisson ratio."
msgstr ""

# 55e3b07a005d4ca2862b576b84446cf5
#: ../source/scilab/cmdref_gf_model_get.rst:309
msgid ""
"``V = gf_model_get(model M, 'compute Von Mises or Tresca', string "
"varname, string lawname, string dataname, mesh_fem mf_vm[, string "
"version])``"
msgstr ""

# c11b268960014d78ba870cbbd0dcf658
#: ../source/scilab/cmdref_gf_model_get.rst:311
msgid ""
"Compute on <literal>mf_vm</literal> the Von-Mises stress or the Tresca "
"stress of a field for nonlinear elasticity in 3D. "
"<literal>lawname</literal> is the constitutive law which could be "
"'SaintVenant Kirchhoff', 'Mooney Rivlin', 'neo Hookean' or 'Ciarlet "
"Geymonat'. <literal>dataname</literal> is a vector of parameters for the "
"constitutive law. Its length depends on the law. It could be a short "
"vector of constant values or a vector field described on a finite element"
" method for variable coefficients. <literal>version</literal> should be  "
"'Von_Mises' or 'Tresca' ('Von_Mises' is the default)."
msgstr ""

# 18bf54bc776a4a3c9b1a6b8b447b3632
#: ../source/scilab/cmdref_gf_model_get.rst:322
msgid ""
"``V = gf_model_get(model M, 'compute finite strain elasticity Von Mises',"
"  string lawname, string varname, string params, mesh_fem mf_vm[, int "
"region])``"
msgstr ""

# 85c6027b371f48e69cf6e1dbe0fc8958
#: ../source/scilab/cmdref_gf_model_get.rst:324
msgid ""
"Compute on <literal>mf_vm</literal> the Von-Mises stress of a field "
"<literal>varname</literal> for nonlinear elasticity in 3D. "
"<literal>lawname</literal> is the constitutive law which should be a "
"valid name. <literal>params</literal> are the parameters law. It could be"
" a short vector of constant values or may depend on data or variables of "
"the model. Uses the high-level generic assembly."
msgstr ""

# 1891c566008f40149aae4e14cb43a846
#: ../source/scilab/cmdref_gf_model_get.rst:333
msgid ""
"``V = gf_model_get(model M, 'compute second Piola Kirchhoff tensor', "
"string varname, string lawname, string dataname, mesh_fem mf_sigma)``"
msgstr ""

# 0b0bb4e631c840dc862d94672dc504f3
#: ../source/scilab/cmdref_gf_model_get.rst:335
msgid ""
"Compute on <literal>mf_sigma</literal> the second Piola Kirchhoff stress "
"tensor of a field for nonlinear elasticity in 3D. "
"<literal>lawname</literal> is the constitutive law which could be "
"'SaintVenant Kirchhoff', 'Mooney Rivlin', 'neo Hookean' or 'Ciarlet "
"Geymonat'. <literal>dataname</literal> is a vector of parameters for the "
"constitutive law. Its length depends on the law. It could be a short "
"vector of constant values or a vector field described on a finite element"
" method for variable coefficients."
msgstr ""

# 01a0c37903a54e57a5d92170ad1d7db9
#: ../source/scilab/cmdref_gf_model_get.rst:346
msgid ""
"``gf_model_get(model M, 'elastoplasticity next iter', mesh_im mim, string"
" varname, string previous_dep_name, string projname, string datalambda, "
"string datamu, string datathreshold, string datasigma)``"
msgstr ""

# 69a805d340ee44ea84181d109efab3f5
#: ../source/scilab/cmdref_gf_model_get.rst:348
msgid ""
"Used with the old (obsolete) elastoplasticity brick to pass from an "
"iteration to the next one. Compute and save the stress constraints sigma "
"for the next iterations. 'mim' is the integration method to use for the "
"computation. 'varname' is the main variable of the problem. "
"'previous_dep_name' represents the displacement at the previous time "
"step. 'projname' is the type of projection to use. For the moment it "
"could only be 'Von Mises' or 'VM'. 'datalambda' and 'datamu' are the Lame"
" coefficients of the material. 'datasigma' is a vector which will contain"
" the new stress constraints values."
msgstr ""

# b462754af06e40d5ae4784f2df828108
#: ../source/scilab/cmdref_gf_model_get.rst:359
msgid ""
"``gf_model_get(model M, 'small strain elastoplasticity next iter', "
"mesh_im mim,  string lawname, string unknowns_type [, string varnames, "
"...] [, string params, ...] [, string theta = '1' [, string dt = "
"'timestep']] [, int region = -1])``"
msgstr ""

# adffeaae2f5f4280ba0b703fe2dcc0c4
#: ../source/scilab/cmdref_gf_model_get.rst:361
msgid ""
"Function that allows to pass from a time step to another for the small "
"strain plastic brick. The parameters have to be exactly the same than the"
" one of <literal>add_small_strain_elastoplasticity_brick</literal>, so "
"see the documentation of this function for the explanations. Basically, "
"this brick computes the plastic strain and the plastic multiplier and "
"stores them for the next step. Additionaly, it copies the computed "
"displacement to the data that stores the displacement of the previous "
"time step (typically 'u' to 'Previous_u'). It has to be called before any"
" use of "
"<literal>compute_small_strain_elastoplasticity_Von_Mises</literal>."
msgstr ""

# b9fe48261dec462b848db101fecae95f
#: ../source/scilab/cmdref_gf_model_get.rst:374
msgid ""
"``V = gf_model_get(model M, 'small strain elastoplasticity Von Mises', "
"mesh_im mim, mesh_fem mf_vm, string lawname, string unknowns_type [, "
"string varnames, ...] [, string params, ...] [, string theta = '1' [, "
"string dt = 'timestep']] [, int region])``"
msgstr ""

# cb79aec3215b4ee99faccf9a62cb5c0d
#: ../source/scilab/cmdref_gf_model_get.rst:376
msgid ""
"This function computes the Von Mises stress field with respect to a small"
" strain elastoplasticity term, approximated on <literal>mf_vm</literal>, "
"and stores the result into <literal>VM</literal>.  All other parameters "
"have to be exactly the same as for "
"<literal>add_small_strain_elastoplasticity_brick</literal>. Remember that"
" <literal>small_strain_elastoplasticity_next_iter</literal> has to be "
"called before any call of this function."
msgstr ""

# 9773cfae802a44749b66d1fcfe338c6f
#: ../source/scilab/cmdref_gf_model_get.rst:385
msgid ""
"``V = gf_model_get(model M, 'compute elastoplasticity Von Mises or "
"Tresca', string datasigma, mesh_fem mf_vm[, string version])``"
msgstr ""

# f80e71264e1040e5b477d2e9361ab7d2
#: ../source/scilab/cmdref_gf_model_get.rst:387
msgid ""
"Compute on <literal>mf_vm</literal> the Von-Mises or the Tresca stress of"
" a field for plasticity and return it into the vector V. "
"<literal>datasigma</literal> is a vector which contains the stress "
"constraints values supported by the mesh. <literal>version</literal> "
"should be  'Von_Mises' or 'Tresca' ('Von_Mises' is the default)."
msgstr ""

# 88ea021747584bafbb12057a9bc2d255
#: ../source/scilab/cmdref_gf_model_get.rst:392
msgid ""
"``V = gf_model_get(model M, 'compute plastic part', mesh_im mim, mesh_fem"
" mf_pl, string varname, string previous_dep_name, string projname, string"
" datalambda, string datamu, string datathreshold, string datasigma)``"
msgstr ""

# f41d06d1f2e44c83a1304042aa608759
#: ../source/scilab/cmdref_gf_model_get.rst:394
msgid ""
"Compute on <literal>mf_pl</literal> the plastic part and return it into "
"the vector V. <literal>datasigma</literal> is a vector which contains the"
" stress constraints values supported by the mesh."
msgstr ""

# b39b5808948b4984a25cb3cfc4923b05
#: ../source/scilab/cmdref_gf_model_get.rst:398
msgid ""
"``gf_model_get(model M, 'finite strain elastoplasticity next iter', "
"mesh_im mim, string lawname, string unknowns_type, [, string varnames, "
"...] [, string params, ...] [, int region = -1])``"
msgstr ""

# 988b12ff755b41c68531805f1b1bd57a
#: ../source/scilab/cmdref_gf_model_get.rst:400
msgid ""
"Function that allows to pass from a time step to another for the finite "
"strain plastic brick. The parameters have to be exactly the same than the"
" one of <literal>add_finite_strain_elastoplasticity_brick</literal>, so "
"see the documentation of this function for the explanations. Basically, "
"this brick computes the plastic strain and the plastic multiplier and "
"stores them for the next step. For the Simo-Miehe law which is currently "
"the only one implemented, this function updates the state variables "
"defined in the last two entries of <literal>varnames</literal>, and "
"resets the plastic multiplier field given as the second entry of "
"<literal>varnames</literal>."
msgstr ""

# 18669464c66049d28b133b9dfbba7a00
#: ../source/scilab/cmdref_gf_model_get.rst:413
msgid ""
"``V = gf_model_get(model M, 'compute finite strain elastoplasticity Von "
"Mises', mesh_im mim, mesh_fem mf_vm, string lawname, string "
"unknowns_type, [, string varnames, ...] [, string params, ...] [, int "
"region = -1])``"
msgstr ""

# 4833c583890b41dda5800d2c8e9891fd
#: ../source/scilab/cmdref_gf_model_get.rst:415
msgid ""
"Compute on <literal>mf_vm</literal> the Von-Mises or the Tresca stress of"
" a field for plasticity and return it into the vector V. The first input "
"parameters ar as in the function 'finite strain elastoplasticity next "
"iter'."
msgstr ""

# 27f7f89333454eaeb82bcf928176a900
#: ../source/scilab/cmdref_gf_model_get.rst:420
msgid ""
"``V = gf_model_get(model M, 'sliding data group name of large sliding "
"contact brick', int indbrick)``"
msgstr ""

# 8116e3fd2ea84c549ebd7246b49c874b
# 22910d18cab247668c89f6cd66eef763
# 17a00ee060f44677a0b69074ebe6dd05
# 9d21603825584b14ab15242d314b40cc
# 9d371403b3b749e79fed031b6164bf76
# 7834e002c1284848b76519737a780422
#: ../source/scilab/cmdref_gf_model_get.rst:422
#: ../source/scilab/cmdref_gf_model_get.rst:428
#: ../source/scilab/cmdref_gf_model_get.rst:434
#: ../source/scilab/cmdref_gf_model_get.rst:440
#: ../source/scilab/cmdref_gf_model_get.rst:446
#: ../source/scilab/cmdref_gf_model_get.rst:452
msgid ""
"Gives the name of the group of variables corresponding to the sliding "
"data for an existing large sliding contact brick."
msgstr ""

# b665e13254c247b9a2c668c4e0759de2
#: ../source/scilab/cmdref_gf_model_get.rst:426
msgid ""
"``V = gf_model_get(model M, 'displacement group name of large sliding "
"contact brick', int indbrick)``"
msgstr ""

# fae75eac72574519a3ff19a123fd92d0
#: ../source/scilab/cmdref_gf_model_get.rst:432
msgid ""
"``V = gf_model_get(model M, 'transformation name of large sliding contact"
" brick', int indbrick)``"
msgstr ""

# 0b316ed39a334c8cba8566094e03aa55
#: ../source/scilab/cmdref_gf_model_get.rst:438
msgid ""
"``V = gf_model_get(model M, 'sliding data group name of Nitsche large "
"sliding contact brick', int indbrick)``"
msgstr ""

# 54fd1d3c04a84a4ba4d500fdb694f447
#: ../source/scilab/cmdref_gf_model_get.rst:444
msgid ""
"``V = gf_model_get(model M, 'displacement group name of Nitsche large "
"sliding contact brick', int indbrick)``"
msgstr ""

# 99a8e5f16918485fa688b0622670498a
#: ../source/scilab/cmdref_gf_model_get.rst:450
msgid ""
"``V = gf_model_get(model M, 'transformation name of Nitsche large sliding"
" contact brick', int indbrick)``"
msgstr ""

# 97ab3b2113674b299bb18ae00e2868ee
#: ../source/scilab/cmdref_gf_model_get.rst:456
msgid "``M = gf_model_get(model M, 'matrix term', int ind_brick, int ind_term)``"
msgstr ""

# c4c9a9bbc093423f82b2a6852277a125
#: ../source/scilab/cmdref_gf_model_get.rst:458
msgid "Gives the matrix term ind_term of the brick ind_brick if it exists"
msgstr ""

# 9edb9919988a4925a7cee63481a67ef4
#: ../source/scilab/cmdref_gf_model_get.rst:462
msgid "``s = gf_model_get(model M, 'char')``"
msgstr ""

# a5dd27b77f854fccb59ceb77c2d8f4dd
#: ../source/scilab/cmdref_gf_model_get.rst:464
msgid "Output a (unique) string representation of the model."
msgstr ""

# 4a56aea27963478883b9817e9307daaf
#: ../source/scilab/cmdref_gf_model_get.rst:466
msgid ""
"This can be used to perform comparisons between two different model "
"objects. This function is to be completed."
msgstr ""

# 6859fd3203694a4d8685dbcb8b7e2c16
#: ../source/scilab/cmdref_gf_model_get.rst:472
msgid "``gf_model_get(model M, 'display')``"
msgstr ""

# 08946e1eb9ca471b92edf5f9f0c03b50
#: ../source/scilab/cmdref_gf_model_get.rst:474
msgid "displays a short summary for a model object."
msgstr ""

