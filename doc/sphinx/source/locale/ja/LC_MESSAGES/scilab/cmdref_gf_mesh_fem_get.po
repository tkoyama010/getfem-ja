# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-22 15:02+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

# 7c044d7f87934bd9bcc64bd3d44548f6
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:8
msgid "gf_mesh_fem_get"
msgstr ""

# 9de8d458a87743fdab8632cdfc82fc6d
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:10
msgid "**Synopsis**"
msgstr ""

# 76a60788df9e4ae5b2468a730757d84a
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:52
msgid "**Description :**"
msgstr ""

# d4006ef69f364af4842ef4e0350cc95a
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:55
msgid "General function for inquiry about mesh_fem objects."
msgstr ""

# bb2baa8d5a484bd49df232ef82d97abf
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:58
msgid "**Command list :**"
msgstr ""

# 81901af6c1d84dba9cadb311d831360d
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:62
msgid "``n = gf_mesh_fem_get(mesh_fem MF, 'nbdof')``"
msgstr ""

# 1cda19b7d8424eb59aa708442df845d5
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:64
msgid "Return the number of degrees of freedom (dof) of the mesh_fem."
msgstr ""

# 2a98a9cf1f8d4973a383e74dc4debb48
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:67
msgid "``n = gf_mesh_fem_get(mesh_fem MF, 'nb basic dof')``"
msgstr ""

# cacbe171646949679316b0137301397c
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:69
msgid "Return the number of basic degrees of freedom (dof) of the mesh_fem."
msgstr ""

# 4d7afc34dd4346d29960d67e71b97f6e
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:72
msgid "``DOF = gf_mesh_fem_get(mesh_fem MF, 'dof from cv',mat CVids)``"
msgstr ""

# 6fcaff7bb3fe47c58fcab96e4387981b
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:74
msgid ""
"Deprecated function. Use gf_mesh_fem_get(mesh_fem MF, 'basic dof from "
"cv') instead."
msgstr ""

# 9900fb8162764b8fae9fb39dbf3c7afd
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:77
msgid "``DOF = gf_mesh_fem_get(mesh_fem MF, 'basic dof from cv',mat CVids)``"
msgstr ""

# 254ed306eac04dfcaacfa3cf7538c888
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:79
msgid "Return the dof of the convexes listed in <literal>CVids</literal>."
msgstr ""

# 2de9d27adae04c45aa7510267b36408f
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:81
msgid ""
"WARNING: the Degree of Freedom might be returned in ANY order, do not use"
" this function in your assembly routines. Use 'basic dof from cvid' "
"instead, if you want to be able to map a convex number with its "
"associated degrees of freedom."
msgstr ""

# b2894cbf427a47a2b3df10b992860871
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:86
msgid ""
"One can also get the list of basic dof on a set on convex faces, by "
"indicating on the second row of <literal>CVids</literal> the faces "
"numbers (with respect to the convex number on the first row)."
msgstr ""

# 26ecddb3b67841bbbf50e1c8be50b34b
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:91
msgid ""
"``{DOFs, IDx} = gf_mesh_fem_get(mesh_fem MF, 'dof from cvid'[, mat "
"CVids])``"
msgstr ""

# 930b002aa9a94149a86a4d32bd555132
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:93
msgid ""
"Deprecated function. Use gf_mesh_fem_get(mesh_fem MF, 'basic dof from "
"cvid') instead."
msgstr ""

# 4d9467e588aa47c0a3393903edb6bffc
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:97
msgid ""
"``{DOFs, IDx} = gf_mesh_fem_get(mesh_fem MF, 'basic dof from cvid'[, mat "
"CVids])``"
msgstr ""

# d4a3d1d9386d45689b7ea2fa57cf2e86
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:99
msgid "Return the degrees of freedom attached to each convex of the mesh."
msgstr ""

# 401490f068d6411287e6d442310f02e3
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:101
msgid ""
"If <literal>CVids</literal> is omitted, all the convexes will be "
"considered (equivalent to <literal>CVids = 1 ... gf_mesh_get(mesh M, 'max"
" cvid')</literal>)."
msgstr ""

# b3e75e973779499b876446d3467a6deb
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:104
msgid ""
"<literal>IDx</literal> is a vector, <literal>length(IDx) = "
"length(CVids)+1</literal>. <literal>DOFs</literal> is a vector containing"
" the concatenated list of dof of each convex in <literal>CVids</literal>."
" Each entry of <literal>IDx</literal> is the position of the "
"corresponding convex point list in <literal>DOFs</literal>. Hence, for "
"example, the list of points of the second convex is "
"DOFs(IDx(2):IDx(3)-1)."
msgstr ""

# 481570b0eeff48cfb9ac67d267af195f
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:110
msgid ""
"If <literal>CVids</literal> contains convex #id which do not exist in the"
" mesh, their point list will be empty."
msgstr ""

# b0ff2f2f4e7044a08e138acfd07be604
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:114
msgid "``gf_mesh_fem_get(mesh_fem MF, 'non conformal dof'[, mat CVids])``"
msgstr ""

# 5a24e402777245438a6cf40c3e8891ff
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:116
msgid ""
"Deprecated function. Use gf_mesh_fem_get(mesh_fem MF, 'non conformal "
"basic dof') instead."
msgstr ""

# 85936a6815bf4f50989006cdf31998dd
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:120
msgid "``gf_mesh_fem_get(mesh_fem MF, 'non conformal basic dof'[, mat CVids])``"
msgstr ""

# 7798d31c9af04583aca801cab9f6147c
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:122
msgid "Return partially linked degrees of freedom."
msgstr ""

# 5691f6716805411e8f1e5f254b551b5b
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:124
msgid ""
"Return the basic dof located on the border of a convex and which belong "
"to only one convex, except the ones which are located on the border of "
"the mesh.  For example, if the convex 'a' and 'b' share a common face, "
"'a' has a P1 FEM, and 'b' has a P2 FEM, then the basic dof on the middle "
"of the face will be returned by this function (this can be useful when "
"searching the interfaces between classical FEM and hierarchical FEM)."
msgstr ""

# 96adae9e933f444183c5e4d1dabe62eb
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:133
msgid "``gf_mesh_fem_get(mesh_fem MF, 'qdim')``"
msgstr ""

# 025005ab541744aaa488922c4e7fc881
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:135
msgid "Return the dimension Q of the field interpolated by the mesh_fem."
msgstr ""

# a0af4ecd587d45909f49f69c0c7b41a8
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:137
msgid "By default, Q=1 (scalar field). This has an impact on the dof numbering."
msgstr ""

# 3c2cf85c4d2f440498c22d4eb78f6b6f
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:140
msgid "``{FEMs, CV2F} = gf_mesh_fem_get(mesh_fem MF, 'fem'[, mat CVids])``"
msgstr ""

# 08c2db9e6f10425097036e4c3038059d
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:142
msgid "Return a list of FEM used by the mesh_fem."
msgstr ""

# eb8e3a48156849ae962e4ecb20478130
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:144
msgid ""
"<literal>FEMs</literal> is an array of all fem objects found in the "
"convexes given in <literal>CVids</literal>. If <literal>CV2F</literal> "
"was supplied as an output argument, it contains, for each convex listed "
"in <literal>CVids</literal>, the index of its correspounding FEM in "
"<literal>FEMs</literal>."
msgstr ""

# a3a6023d7a354517845f21fd451b6d72
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:149
msgid ""
"Convexes which are not part of the mesh, or convexes which do not have "
"any FEM have their correspounding entry in <literal>CV2F</literal> set to"
" -1."
msgstr ""

# 68906b908d66411b8fb1553b75ac513e
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:155
msgid "``CVs = gf_mesh_fem_get(mesh_fem MF, 'convex_index')``"
msgstr ""

# 5424b8e683b54201ab0da683d3ed6965
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:157
msgid "Return the list of convexes who have a FEM."
msgstr ""

# e2b6fecdb1204c3dac8ae4d256ae455b
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:160
msgid "``bB = gf_mesh_fem_get(mesh_fem MF, 'is_lagrangian'[, mat CVids])``"
msgstr ""

# c597a200e0fd48169f4a4eedfed6f376
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:162
msgid "Test if the mesh_fem is Lagrangian."
msgstr ""

# 00b455cd6f044c8598843671905e412c
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:164
msgid ""
"Lagrangian means that each base function Phi[i] is such that Phi[i](P[j])"
" = delta(i,j), where P[j] is the dof location of the jth base function, "
"and delta(i,j) = 1 if i==j, else 0."
msgstr ""

# 985a48eb56d3449bbb0e00b347d47d1f
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:168
msgid ""
"If <literal>CVids</literal> is omitted, it returns 1 if all convexes in "
"the mesh are Lagrangian. If <literal>CVids</literal> is used, it returns "
"the convex indices (with respect to <literal>CVids</literal>) which are "
"Lagrangian."
msgstr ""

# 98481114a7f44c249e117046d0bfde3e
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:173
msgid "``bB = gf_mesh_fem_get(mesh_fem MF, 'is_equivalent'[, mat CVids])``"
msgstr ""

# df3be342f5634b75817f19b41e2ed8c0
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:175
msgid "Test if the mesh_fem is equivalent."
msgstr ""

# c4434b55a8a2492285453a30d698833c
# f797eadc403d4933ba9e404dc067f654
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:177
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:184
msgid "See gf_mesh_fem_get(mesh_fem MF, 'is_lagrangian')"
msgstr ""

# ecd3495bffa94dc0b0d7a53dc54b6cd0
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:180
msgid "``bB = gf_mesh_fem_get(mesh_fem MF, 'is_polynomial'[, mat CVids])``"
msgstr ""

# da64a1873bd241b295c7e7d4e154d91e
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:182
msgid "Test if all base functions are polynomials."
msgstr ""

# a8d639122dfe40d6b4d0053ed43d663f
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:187
msgid "``bB = gf_mesh_fem_get(mesh_fem MF, 'is_reduced')``"
msgstr ""

# 711f41853e864925ae054a2fff39786c
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:189
msgid "Return 1 if the optional reduction matrix is applied to the dofs."
msgstr ""

# f6d9946c24a543ba928118c906b550d9
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:192
msgid "``bB = gf_mesh_fem_get(mesh_fem MF, 'reduction matrix')``"
msgstr ""

# 1bf6bdcea16b4e70b62a038ba3f154f4
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:194
msgid "Return the optional reduction matrix."
msgstr ""

# b18b141529f84d958eadef9b32b30f6c
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:197
msgid "``bB = gf_mesh_fem_get(mesh_fem MF, 'extension matrix')``"
msgstr ""

# 5141014964f44a94868ac2cc5f43e13f
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:199
msgid "Return the optional extension matrix."
msgstr ""

# 7412dd029c8540988533fca40827731a
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:202
msgid "``Vr = gf_mesh_fem_get(mesh_fem MF, 'reduce vector', vec V)``"
msgstr ""

# 6d7fbea1a56741368efd959c3843a592
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:204
msgid "Multiply the provided vector V with the extension matrix of the mesh_fem."
msgstr ""

# efa20e0ca51648319bf036995aa8f338
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:207
msgid "``Ve = gf_mesh_fem_get(mesh_fem MF, 'extend vector', vec V)``"
msgstr ""

# 335961a28fae4073bf8a6e9ba8b473d0
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:209
msgid "Multiply the provided vector V with the reduction matrix of the mesh_fem."
msgstr ""

# 41689396fa8742289d839023839c3ffd
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:212
msgid "``DOFs = gf_mesh_fem_get(mesh_fem MF, 'basic dof on region',mat Rs)``"
msgstr ""

# 46f59c8cebea40d5b69b8015422258a1
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:214
msgid ""
"Return the list of basic dof (before the optional reduction) lying on one"
" of the mesh regions listed in <literal>Rs</literal>."
msgstr ""

# 5b6c1222ad554266b354e0e82a7e8649
# d6117b0920d844c8af442183fc947ec0
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:217
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:230
msgid ""
"More precisely, this function returns the basic dof whose support is non-"
"null on one of regions whose #ids are listed in <literal>Rs</literal> "
"(note that for boundary regions, some dof nodes may not lie exactly on "
"the boundary, for example the dof of Pk(n,0) lies on the center of the "
"convex, but the base function in not null on the convex border)."
msgstr ""

# e2b9c1678440458799c2acdf426caf22
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:225
msgid "``DOFs = gf_mesh_fem_get(mesh_fem MF, 'dof on region',mat Rs)``"
msgstr ""

# 701949268ccb45509883dc6ba0aff7f2
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:227
msgid ""
"Return the list of dof (after the optional reduction) lying on one of the"
" mesh regions listed in <literal>Rs</literal>."
msgstr ""

# 63c448fcae5d4c3ab3ae1cf01769b1cd
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:237
msgid ""
"For a reduced mesh_fem a dof is lying on a region if its potential "
"corresponding shape function is nonzero on this region. The extension "
"matrix is used to make the correspondance between basic and reduced dofs."
msgstr ""

# de40eda960df414c860590770821dee9
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:243
msgid "``DOFpts = gf_mesh_fem_get(mesh_fem MF, 'dof nodes'[, mat DOFids])``"
msgstr ""

# 077720a467c54b1ca752928467a563a5
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:245
msgid ""
"Deprecated function. Use gf_mesh_fem_get(mesh_fem MF, 'basic dof nodes') "
"instead."
msgstr ""

# 4d4de090cd1a46aca68507af491225fa
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:248
msgid "``DOFpts = gf_mesh_fem_get(mesh_fem MF, 'basic dof nodes'[, mat DOFids])``"
msgstr ""

# 40b36d22e7a642a197b522f2e1929291
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:250
msgid "Get location of basic degrees of freedom."
msgstr ""

# 519cef223dde45b6853f4b0cc1f0a8b3
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:252
msgid ""
"Return the list of interpolation points for the specified dof #IDs in "
"<literal>DOFids</literal> (if <literal>DOFids</literal> is omitted, all "
"basic dof are considered)."
msgstr ""

# 2d3dd88fa89b47b39c5ce32d4c4ffd3b
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:257
msgid "``DOFP = gf_mesh_fem_get(mesh_fem MF, 'dof partition')``"
msgstr ""

# b1844f77bcb144b1a8f42f71352ec507
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:259
msgid "Get the 'dof_partition' array."
msgstr ""

# 0f8ece2e4b664af581fb0c7056c59c6e
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:261
msgid ""
"Return the array which associates an integer (the partition number) to "
"each convex of the mesh_fem. By default, it is an all-zero array. The "
"degrees of freedom of each convex of the mesh_fem are connected only to "
"the dof of neighbouring convexes which have the same partition number, "
"hence it is possible to create partially discontinuous mesh_fem very "
"easily."
msgstr ""

# 512255169aae44a48b2bd3f1df6bc1b6
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:269
msgid "``gf_mesh_fem_get(mesh_fem MF, 'save',string filename[, string opt])``"
msgstr ""

# a143da801e684421b5a822e3f76d58c9
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:271
msgid ""
"Save a mesh_fem in a text file (and optionaly its linked mesh object if "
"<literal>opt</literal> is the string 'with_mesh')."
msgstr ""

# 631f1474415e4c04aaebd9e4e07f8f6d
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:275
msgid "``gf_mesh_fem_get(mesh_fem MF, 'char'[, string opt])``"
msgstr ""

# f5130fd8733b4f5db4332361f537e9c1
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:277
msgid "Output a string description of the mesh_fem."
msgstr ""

# 3e9422baebc6426b9443deecd12ec83f
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:279
msgid ""
"By default, it does not include the description of the linked mesh "
"object, except if <literal>opt</literal> is 'with_mesh'."
msgstr ""

# 09665b6f522d4a348bb26270d2ac70a7
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:283
msgid "``gf_mesh_fem_get(mesh_fem MF, 'display')``"
msgstr ""

# a9112166c2ac4e2e9601fab2575a257f
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:285
msgid "displays a short summary for a mesh_fem object."
msgstr ""

# 1642549f7690428fa25e116cb95c85a7
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:288
msgid "``m = gf_mesh_fem_get(mesh_fem MF, 'linked mesh')``"
msgstr ""

# 8d12859dea8c4e3da280d7d9a9d4fca1
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:290
msgid "Return a reference to the mesh object linked to <literal>mf</literal>."
msgstr ""

# 7f125f1cbdf94e32b9c5afebf5be4708
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:293
msgid "``m = gf_mesh_fem_get(mesh_fem MF, 'mesh')``"
msgstr ""

# a2924165945848ee86e1a59920cb3ee2
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:295
msgid ""
"Return a reference to the mesh object linked to <literal>mf</literal>. "
"(identical to gf_mesh_get(mesh M, 'linked mesh'))"
msgstr ""

# 666d765bd04f4fe08fefecb1a4be7f64
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:299
msgid ""
"``gf_mesh_fem_get(mesh_fem MF, 'export to vtk',string filename, ... "
"['ascii'], U, 'name'...)``"
msgstr ""

# 46cd61e38fb642ebae2a690530ff492a
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:301
msgid "Export a mesh_fem and some fields to a vtk file."
msgstr ""

# 78171d29080a4e9396ad5040aea1270e
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:303
msgid ""
"The FEM and geometric transformations will be mapped to order 1 or 2 "
"isoparametric Pk (or Qk) FEMs (as VTK does not handle higher order "
"elements). If you need to represent high-order FEMs or high-order "
"geometric transformations, you should consider gf_slice_get(slice S, "
"'export to vtk')."
msgstr ""

# 36555068459f42b38e3ce98b099636e6
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:310
msgid ""
"``gf_mesh_fem_get(mesh_fem MF, 'export to dx',string filename, ...['as', "
"string mesh_name][,'edges']['serie',string "
"serie_name][,'ascii'][,'append'], U, 'name'...)``"
msgstr ""

# 30cc05938c624ec6a811ea43b9edc458
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:312
msgid "Export a mesh_fem and some fields to an OpenDX file."
msgstr ""

# 4777ef99ee194a71869fd4aa835ed0f2
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:314
msgid ""
"This function will fail if the mesh_fem mixes different convex types "
"(i.e. quads and triangles), or if OpenDX does not handle a specific "
"element type (i.e. prism connections are not known by OpenDX)."
msgstr ""

# a7e4840238ad48a69a87bd1c3d86d8bf
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:318
msgid ""
"The FEM will be mapped to order 1 Pk (or Qk) FEMs. If you need to "
"represent high-order FEMs or high-order geometric transformations, you "
"should consider gf_slice_get(slice S, 'export to dx')."
msgstr ""

# 7b9bce4860074f069e96da36d721f669
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:323
msgid ""
"``gf_mesh_fem_get(mesh_fem MF, 'export to pos',string filename[, string "
"name][[,mesh_fem mf1], mat U1, string nameU1[[,mesh_fem mf2], mat U2, "
"string nameU2,...]])``"
msgstr ""

# 48de26c3640d4fe395bf721956cdbe25
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:325
msgid "Export a mesh_fem and some fields to a pos file."
msgstr ""

# 0b76c0a72d3e436fa07ea45165f44490
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:327
msgid ""
"The FEM and geometric transformations will be mapped to order 1 "
"isoparametric Pk (or Qk) FEMs (as GMSH does not handle higher order "
"elements)."
msgstr ""

# 9b3fd978d9ff4515848a25fb103656b9
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:332
msgid "``gf_mesh_fem_get(mesh_fem MF, 'dof_from_im',mesh_im mim[, int p])``"
msgstr ""

# 7bf60c948029484aa46418084cfb346d
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:334
msgid ""
"Return a selection of dof who contribute significantly to the mass-matrix"
" that would be computed with <literal>mf</literal> and the integration "
"method <literal>mim</literal>."
msgstr ""

# 9fad9ab480574433b58c48dc80e415db
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:338
msgid ""
"<literal>p</literal> represents the dimension on what the integration "
"method operates (default <literal>p = mesh dimension</literal>)."
msgstr ""

# c3282a1ef5954fc2982d5295831eb529
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:341
msgid ""
"IMPORTANT: you still have to set a valid integration method on the "
"convexes which are not crosses by the levelset!"
msgstr ""

# c917438086e8479eaf15897f7dbb0f32
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:345
msgid "``U = gf_mesh_fem_get(mesh_fem MF, 'interpolate_convex_data',mat Ucv)``"
msgstr ""

# 14893937e96d4f408c71df78bd38e1f8
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:347
msgid ""
"Interpolate data given on each convex of the mesh to the mesh_fem dof. "
"The mesh_fem has to be lagrangian, and should be discontinuous (typically"
" a FEM_PK(N,0) or FEM_QK(N,0) should be used)."
msgstr ""

# 9c69884df2f4430b9c0d9cb965af2e2b
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:351
msgid ""
"The last dimension of the input vector Ucv should have gf_mesh_get(mesh "
"M, 'max cvid') elements."
msgstr ""

# afe35e9a2f5d4adab0b791b10e040dd2
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:354
msgid ""
"Example of use: gf_mesh_fem_get(mesh_fem MF, 'interpolate_convex_data', "
"gf_mesh_get(mesh M, 'quality'))"
msgstr ""

# 911362cbc79643f9912935e7ff0fc188
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:357
msgid "``z = gf_mesh_fem_get(mesh_fem MF, 'memsize')``"
msgstr ""

# adad71e3a12f42a4b31f6d4c7e82cf9f
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:359
msgid "Return the amount of memory (in bytes) used by the mesh_fem object."
msgstr ""

# 45338ac717554bff8d9c7ba3b276dc21
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:361
msgid "The result does not take into account the linked mesh object."
msgstr ""

# 063d237c945c499e939bcd30fe920aad
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:364
msgid "``gf_mesh_fem_get(mesh_fem MF, 'has_linked_mesh_levelset')``"
msgstr ""

# d7bb4dbd85714f33929420c668ac3119
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:366
msgid "Is a mesh_fem_level_set or not."
msgstr ""

# 5645e09a0ad44c2ab388bf758fc436bd
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:369
msgid "``gf_mesh_fem_get(mesh_fem MF, 'linked_mesh_levelset')``"
msgstr ""

# e62a161baf57422496cdbf121bc58e3f
#: ../source/scilab/cmdref_gf_mesh_fem_get.rst:371
msgid "if it is a mesh_fem_level_set gives the linked mesh_level_set."
msgstr ""

