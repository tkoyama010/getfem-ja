# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-22 15:02+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

# d142c561243f492a85fce996405c46bb
#: ../source/gmm/first-step.rst:11
msgid "First steps with |gmm|"
msgstr ""

# 258bc3ad42d449c19908b95b06e45cd9
#: ../source/gmm/first-step.rst:15
msgid "How can I invert a matrix ?"
msgstr ""

# c30b6e00b68e4dfb9a0927ae902959af
#: ../source/gmm/first-step.rst:17
msgid ""
"It is not possible in |gmm| to invert all kind of matrices. For the "
"moment, the only mean to invert a matrix is to use the dense LU "
"decomposition (thus, only for dense matrices). An example::"
msgstr ""

# eebf836a8dee42b09d9e426e0fc923f6
#: ../source/gmm/first-step.rst:32
msgid ""
"see the section corresponding to dense LU decomposition for more details."
" The type ``gmm::dense_matrix<double>`` can be replaced by "
"``gmm::row_matrix< std::vector<double> >`` or ``gmm::col_matrix< "
"std::vector<double> >``."
msgstr ""

# f6610946377b4f9a9a2f8d0b69652422
#: ../source/gmm/first-step.rst:35
msgid "How can I solve a linear system ?"
msgstr ""

# 17d99160f77c4b98a3762f4d22e9872b
#: ../source/gmm/first-step.rst:37
msgid ""
"You have more than one possibility to solve a linear system. If you have "
"a dense matrix, the best may be to use the LU decomposition. An example::"
msgstr ""

# 3617101ca75245dd863c55545a0ac688
#: ../source/gmm/first-step.rst:54
msgid ""
"If, now, you have a sparse system coming for example from a pde "
"discretization, you have various iterative solvers, with or without "
"preconditioners. This is an example with a precontionned GMRES::"
msgstr ""

# 845d6f8e6c9c48f3929a023bbcba568e
#: ../source/gmm/first-step.rst:75
msgid "How can I transform a vector into a matrix and reshape it ?"
msgstr ""

# e622a9305eb148f589cdd38a0a2f0f57
#: ../source/gmm/first-step.rst:77
msgid ""
"In |gmm|, a vector is not considered as a matrix. If you need to use a "
"vector as a (1 by n) row matrix or (n by 1) column matrix in a "
"computation, you have to use::"
msgstr ""

# 95aecf554cfd47b8a4677098f9cdbed1
#: ../source/gmm/first-step.rst:84
msgid "for instance, you can transform a vector into a dense matrix with::"
msgstr ""

# 257fd507ea934392ba03af09c702142d
#: ../source/gmm/first-step.rst:94
msgid "Then you can also reshape matrix ``M`` with::"
msgstr ""

# 54d7a3580f264808af3b995f96f06af2
#: ../source/gmm/first-step.rst:100
msgid "What is the better way to resize a matrix ?"
msgstr ""

# 8a8642db22034cd3af7cce625af10c62
#: ../source/gmm/first-step.rst:102
msgid ""
"You can change the dimensions of a matrix, if it is not a reference, "
"using::"
msgstr ""

# d4b762a994c140329aa238b49528872d
#: ../source/gmm/first-step.rst:106
msgid ""
"This function respects the intersection between the original matrix and "
"the resized matrix, and new components are set to zero. An important "
"thing is that it is based on the resize method of ``std::vector``, thus "
"no memory free is done when the size of the new matrix is smaller than "
"the original one."
msgstr ""

# b3fc2a2aabbf48bd9ae7254a3b4d1951
#: ../source/gmm/first-step.rst:108
msgid ""
"If you do not need to keep old values of the components, or if you want "
"to really free the surplus of memory, you can resize a matrix using "
"``std::swap`` as follows::"
msgstr ""

# 8d63e5802d1246b186b993d98472d25a
#: ../source/gmm/first-step.rst:116
msgid "Of course, this works also for a vector."
msgstr ""

