# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-22 15:02+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

# 33c399a786cb4b1e82b83d4bd633c4eb
#: ../source/gmm/matrix.rst:10
msgid "Matrix and Vector type provided by |gmm|"
msgstr ""

# 4fd7485b92654b508ae82072e1ae5de2
#: ../source/gmm/matrix.rst:13
msgid ""
"The convention is that any vector or matrix type (except if it is a  "
"reference) can be instantiated with the constructors::"
msgstr ""

# 396665bd474d44b994f93e82b75183ca
#: ../source/gmm/matrix.rst:19
msgid ""
"No other constructor is used inside |gmm| and you should not use any "
"other if you want your code to be compatible with any matrix and vector "
"type."
msgstr ""

# 57a79ffdf35e42abbeb5a1ac400d942f
#: ../source/gmm/matrix.rst:22
msgid ""
"It is assumed that each vector type interfaced with |gmm| allows to "
"access to a component with the following syntax::"
msgstr ""

# 045acfd87476495cadd90638f9c310a5
#: ../source/gmm/matrix.rst:29
msgid ""
"The write access being available if the vector is not a constant "
"reference. For a matrix::"
msgstr ""

# 98fff0774b574713825f25b9cc366ea8
#: ../source/gmm/matrix.rst:34
msgid ""
"Again the write access is available if the matrix is not a const "
"reference. Generally, especially for sparse matrices, this access is not "
"very efficient. Linear algebra procedures access to the components of the"
" vectors and matrices via iterators. (see section  :ref:`gmm-inside`)"
msgstr ""

# a9d38df0d2314c8a97f7c90118b58074
#: ../source/gmm/matrix.rst:36
msgid ""
"It is also not recommended (at all) to use the original copy operator for"
" vectors or matrices. Generally, it will not do the appropriate job. "
"instead, you have to use the method::"
msgstr ""

# e90f4d1f3fe7441e8984d57166b73702
#: ../source/gmm/matrix.rst:41
msgid ""
"which works for all correctly interfaced matrix and vector type, even if "
"``V`` is not of the same type as ``W`` (``V`` could be sparse and ``W`` "
"dense for instance)."
msgstr ""

# 3503ba84593c42cfb04eb295362bed9f
#: ../source/gmm/matrix.rst:43
msgid ""
"in |gmm|, a vector is not a (n by 1) matrix, it is a one dimensional "
"object. If you need to use a vector as a (n by 1) column matrix or a (1 "
"by n) row matrix, you can do it with::"
msgstr ""

# f893379feb3d472d9d99e18e379a83df
#: ../source/gmm/matrix.rst:50
msgid ""
"In the following, the template parameter ``T`` will represent a scalar "
"type like ``double`` or ``std::complex<double>``."
msgstr ""

# dae806592a8f488d8eaf25f1d57b2f90
#: ../source/gmm/matrix.rst:54
msgid "dense vectors"
msgstr ""

# 3769e4d44bd2445bb8d53a8cf0e14a11
#: ../source/gmm/matrix.rst:56
msgid ""
"|gmm| interfaces ``std::vector<T>`` so you can use it as your basic dense"
" vector type. If you need to interface another type of dense vector you "
"can see in ``gmm/gmm_interface.h`` some examples."
msgstr ""

# 4b0fc3832fc444eb89a66d8d89429a77
#: ../source/gmm/matrix.rst:61
msgid "sparse vectors"
msgstr ""

# d9587fa9a4f64e15bae1bed6e18ec011
#: ../source/gmm/matrix.rst:63
msgid ""
"|gmm| provides two types of sparse vectors: ``gmm::wsvector<T>`` and "
"``gmm::rsvector<T>``. ``gmm::wsvector<T>`` is optimized for write "
"operations and ``gmm::rsvector<T>`` is optimized for read operations. It "
"should be appropriate to use ``gmm::wsvector<T>`` for assembling "
"procedures and then to copy the vector in a ``gmm::rsvector<T>`` for the "
"solvers. Those two vector types can be used to create row major or column"
" major matrices (see section  :ref:`gmmracmat`)."
msgstr ""

# adc8e1b6764e41568d139075d47e92b5
#: ../source/gmm/matrix.rst:66
msgid "skyline vectors"
msgstr ""

# f563b9073c584299b90e7d6923de76e9
#: ../source/gmm/matrix.rst:68
msgid ""
"The type ``gmm::slvector<T>`` defines a skyline vector, in the sense that"
" only an interval of this vector is stored. With this type of vector you "
"can build skyline matrices as ``gmm::row_matrix< gmm::slvector<T> >`` "
"(see next section :ref:`gmmracmat`)."
msgstr ""

# 0a4665cd1f4345a5867d49d8e39e9fb3
#: ../source/gmm/matrix.rst:73
msgid "generic row and column matrices"
msgstr ""

# acf80644678f4d2b9f98e6c8abbc1c84
#: ../source/gmm/matrix.rst:75
msgid ""
"|gmm| provides the two following types of matrices: "
"``gmm::row_matrix<VECT>`` and ``gmm::col_matrix<VECT>`` where ``VECT`` "
"should be a valid (i.e. interfaced) vector type. Those two type of "
"matrices store an array of ``VECT`` so the memory is not contiguous. "
"Initializations are::"
msgstr ""

# 8034dbfc992f44f0ad648cfb37e640a8
#: ../source/gmm/matrix.rst:81
msgid ""
"Of course ``gmm::row_matrix<VECT>`` is a row matrix and it is impossible "
"to access to a particular column of this matrix."
msgstr ""

# 5460a89acfac415fa88e5eb69a675703
#: ../source/gmm/matrix.rst:84
msgid ""
"``gmm::mat_nrows(M)`` gives the number of rows of a matrix and "
"``gmm::mat_ncols(M)`` the number of columns."
msgstr ""

# 1bed22c0b7724b7bb2b81238c163f847
#: ../source/gmm/matrix.rst:87
msgid "dense matrices"
msgstr ""

# 44034952964f4f9799f2e42b06f34f07
#: ../source/gmm/matrix.rst:89
msgid "It is recommended to use the type::"
msgstr ""

# 8712794f6b33460f8e97d477efcbe847
#: ../source/gmm/matrix.rst:93
msgid ""
"to represent a dense matrix type because it is compatible with the "
"Fortran format (column major) and some operations are interfaced with "
"blas and Lapack (see section  :ref:`gmm-lapack`). It is considered as a "
"column and row matrix (column preferred) which means that you can access "
"both to the columns and rows."
msgstr ""

# 4c99c12c28314c45a8fe1bd14d50d9cf
#: ../source/gmm/matrix.rst:95
msgid ""
"However, matrix types as ``gmm::row_matrix< std::vector<double> >`` or "
"``gmm::col_matrix< std::vector<double> >`` represent also some dense "
"matrices."
msgstr ""

# fc03fbfde8174ad487dd6a81f74f0d51
#: ../source/gmm/matrix.rst:98
msgid "sparse matrices"
msgstr ""

# 029081ecfbc343e4adcf83a9ba4211a2
#: ../source/gmm/matrix.rst:100
msgid ""
"Similarly, ``gmm::row_matrix< gmm::wsvector<double> >`` or "
"``gmm::col_matrix< gmm::rsvector<double> >`` represents some sparse "
"matrices, but |gmm| provides also two types of classical sparse matrix "
"types::"
msgstr ""

# c4a1156c9b2447b586fc389db35202cd
#: ../source/gmm/matrix.rst:105
msgid ""
"The type ``gmm::csr_matrix<T>`` represents a compressed sparse row matrix"
" and ``gmm::csc_matrix<T>`` a compressed sparse column matrix. The "
"particularity of these two types of matrices is to be read only, in the "
"sense that it is not possible to access at a particular component to "
"write on it (the operation is too expansive). The only write operation "
"permitted is ``gmm::copy``. The right way to use these matrices is first "
"to execute the write operations on another type of matrix like "
"``gmm::row_matrix< gmm::wsvector<double> >`` then to do a copy::"
msgstr ""

# c3200c935ffc41b7841c7b9740adb978
#: ../source/gmm/matrix.rst:117
msgid ""
"Matrices ``gmm::csr_matrix<T>`` and ``gmm::csc_matrix<T>`` have the "
"advantage to have a standard format (interfacable with Fortran code) and "
"to have a compact format (contiguous in memory). To be able to be "
"compatible with Fortran programs a second template parameter exists on "
"these type, you can declare::"
msgstr ""

# 51692d959a324ca096eb7b05bf7c9967
#: ../source/gmm/matrix.rst:122
msgid "The ``1`` means that a shift will be done on all the indices."
msgstr ""

