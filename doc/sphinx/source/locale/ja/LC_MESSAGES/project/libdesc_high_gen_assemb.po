# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-22 15:02+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

# ad8b5e11d5a94221b949aa1e72b83510
#: ../source/project/libdesc_high_gen_assemb.rst:12
msgid "The high-level generic assembly module in |gf|"
msgstr ""

# a7a5e632437e4d209aaa1745d59fbaa9
# 0a15ce74b845442baff4ade95822aa43
#: ../source/project/libdesc_high_gen_assemb.rst:1
#: ../source/project/libdesc_high_gen_assemb.rst:16
msgid "Description"
msgstr ""

# 7e074248f1864710bd55b3595baaaf35
#: ../source/project/libdesc_high_gen_assemb.rst:18
msgid ""
"The high level generic assembly module of |gf| and its weak form language"
" is a key module which allows to describe weak formulation of partial "
"differential equation problems. See the description of the language in "
"the user documentation section :ref:`ud-gasm-high`."
msgstr ""

# 083fc2c08b5b4cec99a3561b3d0096ef
#: ../source/project/libdesc_high_gen_assemb.rst:21
msgid "Files"
msgstr ""

# 49d8a396ad9c49b7b59b6792880ca263
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid "File(s)"
msgstr ""

# 94b63e9399cb4efd8ab266dde9cb2b4a
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ":file:`getfem_generic_assembly.h`"
msgstr ""

# fc0cd26c65e14767b664a52e45d05090
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
"Main header for exported definitions. Only this header has to be included"
" to use the generic assembly. Other headers of the module are for "
"internal use only."
msgstr ""

# 22141636165948c2869c2334e4224fd4
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
":file:`getfem_generic_assembly_tree.h` and "
":file:`getfem_generic_assembly_tree.cc`"
msgstr ""

# c5627bfac5d744de9cabb85821bc0ef9
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
"Definition of the tree structure and basic operations on it, including "
"reading an assembly string and transform it in a syntax tree and make the"
" invert transformation of a tree into a string."
msgstr ""

# 391d3f56c7f4499c974c9d395de0d442
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
":file:`getfem_generic_assembly_fonction_and_operators.h` and "
":file:`getfem_generic_assembly_fonction_and_operators.cc`"
msgstr ""

# e4d27b6c393c439289ffcf789393e9ad
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
"Definition of redefined function and nonlinear operator of the weak form "
"language."
msgstr ""

# 7a992bbcd0524d72b03091095640fba1
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
":file:`getfem_generic_assembly_semantic.h` and "
":file:`getfem_generic_assembly_semantic.cc`"
msgstr ""

# f749dd9bd7c84e42b3e64344b07b6673
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
"Semantic analysis and enrichment of the syntax tree. Include some "
"operations such as making the derivation of a tree with respect to a "
"variable or computing the tree corresponding to the gradient of an "
"expression."
msgstr ""

# d32139744ec6484bbb515a3f07901833
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ":file:`getfem_generic_assembly_workspace.cc`"
msgstr ""

# b6714d47ab6d4512a8ada07b5db41d5b
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
"Methodes of the workspace object (defined in "
":file:`getfem_generic_assembly.h`)."
msgstr ""

# 20f3b4b37e434b3498178923311fff93
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
":file:`getfem_generic_assembly_compile_and_exec.h` and "
":file:`getfem_generic_assembly_compile_and_exec.cc`"
msgstr ""

# 98ac64183dc847ba88f471f131fe09a7
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
"Definition of the optimized instructions, compilation into a sequel of "
"optimize instructions and execution of the instructions on Gauss "
"point/interpolation points."
msgstr ""

# 08414b2c850842a9bbff8760bdacdcf1
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ":file:`getfem_generic_assembly_interpolation.cc`"
msgstr ""

# 55dd7db0eb374bfbabdd3282bdc10e74
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid "Interpolation operations and interpolate transformations."
msgstr ""

# 20ecf90b51474ebe92d8eafa8c0e4f7a
#: ../source/project/libdesc_high_gen_assemb.rst:37
msgid "A few implementation details"
msgstr ""

# df09c5ef9240476cafcf410c6828381d
#: ../source/project/libdesc_high_gen_assemb.rst:39
msgid ""
"The assembly string is transformed in an assembly tree by a set of "
"function in :file:`src/getfem\\_generic\\_assembly.cc`. The process has 6"
" steps:"
msgstr ""

# b36d4b2e2111492ab281ac828562902f
#: ../source/project/libdesc_high_gen_assemb.rst:41
msgid "Lexical analysis with the procedure ``ga_get_token(...)``."
msgstr ""

# 795d8bf5315b4ef8b2d8bc7752ce51ed
#: ../source/project/libdesc_high_gen_assemb.rst:43
msgid ""
"Syntax analysis and transformation into a syntax tree by "
"``ga_read_string(...)``."
msgstr ""

# ad576ed32a0847c7ba3092a92dfcfda2
#: ../source/project/libdesc_high_gen_assemb.rst:45
msgid ""
"Semantic analysis, simplification (pre-computation) of constant "
"expressions and enrichment of the tree by ``ga_semantic_analysis(...)``."
msgstr ""

# 567c7438e0094fd890077057b043f023
#: ../source/project/libdesc_high_gen_assemb.rst:47
msgid ""
"Symbolic (automatic) differentiation of an assembly tree by "
"``ga_derivative(...)``"
msgstr ""

# 59720a42ec974269b64bc84422111e1c
#: ../source/project/libdesc_high_gen_assemb.rst:49
msgid ""
"Symbolic (automatic) gradient computation of an assembly tree by "
"``ga_gradient(...)``"
msgstr ""

# be2bc05c8e0e44659b35986d03974dd8
#: ../source/project/libdesc_high_gen_assemb.rst:51
msgid ""
"Compilation in a sequence of instructions with optimizations by "
"``ga_compile(...)``."
msgstr ""

# 1dd1326026ec4e41ac04e4491b335946
#: ../source/project/libdesc_high_gen_assemb.rst:53
msgid ""
"Execution of the sequence of instructions and assembly by "
"``ga_exec(...)``."
msgstr ""

# 97d5dd9554ba49d092548d5643c85fc7
#: ../source/project/libdesc_high_gen_assemb.rst:55
msgid ""
"These steps are performed only once at the beginning of the assembly. The"
" final tree is compiled in a sequence of optimized instructions which are"
" executed on each Gauss point of each element. The compilation performed "
"some optimizations : repeated terms are automatically detected and "
"evaluated only once, simplifications if the mesh has uniform type of "
"elements, simplifications for vectorized fnite element methods."
msgstr ""

# c8f596d987024aa784b5a5dc51821bb8
#: ../source/project/libdesc_high_gen_assemb.rst:57
msgid ""
"Moreover, there is specifics function for interpolation operations "
"(ga_interpolation(...), ga_interpolation_exec(...), "
"ga_interpolation_Lagrange_fem, ga_interpolation_mti, "
"ga_interpolation_im_data, ...)"
msgstr ""

# 0ec5d036957d4a7a87b5c7e29832770b
#: ../source/project/libdesc_high_gen_assemb.rst:60
msgid "Assembly tree"
msgstr ""

# d830dd0abfe0480cb8b9dcca403130ca
#: ../source/project/libdesc_high_gen_assemb.rst:62
msgid ""
"Assembly strings are transformed into assembly trees by "
"``ga_read_string(...)``. Assembly trees are syntax trees that are "
"progressively enriched in information in the differents steps (semantic "
"analysis, derivation, compilation)."
msgstr ""

# d93ae5fc63494f989e2e669c69700828
#: ../source/project/libdesc_high_gen_assemb.rst:64
msgid ""
"The object ``ga_tree`` represents an assembly tree. It is a copyable "
"object that only contains a pointer to the root of the tree. Each tree "
"node is an object ``ga_tree_node`` that contains the main following "
"information:"
msgstr ""

# fd08071dc1db49e19d730c64fbfaa159
#: ../source/project/libdesc_high_gen_assemb.rst:66
msgid "node_type (function, variable value, variable gradient, operation ...)"
msgstr ""

# 8df2274e864943989a542b39896fbb57
#: ../source/project/libdesc_high_gen_assemb.rst:67
msgid "operation type for operation nodes."
msgstr ""

# 91b7f36b39cd4ad5a00f6feada560000
#: ../source/project/libdesc_high_gen_assemb.rst:68
msgid ""
"assembly tensor: used at execution time by optimized instructions to "
"compute the intermediary results. The final result is in the assembly "
"string of the root node at the end of the execution (for each Gauss "
"point)."
msgstr ""

# 551d5a04e65b41ddb11ad413bae11b24
#: ../source/project/libdesc_high_gen_assemb.rst:69
msgid ""
"term type: value, order one term (ith order one test functions), order "
"two term (with order two test functions) or with both order one and order"
" two test functions (tangent term)."
msgstr ""

# f5817b80c7694c09b7e8332e1b49a9b1
#: ../source/project/libdesc_high_gen_assemb.rst:72
msgid "variable name of tests functions for order 1 or 2 terms."
msgstr ""

# ec6aeb3c7a9e4003b2c6362dd7fe53f4
#: ../source/project/libdesc_high_gen_assemb.rst:73
msgid "pointer to the parent node."
msgstr ""

# 8154eb62aeda42f2a5746ffbc677fa52
#: ../source/project/libdesc_high_gen_assemb.rst:74
msgid "pointers to the children nodes."
msgstr ""

# e3ed0024a03d414f91b5c37ac6343940
#: ../source/project/libdesc_high_gen_assemb.rst:76
msgid ""
"For example, the assembly tree for the assembly string "
"\"a*Grad_Test2_u.Grad_Test_u\" for the stiffness matrix of a Laplacian "
"problem can be represented as follows with its assembly tensors at each "
"node:"
msgstr ""

# 5d8f602e7cbc4dfd881fdc8949b11466
#: ../source/project/libdesc_high_gen_assemb.rst:85
msgid "Assembly tensors"
msgstr ""

# 39838b2884364fc4b9feb323a3a00201
#: ../source/project/libdesc_high_gen_assemb.rst:87
msgid ""
"Assembly tensors are represented on each node by a "
"``bgeot::tensor<double>`` object. However, there is a specific structure "
"in :file:`src/getfem\\_generic\\_assembly.cc` for assembly tensors "
"because there is several format of assembly tensors :"
msgstr ""

# 3f0245c40414487c900ed648eaca9f86
#: ../source/project/libdesc_high_gen_assemb.rst:89
msgid ""
"Normal tensor. The first and second indices may represent the test "
"function local indices if the node represent a first or second order "
"term. Remember that in |gf| all tensors are stored with a Fortran order. "
"This means that for instance a for a :math:`N\\times P\\times Q` tensor "
"one has ``t(i, j, k) = t[i + j*N + k*N*P]``."
msgstr ""

# cad79158081c41379dec41ecc4091fdf
#: ../source/project/libdesc_high_gen_assemb.rst:91
msgid ""
"Copied tensor. When a node is detected to have exactly the same "
"expression compared to an already compiled one, the assembly tensor will "
"contain a pointer to the assembly tensor of the already compiled node. "
"The consequence is that no unnecessary copy is made."
msgstr ""

# 4ec8ce4f0d774b7d987428d548ba6109
#: ../source/project/libdesc_high_gen_assemb.rst:93
msgid ""
"Sparse tensor with a listed sparsity. When working with a vector field, "
"the finite element method is applied on each component. This results on "
"vector base functions having only one nonzero component and some "
"components are duplicated. The tensor are fully represented because it "
"would be difficul to gain in efficiency with that kind of small sparse "
"tensor format. However, some operation can be optimized with the knoledge"
" of a certain sparsity (and duplication). This can change the order of "
"complexity of a reduction. In order to allows this gain in efficiency, "
"the tensor are labellised with some known sparsity format (vectorisation "
"and format coming from operation applied on vectorized tensors). This "
"results in a certain number of sparsity formats that are listed below:"
msgstr ""

# bd13f58daf9949388463c75a355a26ce
#: ../source/project/libdesc_high_gen_assemb.rst:95
msgid ""
"1: Vectorized base sparsity format: The tensor represent a vectorized "
"value. Each value of the condensed tensor is repeated on :math:`Q` "
"components of the vectorized tensor. The mesh dimensions is denoted "
":math:`N`. For instance if :math:`\\varphi_i` are the :math:`M` local "
"base functions on an element and the evaluation is on a Gauss point "
":math:`x`, then the non vectorized tensor is :math:`\\bar{t}(i) = "
"\\varphi_i(x)` and the vectorized one is :math:`t(j,k) = "
"\\varphi_{j/Q}(x) \\delta_{k, j \\mbox{ mod } Q}` where :math:`j/M` is "
"the integer division. For :math:`M=2`, :math:`Q=2` and :math:`N=3` the "
"components of the two tensors are represented in the following table"
msgstr ""

# 8f446df172b84d4fbed3ef92e2ab62a6
# bf15704a25dd470baa1819896a60992c
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid "Scalar tensor"
msgstr ""

# c40a66683dec49cc89f8fde8bb675b8a
# 57e979a70ce944edbb096367405c65e9
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid "Vectorized tensor"
msgstr ""

# 2cf6bafdaac94c978636fea5593e3c87
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ":math:`\\bar{t}(i) = \\varphi_i(x)`"
msgstr ""

# 26fe8b53d0e24060bd8279214c59d780
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ":math:`t(j,k) = \\varphi_{j/Q}(x) \\delta_{k, (j \\mbox{ mod } Q)}`"
msgstr ""

# 5751b30f661d49e2b903ab89c40dbda1
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ":math:`[\\varphi_0(x), \\varphi_1(x)]`"
msgstr ""

# 3877a46ece8e4edda13aaf4128925834
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
":math:`[\\varphi_0(x), 0, \\varphi_1(x), 0, 0, \\varphi_0(x), 0, "
"\\varphi_1(x)]`"
msgstr ""

# 029bf28580494e97aa79c5f2b5bae795
#: ../source/project/libdesc_high_gen_assemb.rst:114
msgid "2: Grad condensed format"
msgstr ""

# 4116ddc751e44b9d9216348eea664af4
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ":math:`\\bar{t}(i,j) = \\partial_j\\varphi_i(x)`"
msgstr ""

# bc77ede7f537454482484d02fa742c1f
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
":math:`t(k,l,m) = \\partial_m\\varphi_{k/Q}(x) \\delta_{l, (m \\mbox{ mod"
" } Q)}`"
msgstr ""

# 52576bf4a5a5498f86644ee7039257b2
#: ../source/project/libdesc_high_gen_assemb.rst:1
msgid ""
":math:`[\\partial_0\\varphi_0(x), \\partial_0\\varphi_1(x),` "
":math:`\\partial_1\\varphi_0(x), \\partial_1\\varphi_1(x),` "
":math:`\\partial_2\\varphi_0(x), \\partial_2\\varphi_1(x)]`"
msgstr ""

# e70e8898fb97411cb6af7c54d7ca0e34
#: ../source/project/libdesc_high_gen_assemb.rst:123
msgid "3: Hessian condensed format"
msgstr ""

# 10b5871acb9a404e9fbedac1dc505e55
#: ../source/project/libdesc_high_gen_assemb.rst:126
msgid ""
"10: Vectorized mass: the tensor represent a scalar product of two "
"vectorised base functions. This means a tensor :math:`t(\\cdot,\\cdot)` "
"where :math:`t(i*Q+k, j*Q+l) = 0` for :math:`k \\ne l` and "
":math:`t(i*Q+k, j*Q+k)` are equals for :math:`0 \\le k < Q`."
msgstr ""

# 6db6b42adbb449f98d499db8ac5ffe6a
#: ../source/project/libdesc_high_gen_assemb.rst:135
msgid "Optimized instructions"
msgstr ""

# 9da2b3538f3c4ba59c6513b5b22bce07
#: ../source/project/libdesc_high_gen_assemb.rst:137
msgid ""
"Optimized instructions for variable evaluation, operations, vector and "
"matrix assembly ... to be described."
msgstr ""

# badef8e079f248268efed4f36b59b7d3
#: ../source/project/libdesc_high_gen_assemb.rst:140
msgid "Predefined functions"
msgstr ""

# 1cc2ffc195d54f4eb130e06b3ca19de2
#: ../source/project/libdesc_high_gen_assemb.rst:147
msgid ""
"Some predefined scalar functions are available in |gf| weak form language"
" in order to describe a weak formulation (or also to make basic algebraic"
" computations). This is limited to scalar functions of one or two "
"arguments. Due to the automatic differentiation used to obtain the "
"tangent system of described problems, the derivative each function have "
"to be available. The principle retained is the following: For each "
"predefined function is available:"
msgstr ""

# f471b394cf48431c991e376ecddd0d80
#: ../source/project/libdesc_high_gen_assemb.rst:143
msgid "A C++ function which computes the value given the argument(s)."
msgstr ""

# 9bdbb7c1de844e2088ff2d45cec5a9d7
#: ../source/project/libdesc_high_gen_assemb.rst:144
msgid ""
"The support of the function in the first each argument in term of a "
"(possibly infinite) interval (this is for simplification of expressions)."
msgstr ""

# 660fe109b44d4835bc45ae5deb59ce72
#: ../source/project/libdesc_high_gen_assemb.rst:146
msgid ""
"The string corresponding of the derivative in terms of already known "
"functions"
msgstr ""

# b271b1330b45481d8475428e37008847
#: ../source/project/libdesc_high_gen_assemb.rst:149
msgid ""
"A new predefined function is easy to add. See init_predefined_functions()"
" in file :file:`src/getfem_generic_assembly.cc`. + describe how to give "
"the derivative ..."
msgstr ""

# 92d88fdc14d645df901bcb71554103c9
#: ../source/project/libdesc_high_gen_assemb.rst:152
msgid "Predefined nonlinear operators"
msgstr ""

# 6531f630356f49778081364b284a11a4
#: ../source/project/libdesc_high_gen_assemb.rst:154
msgid "to be described ..."
msgstr ""

# 55d2822ce1484815b9711a110c945537
#: ../source/project/libdesc_high_gen_assemb.rst:157
msgid "State"
msgstr ""

# fb745233c7964c449040155f80b67c16
#: ../source/project/libdesc_high_gen_assemb.rst:158
msgid "Stable."
msgstr ""

# d4f667b1851d4321b92575a44fd2d242
#: ../source/project/libdesc_high_gen_assemb.rst:161
msgid "Perspectives"
msgstr ""

# 3f23690b89c0417f8d36b16f9aa0c972
#: ../source/project/libdesc_high_gen_assemb.rst:163
msgid "Is a certain extension to complex data possible ?"
msgstr ""

# 5d5777f230554ecdb31aed6d2b8c9b03
#: ../source/project/libdesc_high_gen_assemb.rst:165
msgid ""
"More simplifications : study the possibility to automatically factorize "
"some terms (for instance scalar ones) to reduce the number of operations."
msgstr ""

