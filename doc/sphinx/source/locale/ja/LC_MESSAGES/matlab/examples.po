# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-22 15:02+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

# 19c404c7699049b6879958781faff827
#: ../source/matlab/examples.rst:10
msgid "Examples"
msgstr ""

# fd7522aaa45f45198f6d15f292e50cee
#: ../source/matlab/examples.rst:15
msgid "A step-by-step basic example"
msgstr ""

# 670af95f8d6b4d4485bfd42a4345531c
#: ../source/matlab/examples.rst:17
msgid ""
"This example shows the basic usage of getfem, on the Ã¼ber-canonical "
"problem above all others: solving the :envvar:`Laplacian`, "
":math:`-\\Delta u = f` on a square, with the Dirichlet condition :math:`u"
" = g(x)` on the domain boundary. You can find the **m-file** of this "
"example under the name **demo_step_by_step.m** in the directory "
"``interface/tests/matlab/`` of the |gf| distribution."
msgstr ""

# ad994c396393437aa2fa41f39f8a175d
#: ../source/matlab/examples.rst:23
msgid ""
"The first step is to **create a mesh**. It is possible to create simple "
"structured meshes or unstructured meshes for simple geometries (see "
"``gf_mesh('generate', mesher_object mo, scalar h))``) or to rely on an "
"external mesher (see ``gf_mesh('import', string FORMAT, string "
"FILENAME))``).  For this example, we just consider a regular **cartesian "
"mesh** whose nodes are "
":math:`\\{x_{i=0\\ldots10,j=0..10}=(i/10,j/10)\\}`::"
msgstr ""

# 938bc216301d4f9eb1dba6c6dba2229b
#: ../source/matlab/examples.rst:34
msgid ""
"If you try to look at the value of ``m``, you'll notice that it appears "
"to be a structure containing two integers. The first one is its "
"identifier, the second one is its class-id, i.e. an identifier of its "
"type. This small structure is just an \"handle\" or \"descriptor\" to the"
" real object, which is stored in the |gf| memory and cannot be "
"represented via |Mlab| data structures. Anyway, you can still inspect the"
" |gf| objects via the command ``gf_workspace('stats')``."
msgstr ""

# 8d60fae5f4e148c3a43f0a2fe5fcb6ac
#: ../source/matlab/examples.rst:41
msgid ""
"Now we can try to have a **look at the mesh**, with its vertices "
"numbering and the convexes numbering::"
msgstr ""

# b8ea3270dacc49a4ad1c0e181a76ec7e
#: ../source/matlab/examples.rst:47
msgid ""
"As you can see, the mesh is regular, and the numbering of its nodes and "
"convexes is also regular (this is guaranteed for cartesian meshes, but do"
" not hope a similar numbering for the degrees of freedom)."
msgstr ""

# a4e296075a634f90a859c288fe657ae4
#: ../source/matlab/examples.rst:51
msgid ""
"The next step is to **create a mesh_fem object**. This one links a mesh "
"with a set of FEM::"
msgstr ""

# e8060bac4a4e4fee8ad533c5312794a7
#: ../source/matlab/examples.rst:58
msgid ""
"The first instruction builds a new |mlab_mf| object, the second argument "
"specifies that this object will be used to interpolate scalar fields "
"(since the unknown :math:`u` is a scalar field). The second instruction "
"assigns the :math:`Q^2` FEM to every convex (each basis function is a "
"polynomial of degree 4, remember that :math:`P^k\\Rightarrow` polynomials"
" of degree :math:`k`, while :math:`Q^k\\Rightarrow` polynomials of degree"
" :math:`2k`). As :math:`Q^2` is a polynomial FEM, you can view the "
"expression of its basis functions on the reference convex::"
msgstr ""

# 01e23e4fc0cf427f896240f4cc94e9c8
#: ../source/matlab/examples.rst:79
msgid ""
"It is also possible to make use of the \"object oriented\" features of "
"|mlab|. As you may have noticed, when a class \"foo\" is provided by the "
"|gfi|, it is build with the function ``gf_foo``, and manipulated with the"
" functions ``gf_foo_get`` and ``gf_foo_set``. But (with matlab 6.x and "
"better) you may also create the object with the ``gfFoo`` constructor , "
"and manipulated with the ``get(..)`` and ``set(..)`` methods. For "
"example, the previous steps could have been::"
msgstr ""

# 33594aff072b4bbc89e95c01ea9b644d
#: ../source/matlab/examples.rst:99
msgid ""
"Now, in order to perform numerical integrations on ``mf``, we need to "
"**build a mesh_im object**::"
msgstr ""

# 7e8fa4a5c431477a9c4dc9854651ca17
#: ../source/matlab/examples.rst:105
msgid ""
"The integration method will be used to compute the various integrals on "
"each element: here we choose to perform exact computations (no "
":envvar:`quadrature formula`), which is possible since the geometric "
"transformation of these convexes from the reference convex is linear "
"(this is true for all simplices, and this is also true for the "
"parallelepipeds of our regular mesh, but it is not true for general "
"quadrangles), and the chosen FEM is polynomial. Hence it is possible to "
"analytically integrate every basis function/product of basis "
"functions/gradients/etc. There are many alternative FEM methods and "
"integration methods (see :ref:`ud`)."
msgstr ""

# eaea8e114c004fc68b6e1cd9b4883ded
#: ../source/matlab/examples.rst:115
msgid ""
"Note however that in the general case, approximate integration methods "
"are a better choice than exact integration methods."
msgstr ""

# 8fb2c60efc364842b75ccf0c26a95065
#: ../source/matlab/examples.rst:118
msgid ""
"Now we have to **find the** \":envvar:`boundary`\" **of the domain**, in "
"order to set a Dirichlet condition. A mesh object has the ability to "
"store some sets of convexes and convex faces. These sets (called "
"\"regions\") are accessed via an integer #id::"
msgstr ""

# f9ec3881720245bb932ab7e84eb94fa8
#: ../source/matlab/examples.rst:129
msgid ""
"Here we find the faces of the convexes which are on the boundary of the "
"mesh (i.e. the faces which are not shared by two convexes)."
msgstr ""

# 4d6fc893762f4920883cc4c62d3b1e4d
# 554309a180d148ccbea0ce60ba62337d
#: ../source/matlab/examples.rst ../source/matlab/examples.rst:132
msgid "Remark:"
msgstr ""

# 113036b2866e4b44a78862e7abeed420
#: ../source/matlab/examples.rst:134
msgid ""
"we could have used ``gf_mesh_get(m, 'OuTEr_faCes')``, as the interface is"
" case-insensitive, and whitespaces can be replaced by underscores."
msgstr ""

# b716791da159448d9c7936434c746b44
#: ../source/matlab/examples.rst:137
msgid ""
"The array ``border`` has two rows, on the first row is a convex number, "
"on the second row is a face number (which is local to the convex, there "
"is no global numbering of faces). Then this set of faces is assigned to "
"the region number 42."
msgstr ""

# 4597846b9cda486e96801efd9897d471
#: ../source/matlab/examples.rst:141
msgid ""
"At this point, we just have to desribe the model and run the solver to "
"get the solution! The \":envvar:`model`\" is created with the "
"``gf_model`` (or ``gfModel``) constructor. A model is basically an object"
" which build a global linear system (tangent matrix for non-linear "
"problems) and its associated right hand side. Typical modifications are "
"insertion of the stiffness matrix for the problem considered (linear "
"elasticity, laplacian, etc), handling of a set of contraints, Dirichlet "
"condition, addition of a source term to the right hand side etc. The "
"global tangent matrix and its right hand side are stored in the "
"\":envvar:`model`\" structure."
msgstr ""

# 415f20fb54444fefa65705c224c0b6ab
#: ../source/matlab/examples.rst:151
msgid ""
"Let us build a problem with an easy solution: :math:`u=x(x-1)y(y-1)+x^5`,"
" then we have :math:`\\Delta u=2(x^2+y^2)-2(x+y)+20x^3` (the FEM won't be"
" able to catch the exact solution since we use a :math:`Q^2` method)."
msgstr ""

# 2ecb5ad92c4841f998a10e2bd8c11688
#: ../source/matlab/examples.rst:155
msgid "We start with an empty real model::"
msgstr ""

# 11193c2d61534857add640edee1cb42a
#: ../source/matlab/examples.rst:160
msgid ""
"(a model is either ``'real'`` or ``'complex'``). And we declare that "
"``u`` is an unknown of the system on the finite element method `mf` by::"
msgstr ""

# c7ada89bc0914598b3d16f79db1b072a
#: ../source/matlab/examples.rst:167
msgid ""
"Now, we add a \"generic elliptic\" brick, which handles "
":math:`-\\nabla\\cdot(A:\\nabla u) = \\ldots` problems, where :math:`A` "
"can be a scalar field, a matrix field, or an order 4 tensor field. By "
"default, :math:`A=1`. We add it on our main variable ``u`` with::"
msgstr ""

# 2b5b94866aeb4c9cba647d449b4067de
#: ../source/matlab/examples.rst:176
msgid "Next we add a Dirichlet condition on the domain boundary::"
msgstr ""

# 225fb15e57d445899edb98bef7b5687f
#: ../source/matlab/examples.rst:184
msgid ""
"The two first lines defines a data of the model which represents the "
"value of the Dirichlet condition. The third one add a Dirichlet condition"
" to the variable ``u`` on the boundary number ``42``. The dirichlet "
"condition is imposed with lagrange multipliers. Another possibility is to"
" use a penalization. A |mlab_mf| argument is also required, as the "
"Dirichlet condition :math:`u=g` is imposed in a weak form "
":math:`\\int_\\Gamma u(x)v(x) = \\int_\\Gamma g(x)v(x) ~ \\forall v` "
"where :math:`v` is taken in the space of multipliers given by here by "
"``mf``."
msgstr ""

# abea2c5094a34d9aae43f7c0f63c95cc
#: ../source/matlab/examples.rst:195
msgid ""
"the polynomial expression was interpolated on ``mf``. It is possible only"
" if ``mf`` is of Lagrange type. In this first example we use the same "
"|mlab_mf| for the unknown and for the data such as ``g``, but in the "
"general case, ``mf`` won't be Lagrangian and another (Lagrangian) |mf| "
"will be used for the description of Dirichlet conditions, source terms "
"etc."
msgstr ""

# b987c0598eeb44adb709148cc0a904a7
#: ../source/matlab/examples.rst:201
msgid "A source term can be added with the following lines::"
msgstr ""

# 533f42bf0d4343b4a50916f479bea879
#: ../source/matlab/examples.rst:208
msgid ""
"It only remains now to launch the solver. The linear system is assembled "
"and solve with the instruction::"
msgstr ""

# 0e6c17922ffd4bff9d4f814a90606bb6
#: ../source/matlab/examples.rst:214
msgid ""
"The model now contains the solution (as well as other things, such as the"
" linear system which was solved). It is extracted, a display into a "
"|mlab| figure::"
msgstr ""

# d7d7d10b8c37413b89fb342978cbe068
#: ../source/matlab/examples.rst:224
msgid "Another Laplacian with exact solution"
msgstr ""

# ef4118c4f1cb4ae29bb01236cbc4a9a1
#: ../source/matlab/examples.rst:226
msgid "This is the :file:`tests/matlab/demo_laplacian.m` example."
msgstr ""

# c63f34ed3f0a493aaec5f46d20859095
#: ../source/matlab/examples.rst:232
msgid "Linear and non-linear elasticity"
msgstr ""

# 549d89d3f09844348cbd77c7e25192cf
#: ../source/matlab/examples.rst:234
msgid ""
"This example uses a mesh that was generated with `GiD`_. The object is "
"meshed with quadratic tetrahedrons. You can find the ``m-file`` of this "
"example under the name :file:`demo_tripod.m` in the directory "
":file:`tests/matlab` of the toolbox distribution."
msgstr ""

# 850f52a6fab041d48e9f204d7ebc9418
#: ../source/matlab/examples.rst:241
msgid "Here is the final figure, displaying the :envvar:`Von Mises` stress:"
msgstr ""

# d56f5c1ede6942aa84f7f79b6114c163
#: ../source/matlab/examples.rst:248
msgid "deformed tripod"
msgstr ""

# 312de291e10643e3bbc9e9813a1591e0
#: ../source/matlab/examples.rst:252
msgid "Avoiding the bricks framework"
msgstr ""

# dd3f06500cd24d28a7ed69bf1720750d
#: ../source/matlab/examples.rst:254
msgid ""
"The model bricks are very convenient, as they hide most of the details of"
" the assembly of the final linear systems. However it is also possible to"
" stay at a lower level, and handle the assembly of linear systems, and "
"their resolution, directly in |mlab|. For example, the demonstration "
":file:`demo_tripod_alt.m` is very similar to the :file:`demo_tripod.m` "
"except that the assembly is explicit::"
msgstr ""

# 4dfa6e4c8cd64e4fa0d7484dac5a1138
#: ../source/matlab/examples.rst:284
msgid ""
"In |gfi|, the assembly of vectors, and matrices is done via the "
"``gf_asm`` function. The Dirichlet condition :math:`u(x) = r(x)` is "
"handled in the weak form :math:`\\int (h(x)u(x)).v(x) = \\int "
"r(x).v(x)\\quad \\forall v` (where :math:`h(x)` is a :math:`3\\times3` "
"matrix field -- here it is constant and equal to the identity). The "
"reduced system ``KK UU = FF`` is then built via the elimination of "
"Dirichlet constraints from the original system. Note that it might be "
"more efficient (and simpler) to deal with Dirichlet condition via a "
"penalization technique."
msgstr ""

# f62cc299de264ef5aa37508aee409133
#: ../source/matlab/examples.rst:295
msgid "Other examples"
msgstr ""

# 185b5a58f697413f95a21e73a645dd1c
#: ../source/matlab/examples.rst:297
msgid ""
"the :file:`demo_refine.m` script shows a simple 2D or 3D bar whose "
"extremity is clamped. An adaptative refinement is used to obtain a better"
" approximation in the area where the stress is singular (the transition "
"between the clamped area and the neumann boundary)."
msgstr ""

# 85416061ca9b4d379f8927b32c796142
#: ../source/matlab/examples.rst:302
msgid ""
"the :file:`demo_nonlinear_elasticity.m` script shows a 3D bar which is is"
" bended and twisted. This is a quasi-static problem as the deformation is"
" applied in many steps. At each step, a non-linear (large deformations) "
"elasticity problem is solved."
msgstr ""

# 207c4c5253904eb885403dd1377fdb5a
#: ../source/matlab/examples.rst:307
msgid ""
"the :file:`demo_stokes_3D_tank.m` script shows a Stokes (viscous fluid) "
"problem in a tank. The :file:`demo_stokes_3D_tank_draw.m` shows how to "
"draw a nice plot of the solution, with mesh slices and stream lines. Note"
" that the :file:`demo_stokes_3D_tank_alt.m` is the old example, which "
"uses the deprecated ``gf_solve`` function."
msgstr ""

# 062c721239af4870b497e8a2e39abb5c
#: ../source/matlab/examples.rst:313
msgid ""
"the :file:`demo_bilaplacian.m` script is just an adaption of the |gf| "
"example :file:`tests/bilaplacian.cc`. Solve the bilaplacian (or a "
"Kirchhoff-Love plate model) on a square."
msgstr ""

# 675b8e19123c4ee99986710cf13cdf51
#: ../source/matlab/examples.rst:317
msgid ""
"the :file:`demo_plasticity.m` script is an adaptation of the |gf| example"
" :file:`tests/plasticity.cc`: a 2D or 3D bar is bended in many steps, and"
" the plasticity of the material is taken into account (plastification "
"occurs when the material's Von Mises exceeds a given threshold)."
msgstr ""

# fb89c1d28bc6406599fb6e7d00ba9df4
#: ../source/matlab/examples.rst:322
msgid ""
"the :file:`demo_wave2D.m` is a 2D scalar wave equation example "
"(diffraction of a plane wave by a cylinder), with high order geometric "
"transformations and high order FEMs."
msgstr ""

# cd6d5a4a458b425d96be0a238df0952e
#: ../source/matlab/examples.rst:328
msgid "Using Matlab Object-Oriented features"
msgstr ""

# 44c7af4dda384e2d86750ae97759fa36
#: ../source/matlab/examples.rst:330
msgid ""
"The basic functions of the |gf| toolbox do not use any advanced |mlab| "
"features (except that the handles to getfem objects are stored in a small"
" |mlab| structure). But the toolbox comes with a set of |Mlab| objects, "
"which encapsulate the handles and make them look as real |mlab| objects. "
"The aim is not to provide extra-functionalities, but to have a better "
"integration of the toolbox with |mlab|."
msgstr ""

# 9b36b6e3d72143b78692e8ea6b2cce00
#: ../source/matlab/examples.rst:337
msgid "Here is an example of its use::"
msgstr ""

# 9a2a67269fa8409580b5686089ca8984
#: ../source/matlab/examples.rst:358
msgid "Refer to the OO-commands reference :ref:`mlab-oocmd` for more details."
msgstr ""

