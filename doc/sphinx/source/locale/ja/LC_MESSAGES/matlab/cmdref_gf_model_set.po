# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-22 15:02+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

# 973b2f0eb404451fa2fb2e4bfacef2c4
#: ../source/matlab/cmdref_gf_model_set.rst:8
msgid "gf_model_set"
msgstr ""

# 16387398252f48e09364edec6bcb3837
#: ../source/matlab/cmdref_gf_model_set.rst:10
msgid "**Synopsis**"
msgstr ""

# 428a09a382d64e7d9da3adaa98ecaed9
#: ../source/matlab/cmdref_gf_model_set.rst:136
msgid "**Description :**"
msgstr ""

# aa76bf0860c943d288b9029ae8d88f56
#: ../source/matlab/cmdref_gf_model_set.rst:139
msgid "Modifies a model object."
msgstr ""

# d7f32a895329496b955377609bc10946
#: ../source/matlab/cmdref_gf_model_set.rst:142
msgid "**Command list :**"
msgstr ""

# f3057236deb945d1ac990509c553f5ba
#: ../source/matlab/cmdref_gf_model_set.rst:146
msgid "``gf_model_set(model M, 'clear')``"
msgstr ""

# bac165848f6c45a592be3d2dbfb3bab1
#: ../source/matlab/cmdref_gf_model_set.rst:148
msgid "Clear the model."
msgstr ""

# f1f4cb9899a44512aa602589229735dc
#: ../source/matlab/cmdref_gf_model_set.rst:151
msgid "``gf_model_set(model M, 'add fem variable', string name, mesh_fem mf)``"
msgstr ""

# a356ec0dc63344d983a3d91a2b0d3b12
#: ../source/matlab/cmdref_gf_model_set.rst:153
msgid ""
"Add a variable to the model linked to a mesh_fem. `name` is the variable "
"name."
msgstr ""

# 96c7a132d6b944aba91b3de3308bf943
#: ../source/matlab/cmdref_gf_model_set.rst:157
msgid ""
"``gf_model_set(model M, 'add filtered fem variable', string name, "
"mesh_fem mf, int region)``"
msgstr ""

# c568855a67784cfbb0325e9728ada5f6
#: ../source/matlab/cmdref_gf_model_set.rst:159
msgid ""
"Add a variable to the model linked to a mesh_fem. The variable is "
"filtered in the sense that only the dof on the region are considered. "
"`name` is the variable name."
msgstr ""

# b6e3c275385245b99ced8adc6079d2ee
#: ../source/matlab/cmdref_gf_model_set.rst:164
msgid "``gf_model_set(model M, 'add variable', string name, sizes)``"
msgstr ""

# fcdb7fd8dfc94016a36eb150de1add9a
#: ../source/matlab/cmdref_gf_model_set.rst:166
msgid ""
"Add a variable to the model of constant sizes. `sizes` is either a "
"integer (for a scalar or vector variable) or a vector of dimensions for a"
" tensor variable. `name` is the variable name."
msgstr ""

# 94683bb114c44a94ab4fb40476672ef7
#: ../source/matlab/cmdref_gf_model_set.rst:171
msgid "``gf_model_set(model M, 'delete variable', string name)``"
msgstr ""

# 74d7a7762e2f486582e4414332261591
# 4d9560ae82cb4f9ca07d5b4802c113cc
#: ../source/matlab/cmdref_gf_model_set.rst:173
#: ../source/matlab/cmdref_gf_model_set.rst:263
msgid "Delete a variable or a data from the model."
msgstr ""

# 9e749f63fe27413c97a544dd23faae67
#: ../source/matlab/cmdref_gf_model_set.rst:176
msgid "``gf_model_set(model M, 'resize variable', string name, sizes)``"
msgstr ""

# 3a847f2b75e448208aec349bd893f701
#: ../source/matlab/cmdref_gf_model_set.rst:178
msgid ""
"Resize a  constant size variable of the model.  `sizes` is either a "
"integer (for a scalar or vector variable) or a vector of dimensions for a"
" tensor variable. `name` is the variable name."
msgstr ""

# a341e4944cdb43b7a06f7e057dec4f38
#: ../source/matlab/cmdref_gf_model_set.rst:183
msgid ""
"``gf_model_set(model M, 'add multiplier', string name, mesh_fem mf, "
"string primalname[, mesh_im mim, int region])``"
msgstr ""

# a34c160bae7244ad895ce68e4461d15f
#: ../source/matlab/cmdref_gf_model_set.rst:185
msgid ""
"Add a particular variable linked to a fem being a multiplier with respect"
" to a primal variable. The dof will be filtered with the "
"``gmm::range_basis`` function applied on the terms of the model which "
"link the multiplier and the primal variable. This in order to retain only"
" linearly independent constraints on the primal variable. Optimized for "
"boundary multipliers."
msgstr ""

# 9c9380875b6b4a1a9eb4035551f84779
#: ../source/matlab/cmdref_gf_model_set.rst:193
msgid "``gf_model_set(model M, 'add im data', string name, mesh_imd mimd)``"
msgstr ""

# 7d3cfc4e4c9e4726a521455ae40e4258
#: ../source/matlab/cmdref_gf_model_set.rst:195
msgid "Add a data set to the model linked to a mesh_imd. `name` is the data name."
msgstr ""

# cf7998661f58459d940ee823931b4d56
#: ../source/matlab/cmdref_gf_model_set.rst:199
msgid ""
"``gf_model_set(model M, 'add fem data', string name, mesh_fem mf[, "
"sizes])``"
msgstr ""

# 564ddb4304de40e2827884fe0159995b
#: ../source/matlab/cmdref_gf_model_set.rst:201
msgid ""
"Add a data to the model linked to a mesh_fem. `name` is the data name, "
"`sizes` an optional parameter which is either an integer  or a vector of "
"suplementary dimensions with respect to `mf`."
msgstr ""

# aacf5f164bde4af887395beabf02d4d0
#: ../source/matlab/cmdref_gf_model_set.rst:206
msgid ""
"``gf_model_set(model M, 'add initialized fem data', string name, mesh_fem"
" mf, vec V[, sizes])``"
msgstr ""

# 2f3b85a63feb41798b805edca22fd5c3
#: ../source/matlab/cmdref_gf_model_set.rst:208
msgid ""
"Add a data to the model linked to a mesh_fem. `name` is the data name. "
"The data is initiakized with `V`. The data can be a scalar or vector "
"field. `sizes` an optional parameter which is either an integer or a "
"vector of suplementary dimensions with respect to `mf`."
msgstr ""

# e6cd4212977f4833a68253be17f24a54
#: ../source/matlab/cmdref_gf_model_set.rst:214
msgid "``gf_model_set(model M, 'add data', string name, int size)``"
msgstr ""

# 965bfc3bc72a4892a87483b3c709cde7
#: ../source/matlab/cmdref_gf_model_set.rst:216
msgid ""
"Add a fixed size data to the model.  `sizes` is either a integer (for a "
"scalar or vector data) or a vector of dimensions for a tensor data. "
"`name` is the data name."
msgstr ""

# 16aeee50a6144e32a85e596b14af7629
#: ../source/matlab/cmdref_gf_model_set.rst:221
msgid "``gf_model_set(model M, 'add macro', string name, string expr)``"
msgstr ""

# 7f6ac36990ab44deb0693eafbd6ae73a
#: ../source/matlab/cmdref_gf_model_set.rst:223
msgid ""
"Define a new macro for the high generic assembly language. The name "
"include the parameters. For instance name='sp(a,b)', expr='a.b' is a "
"valid definition. Macro without parameter can also be defined. For "
"instance name='x1', expr='X[1]' is valid. Teh form name='grad(u)', "
"expr='Grad_u' is also allowed but in that case, the parameter 'u' will "
"only be allowed to be a variable name when using the macro. Note that "
"macros can be directly defined inside the assembly strings with the "
"keyword 'Def'."
msgstr ""

# 6686d6b4616c40d8a462455fde22fe01
#: ../source/matlab/cmdref_gf_model_set.rst:234
msgid "``gf_model_set(model M, 'del macro', string name)``"
msgstr ""

# 4bc898551ed541a19bc66f4bcca84534
#: ../source/matlab/cmdref_gf_model_set.rst:236
msgid "Delete a previously defined macro for the high generic assembly language."
msgstr ""

# f93c1bfda78f421fb0c3b47a615163c1
#: ../source/matlab/cmdref_gf_model_set.rst:240
msgid ""
"``gf_model_set(model M, 'add initialized data', string name, vec V[, "
"sizes])``"
msgstr ""

# 0a4f37303c0b42449749f486cf109efa
#: ../source/matlab/cmdref_gf_model_set.rst:242
msgid ""
"Add an initialized fixed size data to the model. `sizes` an optional "
"parameter which is either an integer  or a vector dimensions that "
"describes the format of the data. By default, the data is considered to b"
" a vector field. `name` is the data name and `V` is the value of the "
"data."
msgstr ""

# fe6aea606282473a8b34980fefd3f848
#: ../source/matlab/cmdref_gf_model_set.rst:249
msgid "``gf_model_set(model M, 'variable', string name, vec V)``"
msgstr ""

# c6465eca39e64be4b2d29dd2c229ae0a
#: ../source/matlab/cmdref_gf_model_set.rst:251
msgid "Set the value of a variable or data. `name` is the data name."
msgstr ""

# 920d02fe03d04a56af48130bb2bdb7e9
#: ../source/matlab/cmdref_gf_model_set.rst:254
msgid "``gf_model_set(model M, 'to variables', vec V)``"
msgstr ""

# 197ddc4433ce4cd4912feb38bb1ac28f
#: ../source/matlab/cmdref_gf_model_set.rst:256
msgid ""
"Set the value of the variables of the model with the vector `V`. "
"Typically, the vector `V` results of the solve of the tangent linear "
"system (useful to solve your problem with you own solver)."
msgstr ""

# 02d1d98e33104410bf20f1b5661a1895
#: ../source/matlab/cmdref_gf_model_set.rst:261
msgid "``gf_model_set(model M, 'delete brick', int ind_brick)``"
msgstr ""

# ecbf6a9ecdb941f8aa845a1d0131d5ff
#: ../source/matlab/cmdref_gf_model_set.rst:266
msgid ""
"``gf_model_set(model M, 'define variable group', string name[, string "
"varname, ...])``"
msgstr ""

# 448dd5b7051941d6899d1adb37c2c9cd
#: ../source/matlab/cmdref_gf_model_set.rst:268
msgid ""
"Defines a group of variables for the interpolation (mainly for the "
"raytracing interpolation transformation."
msgstr ""

# d66935b63a75404fbe22e8708c03303a
#: ../source/matlab/cmdref_gf_model_set.rst:272
msgid ""
"``gf_model_set(model M, 'add elementary rotated RT0 projection', string "
"transname)``"
msgstr ""

# 59c84409024e4d82b5b2ee252d600780
#: ../source/matlab/cmdref_gf_model_set.rst:274
msgid "Experimental method ..."
msgstr ""

# ff544ab01d4447669cfc6fca19c94d1c
#: ../source/matlab/cmdref_gf_model_set.rst:277
msgid ""
"``gf_model_set(model M, 'add interpolate transformation from expression',"
" string transname, mesh source_mesh, mesh target_mesh, string expr)``"
msgstr ""

# a5f5d68183de4bf4ab62044da96e3926
#: ../source/matlab/cmdref_gf_model_set.rst:279
msgid ""
"Add a transformation to the model from mesh `source_mesh` to mesh "
"`target_mesh` given by the expression `expr` which corresponds to a high-"
"level generic assembly expression which may contains some variable of the"
" model. CAUTION: the derivative of the transformation with used variable "
"is taken into account in the computation of the tangen system. However, "
"order two derivative is not implemented, so such tranformation is not "
"allowed in the definition of a potential."
msgstr ""

# fac690df12cf4023b14c9d19861a515d
#: ../source/matlab/cmdref_gf_model_set.rst:289
msgid ""
"``gf_model_set(model M, 'add element extrapolation transformation', "
"string transname, mesh source_mesh, mat elt_corr)``"
msgstr ""

# 7c0621ddc1b34e13b81f82a9c167cd39
#: ../source/matlab/cmdref_gf_model_set.rst:291
msgid ""
"Add a special interpolation transformation which represents the identity "
"transformation but allows to evaluate the expression on another element "
"than the current element by polynomial extrapolation. It is used for "
"stabilization term in fictitious domain applications. the array elt_cor "
"should be a two entry array whose first line contains the elements "
"concerned by the transformation and the second line the respective "
"elements on which the extrapolation has to be made. If an element is not "
"listed in elt_cor the evaluation is just made on the current element."
msgstr ""

# b3e81adc9ea54961a895abc441ef7921
#: ../source/matlab/cmdref_gf_model_set.rst:302
msgid ""
"``gf_model_set(model M, 'set element extrapolation correspondance', "
"string transname, mat elt_corr)``"
msgstr ""

# 0dbc77d2f7584be7bef01199c74e7aac
#: ../source/matlab/cmdref_gf_model_set.rst:304
msgid ""
"Change the correspondance map of an element extrapolation interpolate "
"transformation."
msgstr ""

# c69207bc5c95479d92a54a4155e6185a
#: ../source/matlab/cmdref_gf_model_set.rst:308
msgid ""
"``gf_model_set(model M, 'add raytracing transformation', string "
"transname, scalar release_distance)``"
msgstr ""

# 550eefa978a944f6b9f31ce71fb94d3d
#: ../source/matlab/cmdref_gf_model_set.rst:310
msgid ""
"Add a raytracing interpolate transformation called `transname` to a model"
" to be used by the generic assembly bricks. CAUTION: For the moment, the "
"derivative of the transformation is not taken into account in the model "
"solve."
msgstr ""

# 029dd313fdf444d2bd64e0ecac59c6b2
#: ../source/matlab/cmdref_gf_model_set.rst:316
msgid ""
"``gf_model_set(model M, 'add master contact boundary to raytracing "
"transformation', string transname, mesh m, string dispname, int region)``"
msgstr ""

# 9a98a58c8e754ec8a04de9f5c3909b17
#: ../source/matlab/cmdref_gf_model_set.rst:318
msgid ""
"Add a master contact boundary with corresponding displacement variable "
"`dispname` on a specific boundary `region` to an existing raytracing "
"interpolate transformation called `transname`."
msgstr ""

# bd84897937934cb49bebfeab9ca618ff
#: ../source/matlab/cmdref_gf_model_set.rst:323
msgid ""
"``gf_model_set(model M, 'add slave contact boundary to raytracing "
"transformation', string transname, mesh m, string dispname, int region)``"
msgstr ""

# 3e5b64e359974982ae4d42938d7856c5
#: ../source/matlab/cmdref_gf_model_set.rst:325
msgid ""
"Add a slave contact boundary with corresponding displacement variable "
"`dispname` on a specific boundary `region` to an existing raytracing "
"interpolate transformation called `transname`."
msgstr ""

# a5fd24b0410f45d6b2f1a66097d3345a
#: ../source/matlab/cmdref_gf_model_set.rst:330
msgid ""
"``gf_model_set(model M, 'add rigid obstacle to raytracing "
"transformation', string transname, string expr, int N)``"
msgstr ""

# a1980990024d4ea7848eeafa7151b985
#: ../source/matlab/cmdref_gf_model_set.rst:332
msgid ""
"Add a rigid obstacle whose geometry corresponds to the zero level-set of "
"the high-level generic assembly expression `expr` to an existing "
"raytracing interpolate transformation called `transname`."
msgstr ""

# 530d88823fc24d5d9534b3f87fcffc39
#: ../source/matlab/cmdref_gf_model_set.rst:338
msgid ""
"``gf_model_set(model M, 'add projection transformation', string "
"transname, scalar release_distance)``"
msgstr ""

# f03275061b9e444fa5389376eda69ab8
#: ../source/matlab/cmdref_gf_model_set.rst:340
msgid ""
"Add a projection interpolate transformation called `transname` to a model"
" to be used by the generic assembly bricks. CAUTION: For the moment, the "
"derivative of the transformation is not taken into account in the model "
"solve."
msgstr ""

# a4aef38813284a4996034153479ef8cf
#: ../source/matlab/cmdref_gf_model_set.rst:346
msgid ""
"``gf_model_set(model M, 'add master contact boundary to projection "
"transformation', string transname, mesh m, string dispname, int region)``"
msgstr ""

# 2f4f1d874f0c41118181610000ffa72f
#: ../source/matlab/cmdref_gf_model_set.rst:348
msgid ""
"Add a master contact boundary with corresponding displacement variable "
"`dispname` on a specific boundary `region` to an existing projection "
"interpolate transformation called `transname`."
msgstr ""

# dd4791e7385c4966868dd9f21e092216
#: ../source/matlab/cmdref_gf_model_set.rst:353
msgid ""
"``gf_model_set(model M, 'add slave contact boundary to projection "
"transformation', string transname, mesh m, string dispname, int region)``"
msgstr ""

# c49e3bede3254ed58fdbc3c672d9c10b
#: ../source/matlab/cmdref_gf_model_set.rst:355
msgid ""
"Add a slave contact boundary with corresponding displacement variable "
"`dispname` on a specific boundary `region` to an existing projection "
"interpolate transformation called `transname`."
msgstr ""

# 04e471a45c7a41d7a95609c7bafeae7b
#: ../source/matlab/cmdref_gf_model_set.rst:360
msgid ""
"``gf_model_set(model M, 'add rigid obstacle to projection "
"transformation', string transname, string expr, int N)``"
msgstr ""

# f763b42c172149e182cecb4a7b73c560
#: ../source/matlab/cmdref_gf_model_set.rst:362
msgid ""
"Add a rigid obstacle whose geometry corresponds to the zero level-set of "
"the high-level generic assembly expression `expr` to an existing "
"projection interpolate transformation called `transname`."
msgstr ""

# b8ce7001deac4acb9aed6f9cb58906db
#: ../source/matlab/cmdref_gf_model_set.rst:368
msgid ""
"``ind = gf_model_set(model M, 'add linear term', mesh_im mim, string "
"expression[, int region[, int is_symmetric[, int is_coercive]]])``"
msgstr ""

# ebc7a7f4e6b743df97356fd1c2793977
#: ../source/matlab/cmdref_gf_model_set.rst:370
msgid ""
"Adds a matrix term given by the assembly string `expr` which will be "
"assembled in region `region` and with the integration method `mim`. Only "
"the matrix term will be taken into account, assuming that it is linear. "
"The advantage of declaring a term linear instead of nonlinear is that it "
"will be assembled only once and no assembly is necessary for the "
"residual. Take care that if the expression contains some variables and if"
" the expression is a potential or of first order (i.e. describe the weak "
"form, not the derivative of the weak form), the expression will be "
"derivated with respect to all variables. You can specify if the term is "
"symmetric, coercive or not. If you are not sure, the better is to declare"
" the term not symmetric and not coercive. But some solvers (conjugate "
"gradient for instance) are not allowed for non-coercive problems. "
"`brickname` is an otpional name for the brick."
msgstr ""

# fa497bcc7d1c464cb843f4250ae40475
#: ../source/matlab/cmdref_gf_model_set.rst:388
msgid ""
"``ind = gf_model_set(model M, 'add linear generic assembly brick', "
"mesh_im mim, string expression[, int region[, int is_symmetric[, int "
"is_coercive]]])``"
msgstr ""

# 1b94a1e821ff42abbef2e6b60e97f61a
#: ../source/matlab/cmdref_gf_model_set.rst:390
msgid "Deprecated. Use gf_model_set(model M, 'add linear term') instead."
msgstr ""

# 6970e7166cd74937bb3247734921e1c7
#: ../source/matlab/cmdref_gf_model_set.rst:393
msgid ""
"``ind = gf_model_set(model M, 'add nonlinear term', mesh_im mim, string "
"expression[, int region[, int is_symmetric[, int is_coercive]]])``"
msgstr ""

# 6704128d9a164e32af48e902e680c10c
#: ../source/matlab/cmdref_gf_model_set.rst:395
msgid ""
"Adds a nonlinear term given by the assembly string `expr` which will be "
"assembled in region `region` and with the integration method `mim`. The "
"expression can describe a potential or a weak form. Second order terms "
"(i.e. containing second order test functions, Test2) are not allowed. You"
" can specify if the term is symmetric, coercive or not. If you are not "
"sure, the better is to declare the term not symmetric and not coercive. "
"But some solvers (conjugate gradient for instance) are not allowed for "
"non-coercive problems. `brickname` is an otpional name for the brick."
msgstr ""

# 3e7670c1278246eaabab6f5681eecba9
#: ../source/matlab/cmdref_gf_model_set.rst:407
msgid ""
"``ind = gf_model_set(model M, 'add nonlinear generic assembly brick', "
"mesh_im mim, string expression[, int region[, int is_symmetric[, int "
"is_coercive]]])``"
msgstr ""

# 0379745f10ea459f8ed6b05397dd9355
#: ../source/matlab/cmdref_gf_model_set.rst:409
msgid "Deprecated. Use gf_model_set(model M, 'add nonlinear term') instead."
msgstr ""

# 3625f615aab5453ba38d3c0bb1fbc79b
#: ../source/matlab/cmdref_gf_model_set.rst:412
msgid ""
"``ind = gf_model_set(model M, 'add source term', mesh_im mim, string "
"expression[, int region])``"
msgstr ""

# dda139d37d9b45f99dce49f6d32343d1
#: ../source/matlab/cmdref_gf_model_set.rst:414
msgid ""
"Adds a source term given by the assembly string `expr` which will be "
"assembled in region `region` and with the integration method `mim`. Only "
"the residual term will be taken into account. Take care that if the "
"expression contains some variables and if the expression is a potential, "
"the expression will be derivated with respect to all variables. "
"`brickname` is an optional name for the brick."
msgstr ""

# 2f7d325cd4f74c43a4aa15eaddb24de0
#: ../source/matlab/cmdref_gf_model_set.rst:423
msgid ""
"``ind = gf_model_set(model M, 'add source term generic assembly brick', "
"mesh_im mim, string expression[, int region])``"
msgstr ""

# bfd412561b144e54886cc64b2b2d39f9
#: ../source/matlab/cmdref_gf_model_set.rst:425
msgid "Deprecated. Use gf_model_set(model M, 'add source term') instead."
msgstr ""

# cc43ba7257ca4676b3d7bdcb40efab7c
#: ../source/matlab/cmdref_gf_model_set.rst:428
msgid ""
"``gf_model_set(model M, 'add assembly assignment', string dataname, "
"string expression[, int region[, int order[, int before]]])``"
msgstr ""

# f157c90679f146e79987a9e79fa5e3b6
#: ../source/matlab/cmdref_gf_model_set.rst:430
msgid ""
"Adds expression `expr` to be evaluated at assembly time and being "
"assigned to the data `dataname` which has to be of im_data type. This "
"allows for instance to store a sub-expression of an assembly computation "
"to be used on an other assembly. It can be used for instance to store the"
" plastic strain in plasticity models. `order` represents the order of "
"assembly where this assignement has to be done (potential(0), weak "
"form(1) or tangent system(2) or at each order(-1)). The default value is "
"1. If before = 1, the the assignement is perfromed before the computation"
" of the other assembly terms, such that the data can be used in the "
"remaining of the assembly as an intermediary result (be careful that it "
"is still considered as a data, no derivation of the expression is "
"performed for the tangent system). If before = 0 (default), the "
"assignement is done after the assembly terms."
msgstr ""

# 3c1f15ff4bbd44c8bb52c744122e5f70
#: ../source/matlab/cmdref_gf_model_set.rst:447
msgid "``gf_model_set(model M, 'clear assembly assignment')``"
msgstr ""

# 0048f3017c664aa58981b08d24d8aa50
#: ../source/matlab/cmdref_gf_model_set.rst:449
msgid "Delete all added assembly assignments"
msgstr ""

# 2fda0de930984d3a8041071c93be9ced
#: ../source/matlab/cmdref_gf_model_set.rst:453
msgid ""
"``ind = gf_model_set(model M, 'add Laplacian brick', mesh_im mim, string "
"varname[, int region])``"
msgstr ""

# 4a3757d647b342869b1debdea6a98c42
#: ../source/matlab/cmdref_gf_model_set.rst:455
msgid ""
"Add a Laplacian term to the model relatively to the variable `varname` "
"(in fact with a minus : :math:`-\\text{div}(\\nabla u)`). If this is a "
"vector valued variable, the Laplacian term is added componentwise. "
"`region` is an optional mesh region on which the term is added. If it is "
"not specified, it is added on the whole mesh. Return the brick index in "
"the model."
msgstr ""

# 3dd4c9d07a5a4e7eb10259a88d0dc7af
#: ../source/matlab/cmdref_gf_model_set.rst:463
msgid ""
"``ind = gf_model_set(model M, 'add generic elliptic brick', mesh_im mim, "
"string varname, string dataname[, int region])``"
msgstr ""

# b14fdb6c498647ebab684d4fcb549292
#: ../source/matlab/cmdref_gf_model_set.rst:465
msgid ""
"Add a generic elliptic term to the model relatively to the variable "
"`varname`. The shape of the elliptic term depends both on the variable "
"and the data. This corresponds to a term :math:`-\\text{div}(a\\nabla u)`"
" where :math:`a` is the data and :math:`u` the variable. The data can be "
"a scalar, a matrix or an order four tensor. The variable can be vector "
"valued or not. If the data is a scalar or a matrix and the variable is "
"vector valued then the term is added componentwise. An order four tensor "
"data is allowed for vector valued variable only. The data can be constant"
" or describbed on a fem. Of course, when the data is a tensor describe on"
" a finite element method (a tensor field) the data can be a huge vector. "
"The components of the matrix/tensor have to be stored with the fortran "
"order (columnwise) in the data vector (compatibility with blas). The "
"symmetry of the given matrix/tensor is not verified (but assumed). If "
"this is a vector valued variable, the elliptic term is added "
"componentwise. `region` is an optional mesh region on which the term is "
"added. If it is not specified, it is added on the whole mesh. Note that "
"for the real version which uses the high-level generic assembly language,"
" `dataname` can be any regular expression of the high-level generic "
"assembly language (like \"1\", \"sin(X(1))\" or \"Norm(u)\" for instance)"
" even depending on model variables. Return the brick index in the model."
msgstr ""

# a0b51d33189d41bdb0dfde7b4551ba4d
#: ../source/matlab/cmdref_gf_model_set.rst:491
msgid ""
"``ind = gf_model_set(model M, 'add source term brick', mesh_im mim, "
"string varname, string dataexpr[, int region[, string directdataname]])``"
msgstr ""

# 171b024a34664e33a5b4fb6811325a67
#: ../source/matlab/cmdref_gf_model_set.rst:493
msgid ""
"Add a source term to the model relatively to the variable `varname`. The "
"source term is represented by `dataexpr` which could be any regular "
"expression of the high-level generic assembly language (except for the "
"complex version where it has to be a declared data of the model). "
"`region` is an optional mesh region on which the term is added. An "
"additional optional data `directdataname` can be provided. The "
"corresponding data vector will be directly added to the right hand side "
"without assembly. Note that when region is a boundary, this brick allows "
"to prescribe a nonzero Neumann boundary condition. Return the brick index"
" in the model."
msgstr ""

# ba121c7ed9054a9aba5d6c606a78452e
#: ../source/matlab/cmdref_gf_model_set.rst:506
msgid ""
"``ind = gf_model_set(model M, 'add normal source term brick', mesh_im "
"mim, string varname, string dataname, int region)``"
msgstr ""

# 28d2348a3aed48a1a973bb82594337b9
#: ../source/matlab/cmdref_gf_model_set.rst:508
msgid ""
"Add a source term on the variable `varname` on a boundary `region`. This "
"region should be a boundary. The source term is represented by the data "
"`dataepxpr` which could be any regular expression of the high-level "
"generic assembly language (except for the complex version where it has to"
" be a declared data of the model). A scalar product with the outward "
"normal unit vector to the boundary is performed. The main aim of this "
"brick is to represent a Neumann condition with a vector data without "
"performing the scalar product with the normal as a pre-processing. Return"
" the brick index in the model."
msgstr ""

# 6fc1d26063474fa6adc2adc79dcdfd65
#: ../source/matlab/cmdref_gf_model_set.rst:520
msgid ""
"``ind = gf_model_set(model M, 'add Dirichlet condition with "
"simplification', string varname, int region[, string dataname])``"
msgstr ""

# ac2fb9c28f454c3db9937dd208046594
#: ../source/matlab/cmdref_gf_model_set.rst:522
msgid ""
"Adds a (simple) Dirichlet condition on the variable `varname` and the "
"mesh region `region`. The Dirichlet condition is prescribed by a simple "
"post-treatment of the final linear system (tangent system for nonlinear "
"problems) consisting of modifying the lines corresponding to the degree "
"of freedom of the variable on `region` (0 outside the diagonal, 1 on the "
"diagonal of the matrix and the expected value on the right hand side). "
"The symmetry of the linear system is kept if all other bricks are "
"symmetric. This brick is to be reserved for simple Dirichlet conditions "
"(only dof declared on the correspodning boundary are prescribed). The "
"application of this brick on reduced dof may be problematic. Intrinsic "
"vectorial finite element method are not supported. `dataname` is the "
"optional right hand side of  the Dirichlet condition. It could be "
"constant (but in that case, it can only be applied to Lagrange f.e.m.) or"
" (important) described on the same finite element method as `varname`. "
"Returns the brick index in the model."
msgstr ""

# 344dc4f6134a4a56861c0cd7052a31c8
#: ../source/matlab/cmdref_gf_model_set.rst:542
msgid ""
"``ind = gf_model_set(model M, 'add Dirichlet condition with multipliers',"
" mesh_im mim, string varname, mult_description, int region[, string "
"dataname])``"
msgstr ""

# 7753f13eba2444a9b9351a0efa4217a4
#: ../source/matlab/cmdref_gf_model_set.rst:544
msgid ""
"Add a Dirichlet condition on the variable `varname` and the mesh region "
"`region`. This region should be a boundary. The Dirichlet condition is "
"prescribed with a multiplier variable described by `mult_description`. If"
" `mult_description` is a string this is assumed to be the variable name "
"corresponding to the multiplier (which should be first declared as a "
"multiplier variable on the mesh region in the model). If it is a finite "
"element method (mesh_fem object) then a multiplier variable will be added"
" to the model and build on this finite element method (it will be "
"restricted to the mesh region `region` and eventually some conflicting "
"dofs with some other multiplier variables will be suppressed). If it is "
"an integer, then a  multiplier variable will be added to the model and "
"build on a classical finite element of degree that integer. `dataname` is"
" the optional right hand side of  the Dirichlet condition. It could be "
"constant or described on a fem; scalar or vector valued, depending on the"
" variable on which the Dirichlet condition is prescribed. Return the "
"brick index in the model."
msgstr ""

# 2a6bb7d92c2b45678b0fd3ee507d76d7
#: ../source/matlab/cmdref_gf_model_set.rst:562
msgid ""
"``ind = gf_model_set(model M, 'add Dirichlet condition with Nitsche "
"method', mesh_im mim, string varname, string Neumannterm, string "
"datagamma0, int region[, scalar theta][, string dataname])``"
msgstr ""

# e2a4c287dc4945c9989de113903824ba
#: ../source/matlab/cmdref_gf_model_set.rst:564
msgid ""
"Add a Dirichlet condition on the variable `varname` and the mesh region "
"`region`. This region should be a boundary. `Neumannterm` is the "
"expression of the Neumann term (obtained by the Green formula) described "
"as an expression of the high-level generic assembly language. This term "
"can be obtained by gf_model_get(model M, 'Neumann term', varname, region)"
" once all volumic bricks have been added to the model. The Dirichlet "
"condition is prescribed with Nitsche's method. `datag` is the optional "
"right hand side of the Dirichlet condition. `datagamma0` is the Nitsche's"
" method parameter. `theta` is a scalar value which can be positive or "
"negative. `theta = 1` corresponds to the standard symmetric method which "
"is conditionnaly coercive for  `gamma0` small. `theta = -1` corresponds "
"to the skew-symmetric method which is inconditionnaly coercive. `theta = "
"0` (default) is the simplest method for which the second derivative of "
"the Neumann term is not necessary even for nonlinear problems. Return the"
" brick index in the model."
msgstr ""

# 1915cbc25ac0495d983a334f83abf9f1
#: ../source/matlab/cmdref_gf_model_set.rst:583
msgid ""
"``ind = gf_model_set(model M, 'add Dirichlet condition with "
"penalization', mesh_im mim, string varname, scalar coeff, int region[, "
"string dataname, mesh_fem mf_mult])``"
msgstr ""

# ccd90fe4c72745798dbde29587e51787
#: ../source/matlab/cmdref_gf_model_set.rst:585
msgid ""
"Add a Dirichlet condition on the variable `varname` and the mesh region "
"`region`. This region should be a boundary. The Dirichlet condition is "
"prescribed with penalization. The penalization coefficient is initially "
"`coeff` and will be added to the data of the model. `dataname` is the "
"optional right hand side of the Dirichlet condition. It could be constant"
" or described on a fem; scalar or vector valued, depending on the "
"variable on which the Dirichlet condition is prescribed. `mf_mult` is an "
"optional parameter which allows to weaken the Dirichlet condition "
"specifying a multiplier space. Return the brick index in the model."
msgstr ""

# 0e43c69011004f28adbd8f99cc1a1e93
#: ../source/matlab/cmdref_gf_model_set.rst:597
msgid ""
"``ind = gf_model_set(model M, 'add normal Dirichlet condition with "
"multipliers', mesh_im mim, string varname, mult_description, int region[,"
" string dataname])``"
msgstr ""

# d479a389a4be4f6bab50a3b2110874af
#: ../source/matlab/cmdref_gf_model_set.rst:599
msgid ""
"Add a Dirichlet condition to the normal component of the vector (or "
"tensor) valued variable `varname` and the mesh region `region`. This "
"region should be a boundary. The Dirichlet condition is prescribed with a"
" multiplier variable described by `mult_description`. If "
"`mult_description` is a string this is assumed to be the variable name "
"corresponding to the multiplier (which should be first declared as a "
"multiplier variable on the mesh region in the model). If it is a finite "
"element method (mesh_fem object) then a multiplier variable will be added"
" to the model and build on this finite element method (it will be "
"restricted to the mesh region `region` and eventually some conflicting "
"dofs with some other multiplier variables will be suppressed). If it is "
"an integer, then a  multiplier variable will be added to the model and "
"build on a classical finite element of degree that integer. `dataname` is"
" the optional right hand side of  the Dirichlet condition. It could be "
"constant or described on a fem; scalar or vector valued, depending on the"
" variable on which the Dirichlet condition is prescribed (scalar if the "
"variable is vector valued, vector if the variable is tensor valued). "
"Returns the brick index in the model."
msgstr ""

# 2e9e6024ed244f01b1aad4b2789dfc33
#: ../source/matlab/cmdref_gf_model_set.rst:620
msgid ""
"``ind = gf_model_set(model M, 'add normal Dirichlet condition with "
"penalization', mesh_im mim, string varname, scalar coeff, int region[, "
"string dataname, mesh_fem mf_mult])``"
msgstr ""

# e6cf22ea17ec447188459c13051b2542
#: ../source/matlab/cmdref_gf_model_set.rst:622
msgid ""
"Add a Dirichlet condition to the normal component of the vector (or "
"tensor) valued variable `varname` and the mesh region `region`. This "
"region should be a boundary. The Dirichlet condition is prescribed with "
"penalization. The penalization coefficient is initially `coeff` and will "
"be added to the data of the model. `dataname` is the optional right hand "
"side of the Dirichlet condition. It could be constant or described on a "
"fem; scalar or vector valued, depending on the variable on which the "
"Dirichlet condition is prescribed (scalar if the variable is vector "
"valued, vector if the variable is tensor valued). `mf_mult` is an "
"optional parameter which allows to weaken the Dirichlet condition "
"specifying a multiplier space. Returns the brick index in the model."
msgstr ""

# af486e88683c4ec5a71ed505a981eb3c
#: ../source/matlab/cmdref_gf_model_set.rst:637
msgid ""
"``ind = gf_model_set(model M, 'add normal Dirichlet condition with "
"Nitsche method', mesh_im mim, string varname, string Neumannterm, string "
"gamma0name, int region[, scalar theta][, string dataname])``"
msgstr ""

# 77978d7d4f6947428a69fce4c7e72414
#: ../source/matlab/cmdref_gf_model_set.rst:639
msgid ""
"Add a Dirichlet condition to the normal component of the vector (or "
"tensor) valued variable `varname` and the mesh region `region`. This "
"region should be a boundary. `Neumannterm` is the expression of the "
"Neumann term (obtained by the Green formula) described as an expression "
"of the high-level generic assembly language. This term can be obtained by"
" gf_model_get(model M, 'Neumann term', varname, region) once all volumic "
"bricks have been added to the model. The Dirichlet condition is "
"prescribed with Nitsche's method. `dataname` is the optional right hand "
"side of the Dirichlet condition. It could be constant or described on a "
"fem. `gamma0name` is the Nitsche's method parameter. `theta` is a scalar "
"value which can be positive or negative. `theta = 1` corresponds to the "
"standard symmetric method which is conditionnaly coercive for  `gamma0` "
"small. `theta = -1` corresponds to the skew-symmetric method which is "
"inconditionnaly coercive. `theta = 0` is the simplest method for which "
"the second derivative of the Neumann term is not necessary even for "
"nonlinear problems. Returns the brick index in the model. (This brick is "
"not fully tested)"
msgstr ""

# 3684c2917adf46fd898407e0b8530257
#: ../source/matlab/cmdref_gf_model_set.rst:662
msgid ""
"``ind = gf_model_set(model M, 'add generalized Dirichlet condition with "
"multipliers', mesh_im mim, string varname, mult_description, int region, "
"string dataname, string Hname)``"
msgstr ""

# 50220a76ba46476eb7121f85864e1986
#: ../source/matlab/cmdref_gf_model_set.rst:664
msgid ""
"Add a Dirichlet condition on the variable `varname` and the mesh region "
"`region`.  This version is for vector field. It prescribes a condition "
":math:`Hu = r` where `H` is a matrix field. The region should be a "
"boundary. The Dirichlet condition is prescribed with a multiplier "
"variable described by `mult_description`. If `mult_description` is a "
"string this is assumed to be the variable name corresponding to the "
"multiplier (which should be first declared as a multiplier variable on "
"the mesh region in the model). If it is a finite element method (mesh_fem"
" object) then a multiplier variable will be added to the model and build "
"on this finite element method (it will be restricted to the mesh region "
"`region` and eventually some conflicting dofs with some other multiplier "
"variables will be suppressed). If it is an integer, then a  multiplier "
"variable will be added to the model and build on a classical finite "
"element of degree that integer. `dataname` is the right hand side of  the"
" Dirichlet condition. It could be constant or described on a fem; scalar "
"or vector valued, depending on the variable on which the Dirichlet "
"condition is prescribed. `Hname` is the data corresponding to the matrix "
"field `H`. Returns the brick index in the model."
msgstr ""

# a0b82a47a9714e8084ef783ef51065a9
#: ../source/matlab/cmdref_gf_model_set.rst:686
msgid ""
"``ind = gf_model_set(model M, 'add generalized Dirichlet condition with "
"penalization', mesh_im mim, string varname, scalar coeff, int region, "
"string dataname, string Hname[, mesh_fem mf_mult])``"
msgstr ""

# 88230637b76841c9b48660f920d01aab
#: ../source/matlab/cmdref_gf_model_set.rst:688
msgid ""
"Add a Dirichlet condition on the variable `varname` and the mesh region "
"`region`. This version is for vector field. It prescribes a condition "
":math:`Hu = r` where `H` is a matrix field. The region should be a "
"boundary. The Dirichlet condition is prescribed with penalization. The "
"penalization coefficient is intially `coeff` and will be added to the "
"data of the model. `dataname` is the right hand side of the Dirichlet "
"condition. It could be constant or described on a fem; scalar or vector "
"valued, depending on the variable on which the Dirichlet condition is "
"prescribed. `Hname` is the data corresponding to the matrix field `H`. It"
" has to be a constant matrix or described on a scalar fem. `mf_mult` is "
"an optional parameter which allows to weaken the Dirichlet condition "
"specifying a multiplier space. Return the brick index in the model."
msgstr ""

# a9b737b750bf435d8daf73628d8ce4ea
#: ../source/matlab/cmdref_gf_model_set.rst:706
msgid ""
"``ind = gf_model_set(model M, 'add generalized Dirichlet condition with "
"Nitsche method', mesh_im mim, string varname, string Neumannterm, string "
"gamma0name, int region[, scalar theta], string dataname, string Hname)``"
msgstr ""

# d7dade92ab9c45f08e11f9f4a22cb991
#: ../source/matlab/cmdref_gf_model_set.rst:708
msgid ""
"Add a Dirichlet condition on the variable `varname` and the mesh region "
"`region`. This version is for vector field. It prescribes a condition @f$"
" Hu = r @f$ where `H` is a matrix field. CAUTION : the matrix H should "
"have all eigenvalues equal to 1 or 0. The region should be a boundary.   "
"`Neumannterm` is the expression of the Neumann term (obtained by the "
"Green formula) described as an expression of the high-level generic "
"assembly language. This term can be obtained by gf_model_get(model M, "
"'Neumann term', varname, region) once all volumic bricks have been added "
"to the model.  The Dirichlet condition is prescribed with Nitsche's "
"method. `dataname` is the optional right hand side of the Dirichlet "
"condition. It could be constant or described on a fem. `gamma0name` is "
"the Nitsche's method parameter. `theta` is a scalar value which can be "
"positive or negative. `theta = 1` corresponds to the standard symmetric "
"method which is conditionnaly coercive for  `gamma0` small. `theta = -1` "
"corresponds to the skew-symmetric method which is inconditionnaly "
"coercive. `theta = 0` is the simplest method for which the second "
"derivative of the Neumann term is not necessary even for nonlinear "
"problems. `Hname` is the data corresponding to the matrix field `H`. It "
"has to be a constant matrix or described on a scalar fem. Returns the "
"brick index in the model. (This brick is not fully tested)"
msgstr ""

# 434a5bfa1bfb47a887b25d9b0b28e0ca
#: ../source/matlab/cmdref_gf_model_set.rst:735
msgid ""
"``ind = gf_model_set(model M, 'add pointwise constraints with "
"multipliers', string varname, string dataname_pt[, string dataname_unitv]"
" [, string dataname_val])``"
msgstr ""

# ebafb7ff69c245e5a13ed60b967fb86a
#: ../source/matlab/cmdref_gf_model_set.rst:737
msgid ""
"Add some pointwise constraints on the variable `varname` using "
"multiplier. The multiplier variable is automatically added to the model. "
"The conditions are prescribed on a set of points given in the data "
"`dataname_pt` whose dimension is the number of points times the dimension"
" of the mesh. If the variable represents a vector field, one has to give "
"the data `dataname_unitv` which represents a vector of dimension the "
"number of points times the dimension of the vector field which should "
"store some unit vectors. In that case the prescribed constraint is the "
"scalar product of the variable at the corresponding point with the "
"corresponding unit vector. The optional data `dataname_val` is the vector"
" of values to be prescribed at the different points. This brick is "
"specifically designed to kill rigid displacement in a Neumann problem. "
"Returns the brick index in the model."
msgstr ""

# 56f483fbf8144a649934e9e5f50a435a
#: ../source/matlab/cmdref_gf_model_set.rst:755
msgid ""
"``ind = gf_model_set(model M, 'add pointwise constraints with given "
"multipliers', string varname, string multname, string dataname_pt[, "
"string dataname_unitv] [, string dataname_val])``"
msgstr ""

# 6ffc1ab360d245d89bcdf6971c28322b
#: ../source/matlab/cmdref_gf_model_set.rst:757
msgid ""
"Add some pointwise constraints on the variable `varname` using a given "
"multiplier `multname`. The conditions are prescribed on a set of points "
"given in the data `dataname_pt` whose dimension is the number of points "
"times the dimension of the mesh. The multiplier variable should be a "
"fixed size variable of size the number of points. If the variable "
"represents a vector field, one has to give the data `dataname_unitv` "
"which represents a vector of dimension the number of points times the "
"dimension of the vector field which should store some unit vectors. In "
"that case the prescribed constraint is the scalar product of the variable"
" at the corresponding point with the corresponding unit vector. The "
"optional data `dataname_val` is the vector of values to be prescribed at "
"the different points. This brick is specifically designed to kill rigid "
"displacement in a Neumann problem. Returns the brick index in the model."
msgstr ""

# 62b7a586794f40869cff26afaff05465
#: ../source/matlab/cmdref_gf_model_set.rst:777
msgid ""
"``ind = gf_model_set(model M, 'add pointwise constraints with "
"penalization', string varname, scalar coeff, string dataname_pt[, string "
"dataname_unitv] [, string dataname_val])``"
msgstr ""

# 11e3de55c6e04faea3e11f678087065c
#: ../source/matlab/cmdref_gf_model_set.rst:779
msgid ""
"Add some pointwise constraints on the variable `varname` thanks to a "
"penalization. The penalization coefficient is initially "
"`penalization_coeff` and will be added to the data of the model. The "
"conditions are prescribed on a set of points given in the data "
"`dataname_pt` whose dimension is the number of points times the dimension"
" of the mesh. If the variable represents a vector field, one has to give "
"the data `dataname_unitv` which represents a vector of dimension the "
"number of points times the dimension of the vector field which should "
"store some unit vectors. In that case the prescribed constraint is the "
"scalar product of the variable at the corresponding point with the "
"corresponding unit vector. The optional data `dataname_val` is the vector"
" of values to be prescribed at the different points. This brick is "
"specifically designed to kill rigid displacement in a Neumann problem. "
"Returns the brick index in the model."
msgstr ""

# 8b126435fd1442a08ec7314b94d3deb8
#: ../source/matlab/cmdref_gf_model_set.rst:798
msgid ""
"``gf_model_set(model M, 'change penalization coeff', int ind_brick, "
"scalar coeff)``"
msgstr ""

# 60005c9c160344cd89716c590289caeb
#: ../source/matlab/cmdref_gf_model_set.rst:800
msgid ""
"Change the penalization coefficient of a Dirichlet condition with "
"penalization brick. If the brick is not of this kind, this function has "
"an undefined behavior."
msgstr ""

# c31109e109c8456caedf3b5ab0b944d5
#: ../source/matlab/cmdref_gf_model_set.rst:805
msgid ""
"``ind = gf_model_set(model M, 'add Helmholtz brick', mesh_im mim, string "
"varname, string dataexpr[, int region])``"
msgstr ""

# 7b22238b4cb54c06b0d2db8ffca311d7
#: ../source/matlab/cmdref_gf_model_set.rst:807
msgid ""
"Add a Helmholtz term to the model relatively to the variable `varname`. "
"`dataexpr` is the wave number. `region` is an optional mesh region on "
"which the term is added. If it is not specified, it is added on the whole"
" mesh. Return the brick index in the model."
msgstr ""

# f2cbd4f0968b4581972aedf9dfd7942e
#: ../source/matlab/cmdref_gf_model_set.rst:813
msgid ""
"``ind = gf_model_set(model M, 'add Fourier Robin brick', mesh_im mim, "
"string varname, string dataexpr, int region)``"
msgstr ""

# ef530fef621144f492c83a9ab04e995d
#: ../source/matlab/cmdref_gf_model_set.rst:815
msgid ""
"Add a Fourier-Robin term to the model relatively to the variable "
"`varname`. This corresponds to a weak term of the form :math:`\\int "
"(qu).v`. `dataexpr` is the parameter :math:`q` of the Fourier-Robin "
"condition.  It can be an arbitrary valid expression of the high-level "
"generic assembly language (except for the complex version for which it "
"should be a data of the model). `region` is the mesh region on which the "
"term is added. Return the brick index in the model."
msgstr ""

# 67f00e91f2ac419b978c5e619225bae0
#: ../source/matlab/cmdref_gf_model_set.rst:824
msgid ""
"``ind = gf_model_set(model M, 'add constraint with multipliers', string "
"varname, string multname, spmat B, {vec L | string dataname})``"
msgstr ""

# 68c4cbd6706e465d8daead2f359e737e
#: ../source/matlab/cmdref_gf_model_set.rst:826
msgid ""
"Add an additional explicit constraint on the variable `varname` thank to "
"a multiplier `multname` peviously added to the model (should be a fixed "
"size variable). The constraint is :math:`BU=L` with `B` being a "
"rectangular sparse matrix. It is possible to change the constraint at any"
" time with the methods gf_model_set(model M, 'set private matrix') and "
"gf_model_set(model M, 'set private rhs'). If `dataname` is specified "
"instead of `L`, the vector `L` is defined in the model as data with the "
"given name. Return the brick index in the model."
msgstr ""

# 3901ce2de77c4ced984654f4acdb5201
#: ../source/matlab/cmdref_gf_model_set.rst:836
msgid ""
"``ind = gf_model_set(model M, 'add constraint with penalization', string "
"varname, scalar coeff, spmat B, {vec L | string dataname})``"
msgstr ""

# fc1d87efabf142998f8573f88d3812ad
#: ../source/matlab/cmdref_gf_model_set.rst:838
msgid ""
"Add an additional explicit penalized constraint on the variable "
"`varname`. The constraint is :math`BU=L` with `B` being a rectangular "
"sparse matrix. Be aware that `B` should not contain a palin row, "
"otherwise the whole tangent matrix will be plain. It is possible to "
"change the constraint at any time with the methods gf_model_set(model M, "
"'set private matrix') and gf_model_set(model M, 'set private rhs'). The "
"method gf_model_set(model M, 'change penalization coeff') can be used. If"
" `dataname` is specified instead of `L`, the vector `L` is defined in the"
" model as data with the given name. Return the brick index in the model."
msgstr ""

# 8c670b1af22d4b9db3c4652623d5ac82
#: ../source/matlab/cmdref_gf_model_set.rst:851
msgid ""
"``ind = gf_model_set(model M, 'add explicit matrix', string varname1, "
"string varname2, spmat B[, int issymmetric[, int iscoercive]])``"
msgstr ""

# 9ae6d26377b44d2787d69999695c378b
#: ../source/matlab/cmdref_gf_model_set.rst:853
msgid ""
"Add a brick representing an explicit matrix to be added to the tangent "
"linear system relatively to the variables `varname1` and `varname2`. The "
"given matrix should have has many rows as the dimension of `varname1` and"
" as many columns as the dimension of `varname2`. If the two variables are"
" different and if `issymmetric` is set to 1 then the transpose of the "
"matrix is also added to the tangent system (default is 0). Set "
"`iscoercive` to 1 if the term does not affect the coercivity of the "
"tangent system (default is 0). The matrix can be changed by the command "
"gf_model_set(model M, 'set private matrix'). Return the brick index in "
"the model."
msgstr ""

# c1677fdb8cf14f3996d0c4e4c87f6f95
#: ../source/matlab/cmdref_gf_model_set.rst:865
msgid "``ind = gf_model_set(model M, 'add explicit rhs', string varname, vec L)``"
msgstr ""

# e92953c9a4884df6825cb663f1e1f741
#: ../source/matlab/cmdref_gf_model_set.rst:867
msgid ""
"Add a brick representing an explicit right hand side to be added to the "
"right hand side of the tangent linear system relatively to the variable "
"`varname`. The given rhs should have the same size than the dimension of "
"`varname`. The rhs can be changed by the command gf_model_set(model M, "
"'set private rhs'). If `dataname` is specified instead of `L`, the vector"
" `L` is defined in the model as data with the given name. Return the "
"brick index in the model."
msgstr ""

# f7f9c805d12a40fe9f94b690bd4e4c09
#: ../source/matlab/cmdref_gf_model_set.rst:876
msgid "``gf_model_set(model M, 'set private matrix', int indbrick, spmat B)``"
msgstr ""

# fa5f6130b8b745a98dee37492269b3bd
#: ../source/matlab/cmdref_gf_model_set.rst:878
msgid ""
"For some specific bricks having an internal sparse matrix (explicit "
"bricks: 'constraint brick' and 'explicit matrix brick'), set this matrix."
msgstr ""

# 088bb967345b402cafae7f719dde37a1
#: ../source/matlab/cmdref_gf_model_set.rst:883
msgid "``gf_model_set(model M, 'set private rhs', int indbrick, vec B)``"
msgstr ""

# b8edead39f2e41df80f73da9d86f53b7
#: ../source/matlab/cmdref_gf_model_set.rst:885
msgid ""
"For some specific bricks having an internal right hand side vector "
"(explicit bricks: 'constraint brick' and 'explicit rhs brick'), set this "
"rhs."
msgstr ""

# 8d4293e9f72f484d8af0f9e6fb08cd5a
#: ../source/matlab/cmdref_gf_model_set.rst:890
msgid ""
"``ind = gf_model_set(model M, 'add isotropic linearized elasticity "
"brick', mesh_im mim, string varname, string dataname_lambda, string "
"dataname_mu[, int region])``"
msgstr ""

# cd9448acd1f1425f9b59013cea2d8ff1
#: ../source/matlab/cmdref_gf_model_set.rst:892
msgid ""
"Add an isotropic linearized elasticity term to the model relatively to "
"the variable `varname`. `dataname_lambda` and `dataname_mu` should "
"contain the Lame coefficients. `region` is an optional mesh region on "
"which the term is added. If it is not specified, it is added on the whole"
" mesh. Return the brick index in the model."
msgstr ""

# 22c829fb457b46caabe44b6871094e4e
#: ../source/matlab/cmdref_gf_model_set.rst:899
msgid ""
"``ind = gf_model_set(model M, 'add isotropic linearized elasticity brick "
"pstrain', mesh_im mim, string varname, string data_E, string data_nu[, "
"int region])``"
msgstr ""

# d7601973ba7b46bb823f93865725a679
#: ../source/matlab/cmdref_gf_model_set.rst:901
msgid ""
"Add an isotropic linearized elasticity term to the model relatively to "
"the variable `varname`. `data_E` and `data_nu` should contain the Young "
"modulus and Poisson ratio, respectively. `region` is an optional mesh "
"region on which the term is added. If it is not specified, it is added on"
" the whole mesh. On two-dimensional meshes, the term will correpsond to a"
" plain strain approximation. On three-dimensional meshes, it will "
"correspond to the standard model. Return the brick index in the model."
msgstr ""

# 30742cdcb7a4405191f0f3849b565180
#: ../source/matlab/cmdref_gf_model_set.rst:913
msgid ""
"``ind = gf_model_set(model M, 'add isotropic linearized elasticity brick "
"pstress', mesh_im mim, string varname, string data_E, string data_nu[, "
"int region])``"
msgstr ""

# 7db08530b64d4e01a1b128101dae4ccf
#: ../source/matlab/cmdref_gf_model_set.rst:915
msgid ""
"Add an isotropic linearized elasticity term to the model relatively to "
"the variable `varname`. `data_E` and `data_nu` should contain the Young "
"modulus and Poisson ratio, respectively. `region` is an optional mesh "
"region on which the term is added. If it is not specified, it is added on"
" the whole mesh. On two-dimensional meshes, the term will correpsond to a"
" plain stress approximation. On three-dimensional meshes, it will "
"correspond to the standard model. Return the brick index in the model."
msgstr ""

# 9e9e88f5bab240afafec1772000bace1
#: ../source/matlab/cmdref_gf_model_set.rst:927
msgid ""
"``ind = gf_model_set(model M, 'add linear incompressibility brick', "
"mesh_im mim, string varname, string multname_pressure[, int region[, "
"string dataexpr_coeff]])``"
msgstr ""

# 2ad51de69490492ab6509a4db4a713ff
#: ../source/matlab/cmdref_gf_model_set.rst:929
msgid ""
"Add a linear incompressibility condition on `variable`. "
"`multname_pressure` is a variable which represent the pressure. Be aware "
"that an inf-sup condition between the finite element method describing "
"the pressure and the primal variable has to be satisfied. `region` is an "
"optional mesh region on which the term is added. If it is not specified, "
"it is added on the whole mesh. `dataexpr_coeff` is an optional "
"penalization coefficient for nearly incompressible elasticity for "
"instance. In this case, it is the inverse of the Lame coefficient "
":math:`\\lambda`. Return the brick index in the model."
msgstr ""

# b3b727bbee1e419d8bc498846189ec7d
#: ../source/matlab/cmdref_gf_model_set.rst:940
msgid ""
"``ind = gf_model_set(model M, 'add nonlinear elasticity brick', mesh_im "
"mim, string varname, string constitutive_law, string dataname[, int "
"region])``"
msgstr ""

# 1f61e69796c74bff80d16ba5146a9789
#: ../source/matlab/cmdref_gf_model_set.rst:942
msgid ""
"Add a nonlinear elasticity term to the model relatively to the variable "
"`varname` (deprecated brick, use add_finite_strain_elaticity instead). "
"`lawname` is the constitutive law which could be 'SaintVenant Kirchhoff',"
" 'Mooney Rivlin', 'neo Hookean', 'Ciarlet Geymonat' or 'generalized Blatz"
" Ko'. 'Mooney Rivlin' and 'neo Hookean' law names can be preceded with "
"the word 'compressible' or 'incompressible' to force using the "
"corresponding version. The compressible version of these laws requires "
"one additional material coefficient. By default, the incompressible "
"version of 'Mooney Rivlin' law and the compressible one of the 'neo "
"Hookean' law are considered. In general, 'neo Hookean' is a special case "
"of the 'Mooney Rivlin' law that requires one coefficient less. IMPORTANT "
": if the variable is defined on a 2D mesh, the plane strain approximation"
" is automatically used. `dataname` is a vector of parameters for the "
"constitutive law. Its length depends on the law. It could be a short "
"vector of constant values or a vector field described on a finite element"
" method for variable coefficients. `region` is an optional mesh region on"
" which the term is added. If it is not specified, it is added on the "
"whole mesh. This brick use the low-level generic assembly. Returns the "
"brick index in the model."
msgstr ""

# 561292316d754d9d91af04f8743eef0f
#: ../source/matlab/cmdref_gf_model_set.rst:965
msgid ""
"``ind = gf_model_set(model M, 'add finite strain elasticity brick', "
"mesh_im mim, string constitutive_law, string varname, string params[, int"
" region])``"
msgstr ""

# 44d4daff6f4744058d78ae2e17b6c90d
#: ../source/matlab/cmdref_gf_model_set.rst:967
msgid ""
"Add a nonlinear elasticity term to the model relatively to the variable "
"`varname`. `lawname` is the constitutive law which could be 'SaintVenant "
"Kirchhoff', 'Mooney Rivlin', 'Neo Hookean', 'Ciarlet Geymonat' or "
"'Generalized Blatz Ko'. 'Mooney Rivlin' and 'Neo Hookean' law names have "
"to be preceeded with the word 'Compressible' or 'Incompressible' to force"
" using the corresponding version. The compressible version of these laws "
"requires one additional material coefficient."
msgstr ""

# 4229403732e1442ca87295f2d3ade9a8
#: ../source/matlab/cmdref_gf_model_set.rst:977
msgid ""
"IMPORTANT : if the variable is defined on a 2D mesh, the plane strain "
"approximation is automatically used. `params` is a vector of parameters "
"for the constitutive law. Its length depends on the law. It could be a "
"short vector of constant values or a vector field described on a finite "
"element method for variable coefficients. `region` is an optional mesh "
"region on which the term is added. If it is not specified, it is added on"
" the whole mesh. This brick use the high-level generic assembly. Returns "
"the brick index in the model."
msgstr ""

# 8854175d56104fc08d20e4bb2e62a17c
#: ../source/matlab/cmdref_gf_model_set.rst:988
msgid ""
"``ind = gf_model_set(model M, 'add small strain elastoplasticity brick', "
"mesh_im mim,  string lawname, string unknowns_type [, string varnames, "
"...] [, string params, ...] [, string theta = '1' [, string dt = "
"'timestep']] [, int region = -1])``"
msgstr ""

# 7898b127319d4035bcbc7349cc5164b3
#: ../source/matlab/cmdref_gf_model_set.rst:990
msgid ""
"Adds a small strain plasticity term to the model `M`. This is the main "
"GetFEM++ brick for small strain plasticity. `lawname` is the name of an "
"implemented plastic law, `unknowns_type` indicates the choice between a "
"discretization where the plastic multiplier is an unknown of the problem "
"or (return mapping approach) just a data of the model stored for the next"
" iteration. Remember that in both cases, a multiplier is stored anyway. "
"`varnames` is a set of variable and data names with length which may "
"depend on the plastic law (at least the displacement, the plastic "
"multiplier and the plastic strain). `params` is a list of expressions for"
" the parameters (at least elastic coefficients and the yield stress). "
"These expressions can be some data names (or even variable names) of the "
"model but can also be any scalar valid expression of the high level "
"assembly language (such as '1/2', '2+sin(X[0])', '1+Norm(v)' ...). The "
"last two parameters optionally provided in `params` are the `theta` "
"parameter of the `theta`-scheme (generalized trapezoidal rule) used for "
"the plastic strain integration and the time-step`dt`. The default value "
"for `theta` if omitted is 1, which corresponds to the classical Backward "
"Euler scheme which is first order consistent. `theta=1/2` corresponds to "
"the Crank-Nicolson scheme (trapezoidal rule) which is second order "
"consistent. Any value between 1/2 and 1 should be a valid value. The "
"default value of `dt` is 'timestep' which simply indicates the time step "
"defined in the model (by md.set_time_step(dt)). Alternatively it can be "
"any expression (data name, constant value ...). The time step can be "
"altered from one iteration to the next one. `region` is a mesh region."
msgstr ""

# a8bfe5ad53af4dc78c1b27554c4c3062
#: ../source/matlab/cmdref_gf_model_set.rst:1016
msgid "The available plasticity laws are:"
msgstr ""

# 2693f1609e0748e48e22d91e01f5ccd2
#: ../source/matlab/cmdref_gf_model_set.rst:1018
msgid ""
"'Prandtl Reuss' (or 'isotropic perfect plasticity'). Isotropic elasto-"
"plasticity with no hardening. The variables are the displacement, the "
"plastic multiplier and the plastic strain. The displacement should be a "
"variable and have a corresponding data having the same name preceded by "
"'Previous\\_' corresponding to the displacement at the previous time step"
" (typically 'u' and 'Previous_u'). The plastic multiplier should also "
"have two versions (typically 'xi' and 'Previous_xi') the first one being "
"defined as data if `unknowns_type ` is 'DISPLACEMENT_ONLY' or the integer"
" value 0, or as a variable if `unknowns_type` is "
"DISPLACEMENT_AND_PLASTIC_MULTIPLIER or the integer value 1. The plastic "
"strain should represent a n x n data tensor field stored on mesh_fem or "
"(preferably) on an im_data (corresponding to `mim`). The data are the "
"first Lame coefficient, the second one (shear modulus) and the uniaxial "
"yield stress. A typical call is gf_model_get(model M, 'add small strain "
"elastoplasticity brick', mim, 'Prandtl Reuss', 0, 'u', 'xi', "
"'Previous_Ep', 'lambda', 'mu', 'sigma_y', '1', 'timestep'); IMPORTANT: "
"Note that this law implements the 3D expressions. If it is used in 2D, "
"the expressions are just transposed to the 2D. For the plane strain "
"approximation, see below."
msgstr ""

# 661069a145bc463896aa8265ca208645
#: ../source/matlab/cmdref_gf_model_set.rst:1037
msgid ""
"\"plane strain Prandtl Reuss\" (or \"plane strain isotropic perfect "
"plasticity\") The same law as the previous one but adapted to the plane "
"strain approximation. Can only be used in 2D."
msgstr ""

# 35d50ef4cdce4958af3cb39b8ab3781a
#: ../source/matlab/cmdref_gf_model_set.rst:1041
msgid ""
"\"Prandtl Reuss linear hardening\" (or \"isotropic plasticity linear "
"hardening\"). Isotropic elasto-plasticity with linear isotropic and "
"kinematic hardening. An additional variable compared to \"Prandtl Reuss\""
" law: the accumulated plastic strain. Similarly to the plastic strain, it"
" is only stored at the end of the time step, so a simple data is required"
" (preferably on an im_data). Two additional parameters: the kinematic "
"hardening modulus and the isotropic one. 3D expressions only. A typical "
"call is gf_model_get(model M, 'add small strain elastoplasticity brick', "
"mim, 'Prandtl Reuss linear hardening', 0, 'u', 'xi', 'Previous_Ep', "
"'Previous_alpha', 'lambda', 'mu', 'sigma_y', 'H_k', H_i', '1', "
"'timestep');"
msgstr ""

# a1988650d083478dbafef18dbd66ca40
#: ../source/matlab/cmdref_gf_model_set.rst:1051
msgid ""
"\"plane strain Prandtl Reuss linear hardening\" (or \"plane strain "
"isotropic plasticity linear hardening\"). The same law as the previous "
"one but adapted to the plane strain approximation. Can only be used in "
"2D."
msgstr ""

# 0199c68dcf9343ea867dcf8fe99aecb9
#: ../source/matlab/cmdref_gf_model_set.rst:1056
msgid ""
"See GetFEM++ user documentation for further explanations on the "
"discretization of the plastic flow and on the implemented plastic laws. "
"See also GetFEM++ user documentation on time integration strategy "
"(integration of transient problems)."
msgstr ""

# 6360e86842db4777b5e170b236be910c
#: ../source/matlab/cmdref_gf_model_set.rst:1061
msgid ""
"IMPORTANT : remember that `small_strain_elastoplasticity_next_iter` has "
"to be called at the end of each time step, before the next one (and "
"before any post-treatment : this sets the value of the plastic strain and"
" plastic multiplier)."
msgstr ""

# 70b77c8e9f8b4206ad89204a831e6bfa
#: ../source/matlab/cmdref_gf_model_set.rst:1068
msgid ""
"``ind = gf_model_set(model M, 'add elastoplasticity brick', mesh_im mim "
",string projname, string varname, string previous_dep_name, string "
"datalambda, string datamu, string datathreshold, string datasigma[, int "
"region])``"
msgstr ""

# b1f79c378a2646d7aceb7ffb87d3ca65
#: ../source/matlab/cmdref_gf_model_set.rst:1070
msgid ""
"Old (obsolete) brick which do not use the high level generic assembly. "
"Add a nonlinear elastoplastic term to the model relatively to the "
"variable `varname`, in small deformations, for an isotropic material and "
"for a quasistatic model. `projname` is the type of projection that used: "
"only the Von Mises projection is available with 'VM' or 'Von Mises'. "
"`datasigma` is the variable representing the constraints on the material."
" `previous_dep_name` represents the displacement at the previous time "
"step. Moreover, the finite element method on which `varname` is described"
" is an K ordered mesh_fem, the `datasigma` one have to be at least an K-1"
" ordered mesh_fem. `datalambda` and `datamu` are the Lame coefficients of"
" the studied material. `datathreshold` is the plasticity threshold of the"
" material. The three last variables could be constants or described on "
"the same finite element method. `region` is an optional mesh region on "
"which the term is added. If it is not specified, it is added on the whole"
" mesh. Return the brick index in the model."
msgstr ""

# c1852039bd4846d888409c1ace8e2173
#: ../source/matlab/cmdref_gf_model_set.rst:1091
msgid ""
"``ind = gf_model_set(model M, 'add finite strain elastoplasticity brick',"
" mesh_im mim , string lawname, string unknowns_type [, string varnames, "
"...] [, string params, ...] [, int region = -1])``"
msgstr ""

# 5a62bfb59f2e41e9a39573fe057ca2ee
#: ../source/matlab/cmdref_gf_model_set.rst:1093
msgid ""
"Add a finite strain elastoplasticity brick to the model. For the moment "
"there is only one supported law defined through `lawname` as "
"\"Simo_Miehe\". This law supports to possibilities of unknown variables "
"to solve for defined by means of `unknowns_type` set to either "
"'DISPLACEMENT_AND_PLASTIC_MULTIPLIER' (integer value 1) or "
"'DISPLACEMENT_AND_PLASTIC_MULTIPLIER_AND_PRESSURE' (integer value 3). The"
"  \"Simo_Miehe\" law expects as `varnames` a set of the following names "
"that have to be defined as variables in the model:"
msgstr ""

# b0540c71ff854d5dbff22cb090d8bc08
#: ../source/matlab/cmdref_gf_model_set.rst:1103
msgid "the displacement variable which has to be defined as an unknown,"
msgstr ""

# 0179dcc289754ef786a8db96593bf9e1
#: ../source/matlab/cmdref_gf_model_set.rst:1104
msgid "the plastic multiplier which has also defined as an unknown,"
msgstr ""

# 5fc6ea61c751442593587b8f09cc796a
#: ../source/matlab/cmdref_gf_model_set.rst:1105
msgid ""
"optionally the pressure variable for a mixed displacement-pressure "
"formulation for 'DISPLACEMENT_AND_PLASTIC_MULTIPLIER_AND_PRESSURE' as "
"`unknowns_type`,"
msgstr ""

# dae441b07c9f4563ad0fb5f0e6dfe961
#: ../source/matlab/cmdref_gf_model_set.rst:1108
msgid ""
"the name of a (scalar) fem_data or im_data field that holds the plastic "
"strain at the previous time step, and"
msgstr ""

# fbcf2b2ef13e4c9b84f3bb2530404dce
#: ../source/matlab/cmdref_gf_model_set.rst:1110
msgid ""
"the name of a fem_data or im_data field that holds all non-repeated "
"components of the inverse of the plastic right Cauchy-Green tensor at the"
" previous time step (it has to be a 4 element vector for plane strain 2D "
"problems and a 6 element vector for 3D problems)."
msgstr ""

# 15bf30c374c24adf8d789d2a22f286f2
#: ../source/matlab/cmdref_gf_model_set.rst:1116
msgid ""
"The  \"Simo_Miehe\" law also expects as `params` a set of the following "
"three parameters:"
msgstr ""

# a415882d280545b6a62b506c8fc4f642
#: ../source/matlab/cmdref_gf_model_set.rst:1119
msgid "an expression for the initial bulk modulus K,"
msgstr ""

# a9b134e899304dada2f779586d4ad417
#: ../source/matlab/cmdref_gf_model_set.rst:1120
msgid "an expression for the initial shear modulus G,"
msgstr ""

# f02d5de1734e434caa6b8e6e29ed4716
#: ../source/matlab/cmdref_gf_model_set.rst:1121
msgid ""
"the name of a user predefined function that decribes the yield limit as a"
" function of the hardening variable (both the yield limit and the "
"hardening variable values are assumed to be Frobenius norms of "
"appropriate stress and strain tensors, respectively)."
msgstr ""

# cd2e11d5293e4a3b990300aba137ca72
#: ../source/matlab/cmdref_gf_model_set.rst:1127
msgid ""
"As usual, `region` is an optional mesh region on which the term is added."
" If it is not specified, it is added on the whole mesh. Return the brick "
"index in the model."
msgstr ""

# 49bb71d0edc6418ea3c5890fd21b7ff2
#: ../source/matlab/cmdref_gf_model_set.rst:1132
msgid ""
"``ind = gf_model_set(model M, 'add nonlinear incompressibility brick', "
"mesh_im mim, string varname, string multname_pressure[, int region])``"
msgstr ""

# 8f75dca50d23492c8bd8a38c734feea2
#: ../source/matlab/cmdref_gf_model_set.rst:1134
msgid ""
"Add a nonlinear incompressibility condition on `variable` (for large "
"strain elasticity). `multname_pressure` is a variable which represent the"
" pressure. Be aware that an inf-sup condition between the finite element "
"method describing the pressure and the primal variable has to be "
"satisfied. `region` is an optional mesh region on which the term is "
"added. If it is not specified, it is added on the whole mesh. Return the "
"brick index in the model."
msgstr ""

# df751d03a743490d9f93b408cde4c3c1
#: ../source/matlab/cmdref_gf_model_set.rst:1143
msgid ""
"``ind = gf_model_set(model M, 'add finite strain incompressibility "
"brick', mesh_im mim, string varname, string multname_pressure[, int "
"region])``"
msgstr ""

# a5d15a0fad2a43fe8c3430169ebb0fd1
#: ../source/matlab/cmdref_gf_model_set.rst:1145
msgid ""
"Add a finite strain incompressibility condition on `variable` (for large "
"strain elasticity). `multname_pressure` is a variable which represent the"
" pressure. Be aware that an inf-sup condition between the finite element "
"method describing the pressure and the primal variable has to be "
"satisfied. `region` is an optional mesh region on which the term is "
"added. If it is not specified, it is added on the whole mesh. Return the "
"brick index in the model. This brick is equivalent to the ``nonlinear "
"incompressibility brick`` but uses the high-level generic assembly adding"
" the term ``p*(1-Det(Id(meshdim)+Grad_u))`` if ``p`` is the multiplier "
"and ``u`` the variable which represent the displacement."
msgstr ""

# ace25f8797fa4771bc0f379e8454fb32
#: ../source/matlab/cmdref_gf_model_set.rst:1158
msgid ""
"``ind = gf_model_set(model M, 'add bilaplacian brick', mesh_im mim, "
"string varname, string dataname [, int region])``"
msgstr ""

# 5b6011091f444212aeb3d9bf834c6ab2
#: ../source/matlab/cmdref_gf_model_set.rst:1160
msgid ""
"Add a bilaplacian brick on the variable `varname` and on the mesh region "
"`region`. This represent a term :math:`\\Delta(D \\Delta u)`. where "
":math:`D(x)` is a coefficient determined by `dataname` which could be "
"constant or described on a f.e.m. The corresponding weak form is "
":math:`\\int D(x)\\Delta u(x) \\Delta v(x) dx`. Return the brick index in"
" the model."
msgstr ""

# da66ae3cc97d45f4a83aabe232564d88
#: ../source/matlab/cmdref_gf_model_set.rst:1169
msgid ""
"``ind = gf_model_set(model M, 'add Kirchhoff-Love plate brick', mesh_im "
"mim, string varname, string dataname_D, string dataname_nu [, int "
"region])``"
msgstr ""

# 01e63d81abec45e89e7cd1f08f53bb2b
#: ../source/matlab/cmdref_gf_model_set.rst:1171
msgid ""
"Add a bilaplacian brick on the variable `varname` and on the mesh region "
"`region`. This represent a term :math:`\\Delta(D \\Delta u)` where "
":math:`D(x)` is a the flexion modulus determined by `dataname_D`. The "
"term is integrated by part following a Kirchhoff-Love plate model with "
"`dataname_nu` the poisson ratio. Return the brick index in the model."
msgstr ""

# 55106c6a474f4509baa3d58201a47abf
#: ../source/matlab/cmdref_gf_model_set.rst:1180
msgid ""
"``ind = gf_model_set(model M, 'add normal derivative source term brick', "
"mesh_im mim, string varname, string dataname, int region)``"
msgstr ""

# 4a0c2ae6785a46b89de1c7ba12046873
#: ../source/matlab/cmdref_gf_model_set.rst:1182
msgid ""
"Add a normal derivative source term brick :math:`F = \\int b.\\partial_n "
"v` on the variable `varname` and the mesh region `region`."
msgstr ""

# a3176b83185d4fd782ce37e3dd6423a4
#: ../source/matlab/cmdref_gf_model_set.rst:1186
msgid ""
"Update the right hand side of the linear system. `dataname` represents "
"`b` and `varname` represents `v`. Return the brick index in the model."
msgstr ""

# eadbd2c254cc460ebee28b2a8243335c
#: ../source/matlab/cmdref_gf_model_set.rst:1191
msgid ""
"``ind = gf_model_set(model M, 'add Kirchhoff-Love Neumann term brick', "
"mesh_im mim, string varname, string dataname_M, string dataname_divM, int"
" region)``"
msgstr ""

# 116c18866eee48c2acfc8b38788a51bd
#: ../source/matlab/cmdref_gf_model_set.rst:1193
msgid ""
"Add a Neumann term brick for Kirchhoff-Love model on the variable "
"`varname` and the mesh region `region`. `dataname_M` represents the "
"bending moment tensor and  `dataname_divM` its divergence. Return the "
"brick index in the model."
msgstr ""

# a29cca6e76c340a98d3347907569fd9d
#: ../source/matlab/cmdref_gf_model_set.rst:1200
msgid ""
"``ind = gf_model_set(model M, 'add normal derivative Dirichlet condition "
"with multipliers', mesh_im mim, string varname, mult_description, int "
"region [, string dataname, int R_must_be_derivated])``"
msgstr ""

# 477b376b729f4f609c93840091f5c18e
#: ../source/matlab/cmdref_gf_model_set.rst:1202
msgid ""
"Add a Dirichlet condition on the normal derivative of the variable "
"`varname` and on the mesh region `region` (which should be a boundary. "
"The general form is :math:`\\int \\partial_n u(x)v(x) = \\int r(x)v(x) "
"\\forall v` where :math:`r(x)` is the right hand side for the Dirichlet "
"condition (0 for homogeneous conditions) and :math:`v` is in a space of "
"multipliers defined by `mult_description`. If `mult_description` is a "
"string this is assumed to be the variable name corresponding to the "
"multiplier (which should be first declared as a multiplier variable on "
"the mesh region in the model). If it is a finite element method (mesh_fem"
" object) then a multiplier variable will be added to the model and build "
"on this finite element method (it will be restricted to the mesh region "
"`region` and eventually some conflicting dofs with some other multiplier "
"variables will be suppressed). If it is an integer, then a  multiplier "
"variable will be added to the model and build on a classical finite "
"element of degree that integer. `dataname` is an optional parameter which"
" represents the right hand side of the Dirichlet condition. If "
"`R_must_be_derivated` is set to `true` then the normal derivative of "
"`dataname` is considered. Return the brick index in the model."
msgstr ""

# fe19ceb7d49341f9b9a599997a86c291
#: ../source/matlab/cmdref_gf_model_set.rst:1226
msgid ""
"``ind = gf_model_set(model M, 'add normal derivative Dirichlet condition "
"with penalization', mesh_im mim, string varname, scalar coeff, int region"
" [, string dataname, int R_must_be_derivated])``"
msgstr ""

# 352148a91a58482583e59ec9a0600d5f
#: ../source/matlab/cmdref_gf_model_set.rst:1228
msgid ""
"Add a Dirichlet condition on the normal derivative of the variable "
"`varname` and on the mesh region `region` (which should be a boundary. "
"The general form is :math:`\\int \\partial_n u(x)v(x) = \\int r(x)v(x) "
"\\forall v` where :math:`r(x)` is the right hand side for the Dirichlet "
"condition (0 for homogeneous conditions). The penalization coefficient is"
" initially `coeff` and will be added to the data of the model. It can be "
"changed with the command gf_model_set(model M, 'change penalization "
"coeff'). `dataname` is an optional parameter which represents the right "
"hand side of the Dirichlet condition. If `R_must_be_derivated` is set to "
"`true` then the normal derivative of `dataname` is considered. Return the"
" brick index in the model."
msgstr ""

# 4b83a6e55c724c22b879620baabdb85c
#: ../source/matlab/cmdref_gf_model_set.rst:1245
msgid ""
"``ind = gf_model_set(model M, 'add Mindlin Reissner plate brick', mesh_im"
" mim, mesh_im mim_reduced, string varname_u3, string varname_theta , "
"string param_E, string param_nu, string param_epsilon, string param_kappa"
" [,int variant [, int region]])``"
msgstr ""

# 7fdae505a0e94cc9b388bb08b95c6ff4
#: ../source/matlab/cmdref_gf_model_set.rst:1247
msgid ""
"Add a term corresponding to the classical Reissner-Mindlin plate model "
"for which `varname_u3` is the transverse displacement, `varname_theta` "
"the rotation of fibers normal to the midplane, 'param_E' the Young "
"Modulus, `param_nu` the poisson ratio, `param_epsilon` the plate "
"thickness, `param_kappa` the shear correction factor. Note that since "
"this brick uses the high level generic assembly language, the parameter "
"can be regular expression of this language. There are three variants. "
"`variant = 0` corresponds to the an unreduced formulation and in that "
"case only the integration method `mim` is used. Practically this variant "
"is not usable since it is subject to a strong locking phenomenon. "
"`variant = 1` corresponds to a reduced integration where `mim` is used "
"for the rotation term and `mim_reduced` for the transverse shear term. "
"`variant = 2` (default) corresponds to the projection onto a rotated RT0 "
"element of the transverse shear term. For the moment, this is adapted to "
"quadrilateral only (because it is not sufficient to remove the locking "
"phenomenon on triangle elements). Note also that if you use high order "
"elements, the projection on RT0 will reduce the order of the "
"approximation. Returns the brick index in the model."
msgstr ""

# d471d275f7cd4733af9dc1dd89983f5e
#: ../source/matlab/cmdref_gf_model_set.rst:1273
msgid ""
"``ind = gf_model_set(model M, 'add mass brick', mesh_im mim, string "
"varname[, string dataexpr_rho[, int region]])``"
msgstr ""

# 571014ba37b84add9412ed1bee86694c
#: ../source/matlab/cmdref_gf_model_set.rst:1275
msgid ""
"Add mass term to the model relatively to the variable `varname`. If "
"specified, the data `dataexpr_rho` is the density (1 if omitted). "
"`region` is an optional mesh region on which the term is added. If it is "
"not specified, it is added on the whole mesh. Return the brick index in "
"the model."
msgstr ""

# d74a2369a2bd493a8dfcd85b544c6d27
#: ../source/matlab/cmdref_gf_model_set.rst:1282
msgid "``gf_model_set(model M, 'shift variables for time integration')``"
msgstr ""

# 1ad150b03bab46a2b0c0bed6727250dd
#: ../source/matlab/cmdref_gf_model_set.rst:1284
msgid ""
"Function used to shift the variables of a model to the data corresponding"
" of ther value on the previous time step for time integration schemes. "
"For each variable for which a time integration scheme has been declared, "
"the scheme is called to perform the shift. This function has to be called"
" between two time steps."
msgstr ""

# f614ab6ecd804df4b79319f897c4e379
#: ../source/matlab/cmdref_gf_model_set.rst:1291
msgid "``gf_model_set(model M, 'perform init time derivative', scalar ddt)``"
msgstr ""

# 78ab65774ec74c56bfae5936e7247dc3
#: ../source/matlab/cmdref_gf_model_set.rst:1293
msgid ""
"By calling this function, indicates that the next solve will compute the "
"solution for a (very) small time step `ddt` in order to initalize the "
"data corresponding to the derivatives needed by time integration schemes "
"(mainly the initial time derivative for order one in time problems  and "
"the second order time derivative for second order in time problems). The "
"next solve will not change the value of the variables."
msgstr ""

# 6cb89d240dda459bb481b44a80c1fffd
#: ../source/matlab/cmdref_gf_model_set.rst:1301
msgid "``gf_model_set(model M, 'set time step', scalar dt)``"
msgstr ""

# b59093784de14dbea87c7b8c82e85ed1
#: ../source/matlab/cmdref_gf_model_set.rst:1303
msgid ""
"Set the value of the time step to `dt`. This value can be change from a "
"step to another for all one-step schemes (i.e for the moment to all "
"proposed time integration schemes)."
msgstr ""

# f6dc6248575d49daa321c8a940c331c9
#: ../source/matlab/cmdref_gf_model_set.rst:1308
msgid "``gf_model_set(model M, 'set time', scalar t)``"
msgstr ""

# f3883273dc184a56a3a98c40ddd00f50
#: ../source/matlab/cmdref_gf_model_set.rst:1310
msgid "Set the value of the data `t` corresponding to the current time to `t`."
msgstr ""

# e999e5634e9c4b92a705103c07641a8f
#: ../source/matlab/cmdref_gf_model_set.rst:1314
msgid ""
"``gf_model_set(model M, 'add theta method for first order', string "
"varname, scalar theta)``"
msgstr ""

# 5ef63a3eb0e04670a7ba72501b125e58
#: ../source/matlab/cmdref_gf_model_set.rst:1316
msgid ""
"Attach a theta method for the time discretization of the variable "
"`varname`. Valid only if there is at most first order time derivative of "
"the variable."
msgstr ""

# 8cca4fbbcfc94fc085d2fd0ddfb94f85
#: ../source/matlab/cmdref_gf_model_set.rst:1321
msgid ""
"``gf_model_set(model M, 'add theta method for second order', string "
"varname, scalar theta)``"
msgstr ""

# 238d4c8babf04e43a9f2d3e228ed9c88
# cba17bab3b6d4186b2a5f4fbb97ab620
#: ../source/matlab/cmdref_gf_model_set.rst:1323
#: ../source/matlab/cmdref_gf_model_set.rst:1330
msgid ""
"Attach a theta method for the time discretization of the variable "
"`varname`. Valid only if there is at most second order time derivative of"
" the variable."
msgstr ""

# 5459c50223204a0fb057582756b88759
#: ../source/matlab/cmdref_gf_model_set.rst:1328
msgid ""
"``gf_model_set(model M, 'add Newmark scheme', string varname, scalar "
"beta, scalar gamma)``"
msgstr ""

# 87f80babcb8049529e9b3121868c78cf
#: ../source/matlab/cmdref_gf_model_set.rst:1335
msgid "``gf_model_set(model M, 'disable bricks', ivec bricks_indices)``"
msgstr ""

# 99b4b5049a7b4660866075228b4969b5
#: ../source/matlab/cmdref_gf_model_set.rst:1337
msgid ""
"Disable a brick (the brick will no longer participate to the building of "
"the tangent linear system)."
msgstr ""

# 9c371ea158c34bd19b73c931c743a8aa
#: ../source/matlab/cmdref_gf_model_set.rst:1341
msgid "``gf_model_set(model M, 'enable bricks', ivec bricks_indices)``"
msgstr ""

# 43f45bac5dc44742be8ea9ada2e8dded
#: ../source/matlab/cmdref_gf_model_set.rst:1343
msgid "Enable a disabled brick."
msgstr ""

# e69cea964e0d4880aad5543f3c59b1e5
#: ../source/matlab/cmdref_gf_model_set.rst:1346
msgid "``gf_model_set(model M, 'disable variable', string varname)``"
msgstr ""

# 5591e4fc610844279184ac12b2354b00
#: ../source/matlab/cmdref_gf_model_set.rst:1348
msgid ""
"Disable a variable for a solve (and its attached multipliers). The next "
"solve will operate only on the remaining variables. This allows to solve "
"separately different parts of a model. If there is a strong coupling of "
"the variables, a fixed point strategy can the be used."
msgstr ""

# de0a8945e8e343118174a49121e0d142
#: ../source/matlab/cmdref_gf_model_set.rst:1355
msgid "``gf_model_set(model M, 'enable variable', string varname)``"
msgstr ""

# b2647389a0f345a18607bf50fe29d865
#: ../source/matlab/cmdref_gf_model_set.rst:1357
msgid "Enable a disabled variable (and its attached multipliers)."
msgstr ""

# 90a5fbdc684c44d5bd1d780797335255
#: ../source/matlab/cmdref_gf_model_set.rst:1360
msgid "``gf_model_set(model M, 'first iter')``"
msgstr ""

# a0ea23ba6f46475e9ea8ab72f07588fd
#: ../source/matlab/cmdref_gf_model_set.rst:1362
msgid "To be executed before the first iteration of a time integration scheme."
msgstr ""

# 67bbe23de6aa414f922c0be6683b4a2b
#: ../source/matlab/cmdref_gf_model_set.rst:1366
msgid "``gf_model_set(model M, 'next iter')``"
msgstr ""

# 68601b2f8bc24ba2959f3a58876c6af9
#: ../source/matlab/cmdref_gf_model_set.rst:1368
msgid "To be executed at the end of each iteration of a time integration scheme."
msgstr ""

# d1c78efea2684351b6a679cc8c186d1f
#: ../source/matlab/cmdref_gf_model_set.rst:1372
msgid ""
"``ind = gf_model_set(model M, 'add basic contact brick', string "
"varname_u, string multname_n[, string multname_t], string dataname_r, "
"spmat BN[, spmat BT, string dataname_friction_coeff][, string "
"dataname_gap[, string dataname_alpha[, int augmented_version[, string "
"dataname_gamma, string dataname_wt]]])``"
msgstr ""

# 88c527d411b94ca995c711970c69590e
#: ../source/matlab/cmdref_gf_model_set.rst:1374
msgid ""
"Add a contact with or without friction brick to the model. If U is the "
"vector of degrees of freedom on which the unilateral constraint is "
"applied, the matrix `BN` have to be such that this constraint is defined "
"by :math:`B_N U \\le 0`. A friction condition can be considered by adding"
" the three parameters `multname_t`, `BT` and `dataname_friction_coeff`. "
"In this case, the tangential displacement is :math:`B_T U` and the matrix"
" `BT` should have as many rows as `BN` multiplied by :math:`d-1` where "
":math:`d` is the domain dimension. In this case also, "
"`dataname_friction_coeff` is a data which represents the coefficient of "
"friction. It can be a scalar or a vector representing a value on each "
"contact condition.  The unilateral constraint is prescribed thank to a "
"multiplier `multname_n` whose dimension should be equal to the number of "
"rows of `BN`. If a friction condition is added, it is prescribed with a "
"multiplier `multname_t` whose dimension should be equal to the number of "
"rows of `BT`. The augmentation parameter `r` should be chosen in a range "
"of acceptabe values (see Getfem user documentation). `dataname_gap` is an"
" optional parameter representing the initial gap. It can be a single "
"value or a vector of value. `dataname_alpha` is an optional "
"homogenization parameter for the augmentation parameter (see Getfem user "
"documentation).  The parameter `augmented_version` indicates the "
"augmentation strategy : 1 for the non-symmetric Alart-Curnier augmented "
"Lagrangian, 2 for the symmetric one (except for the coupling between "
"contact and Coulomb friction), 3 for the unsymmetric method with "
"augmented multipliers, 4 for the unsymmetric method with augmented "
"multipliers and De Saxce projection."
msgstr ""

# 4ca68d8c3fee43ce859f856c7d1d7d51
#: ../source/matlab/cmdref_gf_model_set.rst:1404
msgid ""
"``ind = gf_model_set(model M, 'add basic contact brick two deformable "
"bodies', string varname_u1, string varname_u2, string multname_n, string "
"dataname_r, spmat BN1, spmat BN2[, string dataname_gap[, string "
"dataname_alpha[, int augmented_version]]])``"
msgstr ""

# 86c1accdd374469f92e3195fd34edce1
#: ../source/matlab/cmdref_gf_model_set.rst:1423
msgid "Add a frictionless contact condition to the model between two deformable"
msgstr ""

# 97d69b6c71f440c988e2eb00c64691cf
#: ../source/matlab/cmdref_gf_model_set.rst:1407
msgid ""
"bodies. If U1, U2 are the vector of degrees of freedom on which the "
"unilateral constraint is applied, the matrices `BN1` and `BN2` have to be"
" such that this condition is defined by $B_{N1} U_1 B_{N2} U_2 + \\le "
"gap$. The constraint is prescribed thank to a multiplier `multname_n` "
"whose dimension should be equal to the number of lines of `BN`. The "
"augmentation parameter `r` should be chosen in a range of acceptabe "
"values (see Getfem user documentation). `dataname_gap` is an optional "
"parameter representing the initial gap. It can be a single value or a "
"vector of value. `dataname_alpha` is an optional homogenization parameter"
" for the augmentation parameter (see Getfem user documentation). The "
"parameter `aug_version` indicates the augmentation strategy : 1 for the "
"non-symmetric Alart-Curnier augmented Lagrangian, 2 for the symmetric "
"one, 3 for the unsymmetric method with augmented multiplier."
msgstr ""

# afa5956f5d71415091ee38f53a5a2126
#: ../source/matlab/cmdref_gf_model_set.rst:1425
msgid "``gf_model_set(model M, 'contact brick set BN', int indbrick, spmat BN)``"
msgstr ""

# 15224807f22e4f02895443f0747fd003
#: ../source/matlab/cmdref_gf_model_set.rst:1427
msgid "Can be used to set the BN matrix of a basic contact/friction brick."
msgstr ""

# d42ab73184204e0e98e164996e85d970
#: ../source/matlab/cmdref_gf_model_set.rst:1430
msgid "``gf_model_set(model M, 'contact brick set BT', int indbrick, spmat BT)``"
msgstr ""

# 26882e54ff014c2ab83b89d6137e933b
#: ../source/matlab/cmdref_gf_model_set.rst:1432
msgid "Can be used to set the BT matrix of a basic contact with friction brick."
msgstr ""

# 82f970e637f042d1bfa898ee2c3e72a6
#: ../source/matlab/cmdref_gf_model_set.rst:1436
msgid ""
"``ind = gf_model_set(model M, 'add nodal contact with rigid obstacle "
"brick',  mesh_im mim, string varname_u, string multname_n[, string "
"multname_t], string dataname_r[, string dataname_friction_coeff], int "
"region, string obstacle[,  int augmented_version])``"
msgstr ""

# 41066aa0560143c7af4aa6f8fd8e88bc
#: ../source/matlab/cmdref_gf_model_set.rst:1438
msgid ""
"Add a contact with or without friction condition with a rigid obstacle to"
" the model. The condition is applied on the variable `varname_u` on the "
"boundary corresponding to `region`. The rigid obstacle should be "
"described with the string `obstacle` being a signed distance to the "
"obstacle. This string should be an expression where the coordinates are "
"'x', 'y' in 2D and 'x', 'y', 'z' in 3D. For instance, if the rigid "
"obstacle correspond to :math:`z \\le 0`, the corresponding signed "
"distance will be simply \"z\". `multname_n` should be a fixed size "
"variable whose size is the number of degrees of freedom on boundary "
"`region`. It represents the contact equivalent nodal forces. In order to "
"add a friction condition one has to add the `multname_t` and "
"`dataname_friction_coeff` parameters. `multname_t` should be a fixed size"
" variable whose size is the number of degrees of freedom on boundary "
"`region` multiplied by :math:`d-1` where :math:`d` is the domain "
"dimension. It represents the friction equivalent nodal forces. The "
"augmentation parameter `r` should be chosen in a range of acceptabe "
"values (close to the Young modulus of the elastic body, see Getfem user "
"documentation).  `dataname_friction_coeff` is the friction coefficient. "
"It could be a scalar or a vector of values representing the friction "
"coefficient on each contact node. The parameter `augmented_version` "
"indicates the augmentation strategy : 1 for the non-symmetric Alart-"
"Curnier augmented Lagrangian, 2 for the symmetric one (except for the "
"coupling between contact and Coulomb friction), 3 for the new unsymmetric"
" method. Basically, this brick compute the matrix BN and the vectors gap "
"and alpha and calls the basic contact brick."
msgstr ""

# fcfc1270fde34061a9fd0f190cecaec0
#: ../source/matlab/cmdref_gf_model_set.rst:1467
msgid ""
"``ind = gf_model_set(model M, 'add contact with rigid obstacle brick',  "
"mesh_im mim, string varname_u, string multname_n[, string multname_t], "
"string dataname_r[, string dataname_friction_coeff], int region, string "
"obstacle[,  int augmented_version])``"
msgstr ""

# 902e3482b7324f79ad63536d8dfc9d22
#: ../source/matlab/cmdref_gf_model_set.rst:1469
msgid ""
"DEPRECATED FUNCTION. Use 'add nodal contact with rigid obstacle brick' "
"instead."
msgstr ""

# 78bed1fa94e74041b702963a90ad1dbc
#: ../source/matlab/cmdref_gf_model_set.rst:1472
msgid ""
"``ind = gf_model_set(model M, 'add integral contact with rigid obstacle "
"brick',  mesh_im mim, string varname_u, string multname, string "
"dataname_obstacle, string dataname_r [, string dataname_friction_coeff], "
"int region [, int option [, string dataname_alpha [, string dataname_wt "
"[, string dataname_gamma [, string dataname_vt]]]]])``"
msgstr ""

# 97a6c65d4d014fd2a5defdfc58d5c6e4
#: ../source/matlab/cmdref_gf_model_set.rst:1474
msgid ""
"Add a contact with or without friction condition with a rigid obstacle to"
" the model. This brick adds a contact which is defined in an integral "
"way. It is the direct approximation of an augmented Lagrangian "
"formulation (see Getfem user documentation) defined at the continuous "
"level. The advantage is a better scalability: the number of Newton "
"iterations should be more or less independent of the mesh size. The "
"contact condition is applied on the variable `varname_u` on the boundary "
"corresponding to `region`. The rigid obstacle should be described with "
"the data `dataname_obstacle` being a signed distance to the obstacle "
"(interpolated on a finite element method). `multname` should be a fem "
"variable representing the contact stress. An inf-sup condition beetween "
"`multname` and `varname_u` is required. The augmentation parameter "
"`dataname_r` should be chosen in a range of acceptabe values. The "
"optional parameter `dataname_friction_coeff` is the friction coefficient "
"which could be constant or defined on a finite element method. Possible "
"values for `option` is 1 for the non-symmetric Alart-Curnier augmented "
"Lagrangian method, 2 for the symmetric one, 3 for the non-symmetric "
"Alart-Curnier method with an additional augmentation and 4 for a new "
"unsymmetric method. The default value is 1. In case of contact with "
"friction, `dataname_alpha` and `dataname_wt` are optional parameters to "
"solve evolutionary friction problems. `dataname_gamma` and `dataname_vt` "
"represent optional data for adding a parameter-dependent sliding velocity"
" to the friction condition."
msgstr ""

# 3ee989a884f54f89bc90b49080394102
#: ../source/matlab/cmdref_gf_model_set.rst:1501
msgid ""
"``ind = gf_model_set(model M, 'add penalized contact with rigid obstacle "
"brick',  mesh_im mim, string varname_u, string dataname_obstacle, string "
"dataname_r [, string dataname_coeff], int region [, int option, string "
"dataname_lambda, [, string dataname_alpha [, string dataname_wt]]])``"
msgstr ""

# 5782a59ea2514866b32c7a2be397881c
#: ../source/matlab/cmdref_gf_model_set.rst:1503
msgid ""
"Add a penalized contact with or without friction condition with a rigid "
"obstacle to the model. The condition is applied on the variable "
"`varname_u` on the boundary corresponding to `region`. The rigid obstacle"
" should be described with the data `dataname_obstacle` being a signed "
"distance to the obstacle (interpolated on a finite element method). The "
"penalization parameter `dataname_r` should be chosen large enough to "
"prescribe approximate non-penetration and friction conditions but not too"
" large not to deteriorate too much the conditionning of the tangent "
"system. `dataname_lambda` is an optional parameter used if option is 2. "
"In that case, the penalization term is shifted by lambda (this allows the"
" use of an Uzawa algorithm on the corresponding augmented Lagrangian "
"formulation)"
msgstr ""

# 107faf5f16904ec4b402b6cb187b471d
#: ../source/matlab/cmdref_gf_model_set.rst:1520
msgid ""
"``ind = gf_model_set(model M, 'add Nitsche contact with rigid obstacle "
"brick', mesh_im mim, string varname, string Neumannterm, string "
"dataname_obstacle, string gamma0name,  int region[, scalar theta[, string"
" dataname_friction_coeff[, string dataname_alpha, string "
"dataname_wt]]])``"
msgstr ""

# a86db0f35f974826b3cd181ecb5f3043
#: ../source/matlab/cmdref_gf_model_set.rst:1522
msgid ""
"Adds a contact condition with or without Coulomb friction on the variable"
" `varname` and the mesh boundary `region`. The contact condition is "
"prescribed with Nitsche's method. The rigid obstacle should be described "
"with the data `dataname_obstacle` being a signed distance to the obstacle"
" (interpolated on a finite element method). `gamma0name` is the Nitsche's"
" method parameter. `theta` is a scalar value which can be positive or "
"negative. `theta = 1` corresponds to the standard symmetric method which "
"is conditionnaly coercive for  `gamma0` small. `theta = -1` corresponds "
"to the skew-symmetric method which is inconditionnaly coercive. `theta = "
"0` is the simplest method for which the second derivative of the Neumann "
"term is not necessary. The optional parameter `dataname_friction_coeff` "
"is the friction coefficient which could be constant or defined on a "
"finite element method. CAUTION: This brick has to be added in the model "
"after all the bricks corresponding to partial differential terms having a"
" Neumann term. Moreover, This brick can only be applied to bricks "
"declaring their Neumann terms. Returns the brick index in the model."
msgstr ""

# f3e1e1ceb01344b39fff5a139f619e0b
#: ../source/matlab/cmdref_gf_model_set.rst:1544
msgid ""
"``ind = gf_model_set(model M, 'add Nitsche midpoint contact with rigid "
"obstacle brick', mesh_im mim, string varname, string Neumannterm, string "
"Neumannterm_wt, string dataname_obstacle, string gamma0name,  int region,"
" scalar theta, string dataname_friction_coeff, string dataname_alpha, "
"string dataname_wt)``"
msgstr ""

# 65fad12d831f4f85940172ebeb3bdd33
#: ../source/matlab/cmdref_gf_model_set.rst:1546
msgid ""
"EXPERIMENTAL BRICK: for midpoint scheme only !! Adds a contact condition "
"with or without Coulomb friction on the variable `varname` and the mesh "
"boundary `region`. The contact condition is prescribed with Nitsche's "
"method. The rigid obstacle should be described with the data "
"`dataname_obstacle` being a signed distance to the obstacle (interpolated"
" on a finite element method). `gamma0name` is the Nitsche's method "
"parameter. `theta` is a scalar value which can be positive or negative. "
"`theta = 1` corresponds to the standard symmetric method which is "
"conditionnaly coercive for  `gamma0` small. `theta = -1` corresponds to "
"the skew-symmetric method which is inconditionnaly coercive. `theta = 0` "
"is the simplest method for which the second derivative of the Neumann "
"term is not necessary. The optional parameter `dataname_friction_coeff` "
"is the friction coefficient which could be constant or defined on a "
"finite element method. Returns the brick index in the model."
msgstr ""

# 3f2d2852596a47b7aac19bb28c26bc5b
#: ../source/matlab/cmdref_gf_model_set.rst:1567
msgid ""
"``ind = gf_model_set(model M, 'add Nitsche fictitious domain contact "
"brick', mesh_im mim, string varname1, string varname2, string "
"dataname_d1, string dataname_d2, string gamma0name [, scalar theta[, "
"string dataname_friction_coeff[, string dataname_alpha, string "
"dataname_wt1,string dataname_wt2]]])``"
msgstr ""

# 14c7fa9a8c6c4f1e8106ee117e64dcc5
#: ../source/matlab/cmdref_gf_model_set.rst:1569
msgid ""
"Adds a contact condition with or without Coulomb friction between two "
"bodies in a fictitious domain. The contact condition is applied on the "
"variable `varname_u1` corresponds with the first and slave body with "
"Nitsche's method and on the variable `varname_u2` corresponds with the "
"second and master body with Nitsche's method. The contact condition is "
"evaluated on the fictitious slave boundary. The first body should be "
"described by the level-set `dataname_d1` and the second body should be "
"described by the level-set `dataname_d2`. `gamma0name` is the Nitsche's "
"method parameter. `theta` is a scalar value which can be positive or "
"negative. `theta = 1` corresponds to the standard symmetric method which "
"is conditionnaly coercive for  `gamma0` small. `theta = -1` corresponds "
"to the skew-symmetric method which is inconditionnaly coercive. `theta = "
"0` is the simplest method for which the second derivative of the Neumann "
"term is not necessary. The optional parameter `dataname_friction_coeff` "
"is the friction coefficient which could be constant or defined on a "
"finite element method. CAUTION: This brick has to be added in the model "
"after all the bricks corresponding to partial differential terms having a"
" Neumann term. Moreover, This brick can only be applied to bricks "
"declaring their Neumann terms. Returns the brick index in the model."
msgstr ""

# 2d215e28afe84093820ec91effae4c08
#: ../source/matlab/cmdref_gf_model_set.rst:1592
msgid ""
"``ind = gf_model_set(model M, 'add nodal contact between nonmatching "
"meshes brick',  mesh_im mim1[, mesh_im mim2], string varname_u1[, string "
"varname_u2], string multname_n[, string multname_t], string dataname_r[, "
"string dataname_fr], int rg1, int rg2[, int slave1, int slave2,  int "
"augmented_version])``"
msgstr ""

# 6bdb768b29cf4cfeb7054da45d9fa200
#: ../source/matlab/cmdref_gf_model_set.rst:1594
msgid ""
"Add a contact with or without friction condition between two faces of one"
" or two elastic bodies. The condition is applied on the variable "
"`varname_u1` or the variables `varname_u1` and `varname_u2` depending if "
"a single or two distinct displacement fields are given. Integers `rg1` "
"and `rg2` represent the regions expected to come in contact with each "
"other. In the single displacement variable case the regions defined in "
"both `rg1` and `rg2` refer to the variable `varname_u1`. In the case of "
"two displacement variables, `rg1` refers to `varname_u1` and `rg2` refers"
" to `varname_u2`. `multname_n` should be a fixed size variable whose size"
" is the number of degrees of freedom on those regions among the ones "
"defined in `rg1` and `rg2` which are characterized as \"slaves\". It "
"represents the contact equivalent nodal normal forces. `multname_t` "
"should be a fixed size variable whose size corresponds to the size of "
"`multname_n` multiplied by qdim - 1 . It represents the contact "
"equivalent nodal tangent (frictional) forces. The augmentation parameter "
"`r` should be chosen in a range of acceptabe values (close to the Young "
"modulus of the elastic body, see Getfem user documentation). The friction"
" coefficient stored in the parameter `fr` is either a single value or a "
"vector of the same size as `multname_n`. The optional parameters `slave1`"
" and `slave2` declare if the regions defined in `rg1` and `rg2` are "
"correspondingly considered as \"slaves\". By default `slave1` is true and"
" `slave2` is false, i.e. `rg1` contains the slave surfaces, while 'rg2' "
"the master surfaces. Preferrably only one of `slave1` and `slave2` is set"
" to true.  The parameter `augmented_version` indicates the augmentation "
"strategy : 1 for the non-symmetric Alart-Curnier augmented Lagrangian, 2 "
"for the symmetric one (except for the coupling between contact and "
"Coulomb friction), 3 for the new unsymmetric method. Basically, this "
"brick computes the matrices BN and BT and the vectors gap and alpha and "
"calls the basic contact brick."
msgstr ""

# 15a9b05688e2489e8f91c52d64b421f3
#: ../source/matlab/cmdref_gf_model_set.rst:1626
msgid ""
"``ind = gf_model_set(model M, 'add nonmatching meshes contact brick',  "
"mesh_im mim1[, mesh_im mim2], string varname_u1[, string varname_u2], "
"string multname_n[, string multname_t], string dataname_r[, string "
"dataname_fr], int rg1, int rg2[, int slave1, int slave2,  int "
"augmented_version])``"
msgstr ""

# ec3a33cdf5a5464dbec96479f26eca7a
#: ../source/matlab/cmdref_gf_model_set.rst:1628
msgid ""
"DEPRECATED FUNCTION. Use 'add nodal contact between nonmatching meshes "
"brick' instead."
msgstr ""

# 5395d4021a504dd995550640ac650e23
#: ../source/matlab/cmdref_gf_model_set.rst:1631
msgid ""
"``ind = gf_model_set(model M, 'add integral contact between nonmatching "
"meshes brick',  mesh_im mim, string varname_u1, string varname_u2, string"
" multname, string dataname_r [, string dataname_friction_coeff], int "
"region1, int region2 [, int option [, string dataname_alpha [, string "
"dataname_wt1 , string dataname_wt2]]])``"
msgstr ""

# 39e1570ac47e4152bc82a55ff5dbfd44
#: ../source/matlab/cmdref_gf_model_set.rst:1633
msgid ""
"Add a contact with or without friction condition between nonmatching "
"meshes to the model. This brick adds a contact which is defined in an "
"integral way. It is the direct approximation of an augmented agrangian "
"formulation (see Getfem user documentation) defined at the continuous "
"level. The advantage should be a better scalability: the number of Newton"
" iterations should be more or less independent of the mesh size. The "
"condition is applied on the variables `varname_u1` and `varname_u2` on "
"the boundaries corresponding to `region1` and `region2`. `multname` "
"should be a fem variable representing the contact stress for the "
"frictionless case and the contact and friction stress for the case with "
"friction. An inf-sup condition between `multname` and `varname_u1` and "
"`varname_u2` is required. The augmentation parameter `dataname_r` should "
"be chosen in a range of acceptable values. The optional parameter "
"`dataname_friction_coeff` is the friction coefficient which could be "
"constant or defined on a finite element method on the same mesh as "
"`varname_u1`. Possible values for `option` is 1 for the non-symmetric "
"Alart-Curnier augmented Lagrangian method, 2 for the symmetric one, 3 for"
" the non-symmetric Alart-Curnier method with an additional augmentation "
"and 4 for a new unsymmetric method. The default value is 1. In case of "
"contact with friction, `dataname_alpha`, `dataname_wt1` and "
"`dataname_wt2` are optional parameters to solve evolutionary friction "
"problems."
msgstr ""

# b6c7dd5782524e9a92c197e12da9a136
#: ../source/matlab/cmdref_gf_model_set.rst:1661
msgid ""
"``ind = gf_model_set(model M, 'add penalized contact between nonmatching "
"meshes brick',  mesh_im mim, string varname_u1, string varname_u2, string"
" dataname_r [, string dataname_coeff], int region1, int region2 [, int "
"option [, string dataname_lambda, [, string dataname_alpha [, string "
"dataname_wt1, string dataname_wt2]]]])``"
msgstr ""

# 1633a81de1974ebcb66c811f451c9a60
#: ../source/matlab/cmdref_gf_model_set.rst:1663
msgid ""
"Add a penalized contact condition with or without friction between "
"nonmatching meshes to the model. The condition is applied on the "
"variables `varname_u1` and  `varname_u2` on the boundaries corresponding "
"to `region1` and `region2`. The penalization parameter `dataname_r` "
"should be chosen large enough to prescribe approximate non-penetration "
"and friction conditions but not too large not to deteriorate too much the"
" conditionning of the tangent system. The optional parameter "
"`dataname_friction_coeff` is the friction coefficient which could be "
"constant or defined on a finite element method on the same mesh as "
"`varname_u1`. `dataname_lambda` is an optional parameter used if option "
"is 2. In that case, the penalization term is shifted by lambda (this "
"allows the use of an Uzawa algorithm on the corresponding augmented "
"Lagrangian formulation) In case of contact with friction, "
"`dataname_alpha`, `dataname_wt1` and `dataname_wt2` are optional "
"parameters to solve evolutionary friction problems."
msgstr ""

# d0f207fb2449465b9daca4eee4d7367b
#: ../source/matlab/cmdref_gf_model_set.rst:1684
msgid ""
"``ind = gf_model_set(model M, 'add integral large sliding contact brick "
"raytracing', string dataname_r, scalar release_distance, [, string "
"dataname_fr[, string dataname_alpha[, int version]]])``"
msgstr ""

# 3cc2a49ad7d04effb17a0648f7302f35
#: ../source/matlab/cmdref_gf_model_set.rst:1686
msgid ""
"Adds a large sliding contact with friction brick to the model. This brick"
" is able to deal with self-contact, contact between several deformable "
"bodies and contact with rigid obstacles. It uses the high-level generic "
"assembly. It adds to the model a raytracing_interpolate_transformation "
"object. For each slave boundary a multiplier variable should be defined. "
"The release distance should be determined with care (generally a few "
"times a mean element size, and less than the thickness of the body). "
"Initially, the brick is added with no contact boundaries. The contact "
"boundaries and rigid bodies are added with special functions. `version` "
"is 0 (the default value) for the non-symmetric version and 1 for the more"
" symmetric one (not fully symmetric even without friction)."
msgstr ""

# de4e89e2f964455db8507876dea632d8
#: ../source/matlab/cmdref_gf_model_set.rst:1701
msgid ""
"``gf_model_set(model M, 'add rigid obstacle to large sliding contact "
"brick', int indbrick, string expr, int N)``"
msgstr ""

# 6328d0b0663c4ce6856332b98f9da0f7
# cd14b7405d924ad79a1fabb9e44a8a69
#: ../source/matlab/cmdref_gf_model_set.rst:1703
#: ../source/matlab/cmdref_gf_model_set.rst:1749
msgid ""
"Adds a rigid obstacle to an existing large sliding contact with friction "
"brick. `expr` is an expression using the high-level generic assembly "
"language (where `x` is the current point n the mesh) which should be a "
"signed distance to the obstacle. `N` is the mesh dimension."
msgstr ""

# dabefa288f6a4d0d8f622683a6d78cf4
#: ../source/matlab/cmdref_gf_model_set.rst:1710
msgid ""
"``gf_model_set(model M, 'add master contact boundary to large sliding "
"contact brick', int indbrick, mesh_im mim, int region, string dispname[, "
"string wname])``"
msgstr ""

# 69ba994a4c87476f9006463a9dc13e9e
#: ../source/matlab/cmdref_gf_model_set.rst:1712
msgid ""
"Adds a master contact boundary to an existing large sliding contact with "
"friction brick."
msgstr ""

# 8eae55034e4f4ed1be6594e1cc8487e1
#: ../source/matlab/cmdref_gf_model_set.rst:1716
msgid ""
"``gf_model_set(model M, 'add slave contact boundary to large sliding "
"contact brick', int indbrick, mesh_im mim, int region, string dispname, "
"string lambdaname[, string wname])``"
msgstr ""

# 49ed7c31fbdc406aa4e5a8264b98ec63
#: ../source/matlab/cmdref_gf_model_set.rst:1718
msgid ""
"Adds a slave contact boundary to an existing large sliding contact with "
"friction brick."
msgstr ""

# dfd336a39f3944c99137e2c0d7c30895
#: ../source/matlab/cmdref_gf_model_set.rst:1722
msgid ""
"``gf_model_set(model M, 'add master slave contact boundary to large "
"sliding contact brick', int indbrick, mesh_im mim, int region, string "
"dispname, string lambdaname[, string wname])``"
msgstr ""

# 9b9b934deaf94524b0eecb9fa3069df8
#: ../source/matlab/cmdref_gf_model_set.rst:1724
msgid ""
"Adds a contact boundary to an existing large sliding contact with "
"friction brick which is both master and slave (allowing the self-"
"contact)."
msgstr ""

# 01692e5d0d3d4c62a53302cab11aa24a
#: ../source/matlab/cmdref_gf_model_set.rst:1729
msgid ""
"``ind = gf_model_set(model M, 'add Nitsche large sliding contact brick "
"raytracing', bool unbiased_version, string dataname_r, scalar "
"release_distance[, string dataname_fr[, string dataname_alpha[, int "
"version]]])``"
msgstr ""

# b20aaa04b9ff46a38a0cfe529fdc2ad6
#: ../source/matlab/cmdref_gf_model_set.rst:1731
msgid ""
"Adds a large sliding contact with friction brick to the model based on "
"the Nitsche's method. This brick is able to deal with self-contact, "
"contact between several deformable bodies and contact with rigid "
"obstacles. It uses the high-level generic assembly. It adds to the model "
"a raytracing_interpolate_transformation object. \"unbiased_version\" "
"refers to the version of Nische's method to be used. (unbiased or biased "
"one). For each slave boundary a  material law should be defined as a "
"function of the dispacement variable on this boundary. The release "
"distance should be determined with care (generally a few times a mean "
"element size, and less than the thickness of the body). Initially, the "
"brick is added with no contact boundaries. The contact boundaries and "
"rigid bodies are added with special functions. `version` is 0 (the "
"default value) for the non-symmetric version and 1 for the more symmetric"
" one (not fully symmetric even without friction)."
msgstr ""

# 151cd24e32a34a17b9524785f8345bd4
#: ../source/matlab/cmdref_gf_model_set.rst:1747
msgid ""
"``gf_model_set(model M, 'add rigid obstacle to Nitsche large sliding "
"contact brick', int indbrick, string expr, int N)``"
msgstr ""

# 9b0b4e2898b64171aab25a999c80c072
#: ../source/matlab/cmdref_gf_model_set.rst:1756
msgid ""
"``gf_model_set(model M, 'add master contact boundary to biased Nitsche "
"large sliding contact brick', int indbrick, mesh_im mim, int region, "
"string dispname[, string wname])``"
msgstr ""

# 4627fd3c92224b35acaa3c9f51dd9501
#: ../source/matlab/cmdref_gf_model_set.rst:1758
msgid ""
"Adds a master contact boundary to an existing biased Nitsche's large "
"sliding contact with friction brick."
msgstr ""

# ce1fd50f73e94e1f8acbb0f0948861a3
#: ../source/matlab/cmdref_gf_model_set.rst:1762
msgid ""
"``gf_model_set(model M, 'add slave contact boundary to biased Nitsche "
"large sliding contact brick', int indbrick, mesh_im mim, int region, "
"string dispname, string lambdaname[, string wname])``"
msgstr ""

# 31aa5c1593b645d5adc7390c92bc96b5
#: ../source/matlab/cmdref_gf_model_set.rst:1764
msgid ""
"Adds a slave contact boundary to an existing biased Nitsche's large "
"sliding contact with friction brick."
msgstr ""

# 210ac021a0094f4398287ed49872d754
#: ../source/matlab/cmdref_gf_model_set.rst:1768
msgid ""
"``gf_model_set(model M, 'add contact boundary to unbiased Nitsche large "
"sliding contact brick', int indbrick, mesh_im mim, int region, string "
"dispname, string lambdaname[, string wname])``"
msgstr ""

# bb4efac40c164effa4544cfe733c781b
#: ../source/matlab/cmdref_gf_model_set.rst:1770
msgid ""
"Adds a contact boundary to an existing unbiased Nitschelarge sliding "
"contact with friction brick which is both master and slave."
msgstr ""

