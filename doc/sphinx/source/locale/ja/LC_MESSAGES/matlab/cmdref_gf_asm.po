# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-07 10:04+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# 3f28667ca58f420494152ad09d8c9e0a
#: ../source/matlab/cmdref_gf_asm.rst:8
msgid "gf_asm"
msgstr ""

# 37abc823d5c4433b9f810098b1be7b8e
#: ../source/matlab/cmdref_gf_asm.rst:10
msgid "**Synopsis**"
msgstr ""

# c86bd225316943a7925f4b7790e52a13
#: ../source/matlab/cmdref_gf_asm.rst:42
msgid "**Description :**"
msgstr ""

# 076acaf4970c40a2b027438f293f42f6
#: ../source/matlab/cmdref_gf_asm.rst:46
msgid "General assembly function."
msgstr ""

# efce2302a8504ae99dde320b0b158621
#: ../source/matlab/cmdref_gf_asm.rst:48
msgid ""
"Many of the functions below use more than one mesh_fem: the main mesh_fem"
" (mf_u) used for the main unknown, and data mesh_fem (mf_d) used for the "
"data. It is always assumed that the Qdim of mf_d is equal to 1: if mf_d "
"is used to describe vector or tensor data, you just have to \"stack\" (in"
" fortran ordering) as many scalar fields as necessary."
msgstr ""

# 409ce1f67e8241a3959690738dc522ff
#: ../source/matlab/cmdref_gf_asm.rst:56
msgid "**Command list :**"
msgstr ""

# 341dc8f7bbbe4bd1806ebf879abb09a8
#: ../source/matlab/cmdref_gf_asm.rst:60
msgid ""
"``{...} = gf_asm('generic', mesh_im mim, int order, string expression, "
"int region, [model model, ['Secondary_domain', 'name',]] [string varname,"
" int is_variable[, {mesh_fem mf, mesh_imd mimd}], value], ...)``"
msgstr ""

# 90b7f2f0ebce4e14a4ae3e8dab341224
#: ../source/matlab/cmdref_gf_asm.rst:62
msgid "High-level generic assembly procedure for volumic or boundary assembly."
msgstr ""

# 54912ca1deb641a9b646d62eba135daf
#: ../source/matlab/cmdref_gf_asm.rst:64
msgid ""
"Performs the generic assembly of `expression` with the integration method"
" `mim` on the mesh region of index `region` (-1 means all the element of "
"the mesh). The same mesh should be shared by the integration method and "
"all the finite element methods or mesh_im_data corresponding to the "
"variables."
msgstr ""

# c5aef18abb6e4feaa8be65acb3e5fc43
#: ../source/matlab/cmdref_gf_asm.rst:70
msgid ""
"`order` indicates either that the (scalar) potential (order = 0) or the "
"(vector) residual (order = 1) or the tangent (matrix) (order = 2) is to "
"be computed."
msgstr ""

# 8f7aa65e380c4e6c97758a328c6ba7ca
#: ../source/matlab/cmdref_gf_asm.rst:74
msgid ""
"`model` is an optional parameter allowing to take into account all "
"variables and data of a model. Optionnally, for the integration on the "
"product of two domains, a secondary domain of the model can be specified "
"after a 'Secondary_domain' string."
msgstr ""

# 773e494171d346f8b869bebe462231db
#: ../source/matlab/cmdref_gf_asm.rst:79
msgid ""
"The variables and constant (data) are listed after the region number (or "
"optionally the model). For each variable/constant, first the "
"variable/constant name should be given (as it is referred in the assembly"
" string), then 1 if it is a variable or 0 for a constant, then the finite"
" element method if it is a fem variable/constant or the mesh_im_data if "
"it is data defined on integration points, and the vector representing the"
" value of the variable/constant. It is possible to give an arbitrary "
"number of variable/constant. The difference between a variable and a "
"constant is that automatic differentiation is done with respect to "
"variables only (see GetFEM++ user documentation). Test functions are only"
" available for variables, not for constants."
msgstr ""

# 311cb7312b1a4335b981c626394ddee2
#: ../source/matlab/cmdref_gf_asm.rst:92
msgid ""
"Note that if several variables are given, the assembly of the tangent "
"matrix/residual vector will be done considering the order in the call of "
"the function (the degrees of freedom of the first variable, then of the "
"second, and so on). If a model is provided, all degrees of freedom of the"
" model will be counted first."
msgstr ""

# a90a00c3228841b5bca5007f55cb2373
#: ../source/matlab/cmdref_gf_asm.rst:98
msgid "For example, the L2 norm of a vector field \"u\" can be computed with::"
msgstr ""

# af96e48c22ca436d858b0fe4c27ebad4
#: ../source/matlab/cmdref_gf_asm.rst:104
msgid ""
"The nonhomogeneous Laplacian stiffness matrix of a scalar field can be "
"evaluated with::"
msgstr ""

# a3e6d2a079bb4986bd1c3c3bcacebf36
#: ../source/matlab/cmdref_gf_asm.rst:113
msgid ""
"``M = gf_asm('mass matrix', mesh_im mim, mesh_fem mf1[, mesh_fem mf2[, "
"int region]])``"
msgstr ""

# b7ea7d9654554db7b272b487fe0effbe
#: ../source/matlab/cmdref_gf_asm.rst:115
msgid "Assembly of a mass matrix."
msgstr ""

# 52dae8a077104f0688212f4ef584f0db
# c647dcf0ba664973b1a91e8617a9aa4a
# 8fee5485b5df435c90c6e70e25d831b9
# 999d339e689b41de82d6393ee2e7aeca
# 636071d88d7d446d9c0abdb3b919e602
# 359995fcb41944d49283048ed765a768
# bdb86085667e4e7aa2c3f77c095b7609
# 1fede7050d0644e3b7d32fc11f30c5f5
# 76a17e9e3a7549788f4b8fc09ec059e2
# f6ebaee9adaa449fb27c5ae0798b6c9b
#: ../source/matlab/cmdref_gf_asm.rst:117
#: ../source/matlab/cmdref_gf_asm.rst:127
#: ../source/matlab/cmdref_gf_asm.rst:138
#: ../source/matlab/cmdref_gf_asm.rst:185
#: ../source/matlab/cmdref_gf_asm.rst:195
#: ../source/matlab/cmdref_gf_asm.rst:205
#: ../source/matlab/cmdref_gf_asm.rst:267
#: ../source/matlab/cmdref_gf_asm.rst:400
#: ../source/matlab/cmdref_gf_asm.rst:408
#: ../source/matlab/cmdref_gf_asm.rst:416
msgid "Return a spmat object."
msgstr ""

# 1dad8d510a57461a95a3ffab64f0309c
#: ../source/matlab/cmdref_gf_asm.rst:121
msgid ""
"``L = gf_asm('laplacian', mesh_im mim, mesh_fem mf_u, mesh_fem mf_d, vec "
"a[, int region])``"
msgstr ""

# 3fc4590ca16e4839897308c229ef8d98
#: ../source/matlab/cmdref_gf_asm.rst:123
msgid "Assembly of the matrix for the Laplacian problem."
msgstr ""

# 52a6f0d369694ae4965454fb4d56be6e
#: ../source/matlab/cmdref_gf_asm.rst:125
msgid ":math:`\\nabla\\cdot(a(x)\\nabla u)`  with `a` a scalar."
msgstr ""

# c9ccd4be15b84540919cd843d92d9943
#: ../source/matlab/cmdref_gf_asm.rst:131
msgid ""
"``Le = gf_asm('linear elasticity', mesh_im mim, mesh_fem mf_u, mesh_fem "
"mf_d, vec lambda_d, vec mu_d[, int region])``"
msgstr ""

# f2774c78d2e646449637f161a7fa2b0e
#: ../source/matlab/cmdref_gf_asm.rst:133
msgid "Assembles of the matrix for the linear (isotropic) elasticity problem."
msgstr ""

# fe0f585fb1fb4b73aeb996e6c4c1cfcc
#: ../source/matlab/cmdref_gf_asm.rst:135
msgid ""
":math:`\\nabla\\cdot(C(x):\\nabla u)` with :math:`C` defined via "
"`lambda_d` and `mu_d`."
msgstr ""

# 975a4743876d44a9b27be515f9b61107
#: ../source/matlab/cmdref_gf_asm.rst:142
msgid ""
"``TRHS = gf_asm('nonlinear elasticity', mesh_im mim, mesh_fem mf_u, vec "
"U, string law, mesh_fem mf_d, mat params, {'tangent "
"matrix'|'rhs'|'incompressible tangent matrix', mesh_fem mf_p, vec "
"P|'incompressible rhs', mesh_fem mf_p, vec P})``"
msgstr ""

# 4e3dd37d25574979bbf1864566a11b17
#: ../source/matlab/cmdref_gf_asm.rst:144
msgid ""
"Assembles terms (tangent matrix and right hand side) for nonlinear "
"elasticity."
msgstr ""

# 90bfcfd7ff6642449a52debd02d3c914
#: ../source/matlab/cmdref_gf_asm.rst:146
msgid ""
"The solution `U` is required at the current time-step. The `law` may be "
"choosen among:"
msgstr ""

# 96a4deb2b86b4566a418924ba7b8fca5
#: ../source/matlab/cmdref_gf_asm.rst:149
msgid ""
"'SaintVenant Kirchhoff': Linearized law, should be avoided). This law has"
" the two usual Lame coefficients as parameters, called lambda and mu."
msgstr ""

# a4fbdf358ac64b32b5eca28ed6a3a7ac
#: ../source/matlab/cmdref_gf_asm.rst:152
msgid ""
"'Mooney Rivlin': This law has three parameters, called C1, C2 and D1. Can"
" be preceded with the words 'compressible' or 'incompressible' to force a"
" specific version. By default, the incompressible version is considered "
"which requires only the first two material coefficients."
msgstr ""

# 11734b1f1f264ead904f4ada3fc7bbfc
#: ../source/matlab/cmdref_gf_asm.rst:157
msgid ""
"'neo Hookean': A special case of the 'Mooney Rivlin' law that requires "
"one material coefficient less (C2 = 0). By default, its compressible "
"version is used."
msgstr ""

# bb4d28e00e2545cd983f0da655ef302b
#: ../source/matlab/cmdref_gf_asm.rst:160
msgid ""
"'Ciarlet Geymonat': This law has 3 parameters, called lambda, mu and "
"gamma, with gamma chosen such that gamma is in ]-lambda/2-mu, -mu[."
msgstr ""

# 88f0a72b0d1340668cef8f24b3a00868
#: ../source/matlab/cmdref_gf_asm.rst:164
msgid ""
"The parameters of the material law are described on the mesh_fem `mf_d`. "
"The matrix `params` should have `nbdof(mf_d)` columns, each row "
"correspounds to a parameter."
msgstr ""

# ca5f3d9d13cf41fbb87c9a13ff81d429
#: ../source/matlab/cmdref_gf_asm.rst:168
msgid ""
"The last argument selects what is to be built: either the tangent matrix,"
" or the right hand side. If the incompressibility is considered, it "
"should be followed by a mesh_fem `mf_p`, for the pression."
msgstr ""

# 113e335f0c8344229967c6d689921e1a
#: ../source/matlab/cmdref_gf_asm.rst:173
msgid ""
"Return a spmat object (tangent matrix), vec object (right hand side), "
"tuple of spmat objects (incompressible tangent matrix), or tuple of vec "
"objects (incompressible right hand side)."
msgstr ""

# 22e5f1d5d5564d93b0c47c3519ccb739
#: ../source/matlab/cmdref_gf_asm.rst:179
msgid ""
"``A = gf_asm('helmholtz', mesh_im mim, mesh_fem mf_u, mesh_fem mf_d, vec "
"k[, int region])``"
msgstr ""

# 12a4186e751341b1876d131a757f918c
#: ../source/matlab/cmdref_gf_asm.rst:181
msgid "Assembly of the matrix for the Helmholtz problem."
msgstr ""

# 8c271b84dd1f4fba91680a605bf847e1
#: ../source/matlab/cmdref_gf_asm.rst:183
msgid ":math:`\\Delta u + k^2 u` = 0,  with `k` complex scalar."
msgstr ""

# f4fd3cd48910461aa3d2ce348ed4259b
#: ../source/matlab/cmdref_gf_asm.rst:189
msgid ""
"``A = gf_asm('bilaplacian', mesh_im mim, mesh_fem mf_u, mesh_fem mf_d, "
"vec a[, int region])``"
msgstr ""

# bb906d0225134ebaa70e4ab292f0125e
#: ../source/matlab/cmdref_gf_asm.rst:191
msgid "Assembly of the matrix for the Bilaplacian problem."
msgstr ""

# eccf6e72456c450292bfe76292c169d8
# ba74a33b1db4455894600ff2f3be0291
#: ../source/matlab/cmdref_gf_asm.rst:193
#: ../source/matlab/cmdref_gf_asm.rst:203
msgid ":math:`\\Delta(a(x)\\Delta u) = 0`   with `a` scalar."
msgstr ""

# 87faf95c5972492fa36930cb207b9dec
#: ../source/matlab/cmdref_gf_asm.rst:199
msgid ""
"``A = gf_asm('bilaplacian KL', mesh_im mim, mesh_fem mf_u, mesh_fem mf_d,"
" vec a, vec nu[, int region])``"
msgstr ""

# 43be38ce66c948fd8136ae1686eafd5b
#: ../source/matlab/cmdref_gf_asm.rst:201
msgid ""
"Assembly of the matrix for the Bilaplacian problem with Kirchhoff-Love "
"formulation."
msgstr ""

# b735212a1e794e3abaad4a49fd11b646
#: ../source/matlab/cmdref_gf_asm.rst:209
msgid ""
"``V = gf_asm('volumic source', mesh_im mim, mesh_fem mf_u, mesh_fem mf_d,"
" vec fd[, int region])``"
msgstr ""

# c2026d29230a409c89fb39749e02b372
#: ../source/matlab/cmdref_gf_asm.rst:211
msgid "Assembly of a volumic source term."
msgstr ""

# 9d0712fc4a2a4c75adb4901acc336ff4
#: ../source/matlab/cmdref_gf_asm.rst:213
msgid ""
"Output a vector `V`, assembled on the mesh_fem `mf_u`, using the data "
"vector `fd` defined on the data mesh_fem `mf_d`. `fd` may be real or "
"complex-valued."
msgstr ""

# dd53ac4fca164546bbc03163d696035c
# 6270defb4dc04179867104e9680f55fe
# 876cbde7aa544b47aa7e9e34d276bfce
# 8730ce3523b242d1ae5750991056e72a
#: ../source/matlab/cmdref_gf_asm.rst:217
#: ../source/matlab/cmdref_gf_asm.rst:229
#: ../source/matlab/cmdref_gf_asm.rst:381
#: ../source/matlab/cmdref_gf_asm.rst:392
msgid "Return a vec object."
msgstr ""

# 4884ba2a61e84a639278fd0d7fd1d9c0
#: ../source/matlab/cmdref_gf_asm.rst:221
msgid ""
"``B = gf_asm('boundary source', int bnum, mesh_im mim, mesh_fem mf_u, "
"mesh_fem mf_d, vec G)``"
msgstr ""

# 105100a051664d4aad3931b62322d6f4
#: ../source/matlab/cmdref_gf_asm.rst:223
msgid "Assembly of a boundary source term."
msgstr ""

# 73477cf6eb034c3ca2aaf09d09ba5b43
#: ../source/matlab/cmdref_gf_asm.rst:225
msgid ""
"`G` should be a [Qdim x N] matrix, where N is the number of dof of "
"`mf_d`, and Qdim is the dimension of the unkown u (that is set when "
"creating the mesh_fem)."
msgstr ""

# e1b77b121b1f4c38824a3271242daa4a
#: ../source/matlab/cmdref_gf_asm.rst:233
msgid ""
"``{HH, RR} = gf_asm('dirichlet', int bnum, mesh_im mim, mesh_fem mf_u, "
"mesh_fem mf_d, mat H, vec R [, scalar threshold])``"
msgstr ""

# 5ad3a480b8b8414d916b4b8b4a99f8d2
#: ../source/matlab/cmdref_gf_asm.rst:235
msgid "Assembly of Dirichlet conditions of type `h.u = r`."
msgstr ""

# 9d1d9961615e47af8171fd3469edc7c0
#: ../source/matlab/cmdref_gf_asm.rst:237
msgid ""
"Handle `h.u = r` where h is a square matrix (of any rank) whose size is "
"equal to the dimension of the unkown u. This matrix is stored in `H`, one"
" column per dof in `mf_d`, each column containing the values of the "
"matrix h stored in fortran order:"
msgstr ""

# e5259e5f21a54fcfba9ca0f115b7e005
#: ../source/matlab/cmdref_gf_asm.rst:246
msgid "if u is a 2D vector field."
msgstr ""

# 2769a6beb09b4dc7bf4fa98f297e52bb
#: ../source/matlab/cmdref_gf_asm.rst:248
msgid ""
"Of course, if the unknown is a scalar field, you just have to set `H = "
"ones(1, N)`, where N is the number of dof of `mf_d`."
msgstr ""

# d3cd2a365a0241a9b95a271544bf520f
#: ../source/matlab/cmdref_gf_asm.rst:251
msgid ""
"This is basically the same than calling gf_asm('boundary qu term') for "
"`H` and calling gf_asm('neumann') for `R`, except that this function "
"tries to produce a 'better' (more diagonal) constraints matrix (when "
"possible)."
msgstr ""

# df97413f134e4cb1b2ff37d9768b0d48
#: ../source/matlab/cmdref_gf_asm.rst:256
msgid "See also gf_spmat_get(spmat S, 'Dirichlet_nullspace')."
msgstr ""

# 1ad4c749f1af4b2c946ec6752e16c6c8
#: ../source/matlab/cmdref_gf_asm.rst:259
msgid ""
"``Q = gf_asm('boundary qu term',int boundary_num, mesh_im mim, mesh_fem "
"mf_u, mesh_fem mf_d, mat q)``"
msgstr ""

# 31b905d1c3d748748e28ea72f38e8244
#: ../source/matlab/cmdref_gf_asm.rst:261
msgid "Assembly of a boundary qu term."
msgstr ""

# 95b29037e2e3448f8a7fafbd33aaf80b
#: ../source/matlab/cmdref_gf_asm.rst:263
msgid ""
"`q` should be be a [Qdim x Qdim x N] array, where N is the number of dof "
"of `mf_d`, and Qdim is the dimension of the unkown u (that is set when "
"creating the mesh_fem)."
msgstr ""

# 9ca3119a97b747d8a422e37a995144cd
#: ../source/matlab/cmdref_gf_asm.rst:271
msgid ""
"``gf_asm('define function', string name, int nb_args, string expression[,"
" string expression_derivative_t[, string expression_derivative_u]])``"
msgstr ""

# 68a70900e9694c72a9bf60419a91038f
#: ../source/matlab/cmdref_gf_asm.rst:273
msgid ""
"Define a new function `name` which can be used in high level generic "
"assembly. The function can have one or two parameters. In `expression` "
"all available predefined function or operation of the generic assembly "
"can be used. However, no reference to some variables or data can be "
"specified. The argument of the function is `t` for a one parameter "
"function and `t` and `u` for a two parameter function. For instance "
"'sin(pi*t)+2*t*t' is a valid expression for a one parameter function and "
"'sin(max(t,u)*pi)' is a valid expression for a two parameters function. "
"`expression_derivative_t` and `expression_derivative_u` are optional "
"expressions for the derivatives with respect to `t` and `u`. If they are "
"not furnished, a symbolic derivation is used."
msgstr ""

# eed301774a4a4466a84c9c48757d3810
#: ../source/matlab/cmdref_gf_asm.rst:288
msgid "``gf_asm('undefine function', string name)``"
msgstr ""

# 3045140ea09846cea1f5f2ac9b730b65
#: ../source/matlab/cmdref_gf_asm.rst:290
msgid ""
"Cancel the definition of a previously defined function `name` for the "
"high level generic assembly."
msgstr ""

# 0ecf965148f94a5984e3c20358fc7040
#: ../source/matlab/cmdref_gf_asm.rst:294
msgid ""
"``gf_asm('define linear hardening function', string name, scalar "
"sigma_y0, scalar H, ... [string 'Frobenius'])``"
msgstr ""

# 3c8ed49781ea4e5da43843be00c6a849
#: ../source/matlab/cmdref_gf_asm.rst:296
msgid ""
"Define a new linear hardening function under the name `name`, with "
"initial yield stress `sigma_y0` and hardening modulus H. If an extra "
"string argument with the value 'Frobenius' is provided, the hardening "
"function is expressed in terms of Frobenius norms of its input strain and"
" output stress, instead of their Von-Mises equivalents."
msgstr ""

# 031b49f93a66410d974f80fb3a103142
#: ../source/matlab/cmdref_gf_asm.rst:303
msgid ""
"``gf_asm('define Ramberg Osgood hardening function', string name, scalar "
"sigma_ref, {scalar eps_ref | scalar E, scalar alpha}, scalar n[, string "
"'Frobenius'])``"
msgstr ""

# 08e0564caec6479ab41d686777eb6a2e
#: ../source/matlab/cmdref_gf_asm.rst:305
msgid ""
"Define a new Ramberg Osgood hardening function under the name `name`, "
"with initial yield stress `sigma_y0` and hardening modulus H. If an extra"
" string argument with the value 'Frobenius' is provided, the hardening "
"function is expressed in terms of Frobenius norms of its input strain and"
" output stress, instead of their Von-Mises equivalents."
msgstr ""

# e6866cf01830489f93091e662159e2c9
#: ../source/matlab/cmdref_gf_asm.rst:312
msgid ""
"``gf_asm('expression analysis', string expression [, {@tm mesh | mesh_im "
"mim}] [, der_order] [, model model] [, string varname, int is_variable[, "
"{mesh_fem mf | mesh_imd mimd}], ...])``"
msgstr ""

# f16999aa52c84deaa8cfe9a617040d6a
#: ../source/matlab/cmdref_gf_asm.rst:314
msgid ""
"Analyse a high-level generic assembly expression and print information "
"about the provided expression."
msgstr ""

# e47d97a1b818438597629b539ced4d98
#: ../source/matlab/cmdref_gf_asm.rst:318
msgid ""
"``{...} = gf_asm('volumic' [,CVLST], expr [, mesh_ims, mesh_fems, "
"data...])``"
msgstr ""

# 07d63ea09a264ec8a0ccd7d12734cb09
#: ../source/matlab/cmdref_gf_asm.rst:320
msgid "Low-level generic assembly procedure for volumic assembly."
msgstr ""

# cdb9cead6c854dbeb0cfaa865ef34f0f
#: ../source/matlab/cmdref_gf_asm.rst:322
msgid ""
"The expression `expr` is evaluated over the mesh_fem's listed in the "
"arguments (with optional data) and assigned to the output arguments. For "
"details about the syntax of assembly expressions, please refer to the "
"getfem user manual (or look at the file getfem_assembling.h in the "
"getfem++ sources)."
msgstr ""

# 32bbc51fbf944e8cb10d1250f1b0b503
#: ../source/matlab/cmdref_gf_asm.rst:328
msgid "For example, the L2 norm of a field can be computed with::"
msgstr ""

# 0a3dce5e82754c14af8118dde688c0d3
#: ../source/matlab/cmdref_gf_asm.rst:334
msgid "The Laplacian stiffness matrix can be evaluated with::"
msgstr ""

# a275446b3ae846a5851caad0d868b698
#: ../source/matlab/cmdref_gf_asm.rst:341
msgid ""
"``{...} = gf_asm('boundary', int bnum, string expr [, mesh_im mim, "
"mesh_fem mf, data...])``"
msgstr ""

# 251f9835d5f644e2bf41e8ac0afbc9b0
#: ../source/matlab/cmdref_gf_asm.rst:343
msgid "Low-level generic boundary assembly."
msgstr ""

# b586df8d934a4c3ca48f3da05344da4d
#: ../source/matlab/cmdref_gf_asm.rst:345
msgid "See the help for gf_asm('volumic')."
msgstr ""

# 83806f609c494904a54381602301161d
#: ../source/matlab/cmdref_gf_asm.rst:348
msgid ""
"``Mi = gf_asm('interpolation matrix', mesh_fem mf, {mesh_fem mfi | vec "
"pts})``"
msgstr ""

# 2c750940988e4d7c849c5ef9df5aa73c
#: ../source/matlab/cmdref_gf_asm.rst:350
msgid ""
"Build the interpolation matrix from a mesh_fem onto another mesh_fem or a"
" set of points."
msgstr ""

# 510b046182dd4ffab0d6ba8391fb106d
#: ../source/matlab/cmdref_gf_asm.rst:352
msgid ""
"Return a matrix `Mi`, such that `V = Mi.U` is equal to "
"gf_compute('interpolate_on',mfi). Useful for repeated interpolations. "
"Note that this is just interpolation, no elementary integrations are "
"involved here, and `mfi` has to be lagrangian. In the more general case, "
"you would have to do a L2 projection via the mass matrix."
msgstr ""

# 78a7548cc26d4d9085cf9b5a1adb1562
#: ../source/matlab/cmdref_gf_asm.rst:359
msgid "`Mi` is a spmat object."
msgstr ""

# a8ebf315318b48a1bc3d532eec300dbe
#: ../source/matlab/cmdref_gf_asm.rst:363
msgid ""
"``Me = gf_asm('extrapolation matrix',mesh_fem mf,  {mesh_fem mfe | vec "
"pts})``"
msgstr ""

# 380d5a8560bb4e6cb621fb12796241a6
#: ../source/matlab/cmdref_gf_asm.rst:365
msgid ""
"Build the extrapolation matrix from a mesh_fem onto another mesh_fem or a"
" set of points."
msgstr ""

# 10b00a23f1294043bddfc1e67cea6122
#: ../source/matlab/cmdref_gf_asm.rst:367
msgid ""
"Return a matrix `Me`, such that `V = Me.U` is equal to "
"gf_compute('extrapolate_on',mfe). Useful for repeated extrapolations."
msgstr ""

# 75c08b71a43643d9bf23448b33b01d1f
#: ../source/matlab/cmdref_gf_asm.rst:371
msgid "`Me` is a spmat object."
msgstr ""

# a60fd68831bd44ddbc8c1da3daecdb72
#: ../source/matlab/cmdref_gf_asm.rst:375
msgid ""
"``B = gf_asm('integral contact Uzawa projection', int bnum, mesh_im mim, "
"mesh_fem mf_u, vec U, mesh_fem mf_lambda, vec vec_lambda, mesh_fem "
"mf_obstacle, vec obstacle, scalar r [, {scalar coeff | mesh_fem mf_coeff,"
" vec coeff} [, int option[, scalar alpha, vec W]]])``"
msgstr ""

# 4e1ca9ef4e5d49b8b138f507f3b26779
#: ../source/matlab/cmdref_gf_asm.rst:379
msgid "Specific assembly procedure for the use of an Uzawa algorithm to solve"
msgstr ""

# 49684eee15d74caea76273437c8d59f2
#: ../source/matlab/cmdref_gf_asm.rst:378
msgid ""
"contact problems. Projects the term $-(\\lambda - r (u_N-g))_-$ on the "
"finite element space of $\\lambda$."
msgstr ""

# 39f502a96078440ca119339fe3310d8a
#: ../source/matlab/cmdref_gf_asm.rst:385
msgid ""
"``B = gf_asm('level set normal source term', int bnum, mesh_im mim, "
"mesh_fem mf_u, mesh_fem mf_lambda, vec vec_lambda, mesh_fem mf_levelset, "
"vec levelset)``"
msgstr ""

# 0218652ec19f472f9b0c294f88c8d1b4
#: ../source/matlab/cmdref_gf_asm.rst:387
msgid ""
"Performs an assembly of the source term represented by `vec_lambda` on "
"`mf_lambda` considered to be a component in the direction of the gradient"
" of a levelset function (normal to the levelset) of a vector field "
"defined on `mf_u` on the boundary `bnum`."
msgstr ""

# 96227d71476d4878b4c808771ce50305
#: ../source/matlab/cmdref_gf_asm.rst:396
msgid ""
"``M = gf_asm('lsneuman matrix', mesh_im mim, mesh_fem mf1, mesh_fem mf2, "
"levelset ls[, int region])``"
msgstr ""

# 2530d8b052574aa28818e8623875b3fd
#: ../source/matlab/cmdref_gf_asm.rst:398
msgid "Assembly of a level set Neuman  matrix."
msgstr ""

# 1b8b3545f8aa4bdea2c9e709c07db9d2
#: ../source/matlab/cmdref_gf_asm.rst:404
msgid ""
"``M = gf_asm('nlsgrad matrix', mesh_im mim, mesh_fem mf1, mesh_fem mf2, "
"levelset ls[, int region])``"
msgstr ""

# 0d6c2f686259434f94f6236063173d91
#: ../source/matlab/cmdref_gf_asm.rst:406
msgid "Assembly of a nlsgrad matrix."
msgstr ""

# 6a194b5150164217ae490945efda1051
#: ../source/matlab/cmdref_gf_asm.rst:412
msgid ""
"``M = gf_asm('stabilization patch matrix', @tm mesh, mesh_fem mf,  "
"mesh_im mim, real ratio, real h)``"
msgstr ""

# 6e51992fa8fa4e8c879613bfb885b492
#: ../source/matlab/cmdref_gf_asm.rst:414
msgid "Assembly of stabilization patch matrix ."
msgstr ""

# be8c63672f7d4f4388a9a51b208775da
#: ../source/matlab/cmdref_gf_asm.rst:420
msgid ""
"``{Q, G, H, R, F} = gf_asm('pdetool boundary conditions', mf_u, mf_d, b, "
"e[, f_expr])``"
msgstr ""

# 71bb25c9ea96447ab6ca62cc83e3aa21
#: ../source/matlab/cmdref_gf_asm.rst:422
msgid "Assembly of pdetool boundary conditions."
msgstr ""

# 47b5215cc9634b6289ab2e7d85c3796c
#: ../source/matlab/cmdref_gf_asm.rst:424
msgid ""
"`B` is the boundary matrix exported by pdetool, and `E` is the edges "
"array. `f_expr` is an optionnal expression (or vector) for the volumic "
"term. On return `Q, G, H, R, F` contain the assembled boundary conditions"
" (`Q` and `H` are matrices), similar to the ones returned by the function"
" ASSEMB from PDETOOL."
msgstr ""

# ca3a8b59b39a46ebb166be1cb9e797eb
#~ msgid ""
#~ "``{...} = gf_asm('generic', mesh_im mim, "
#~ "int order, string expression, int "
#~ "region, [model model,] [string varname, "
#~ "int is_variable[, {mesh_fem mf, mesh_imd "
#~ "mimd}], value], ...)``"
#~ msgstr ""

# 130b977798814e6193f61c6e81eb606a
#~ msgid ""
#~ "`model` is an optional parameter "
#~ "allowing to take into account all "
#~ "variables and data of a model."
#~ msgstr ""

