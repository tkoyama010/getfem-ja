# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-22 15:02+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

# 82ff6fcf09a74d4684a5c38d5ecd3066
#: ../source/python/cmdref_Spmat.rst:8
msgid "Spmat"
msgstr ""

# 650d0880c9144f7fa5bf2d462e053a7b
#: getfem.Spmat:1 of
msgid "GeFEM Spmat object"
msgstr ""

# 4aaad7133df346f080ceebccd472e026
#: getfem.Spmat:3 of
msgid ""
"Create a new sparse matrix in getfem++ format. These sparse matrix can be"
" stored as CSC (compressed column sparse), which is the format used by "
"Matlab, or they can be stored as WSC (internal format to getfem). The CSC"
" matrices are not writable (it would be very inefficient), but they are "
"optimized for multiplication with vectors, and memory usage. The WSC are "
"writable, they are very fast with respect to random read/write operation."
" However their memory overhead is higher than CSC matrices, and they are "
"a little bit slower for matrix-vector multiplications."
msgstr ""

# 28a1dea6f8164514b39005cf1e9fadeb
#: getfem.Spmat:12 of
msgid ""
"By default, all newly created matrices are build as WSC matrices. This "
"can be changed later with ``Spmat.to_csc(...)``, or may be changed "
"automatically by getfem (for example ``gf_linsolve()`` converts the "
"matrices to CSC)."
msgstr ""

# 92029ff166424990b9b003d66bb43edf
#: getfem.Spmat:17 of
msgid "The matrices may store REAL or COMPLEX values."
msgstr ""

# 28b20f48e18e4cd78a12f5bd17e0a557
#: getfem.Spmat:19 of
msgid "General constructor for Spmat objects"
msgstr ""

# 225bd1d9856b4292abce33124ac348ab
#: getfem.Spmat:21 of
msgid ""
"``SM = Spmat('empty', int m [, int n])`` Create a new empty (i.e. full of"
" zeros) sparse matrix, of dimensions `m x n`. If `n` is omitted, the "
"matrix dimension is `m x m`."
msgstr ""

# 858291a50be2436c8031fb2184a53fd6
#: getfem.Spmat:25 of
msgid ""
"``SM = Spmat('copy', mat K [, list I [, list J]])`` Duplicate a matrix "
"`K` (which might be a SpMat). If index `I` and/or `J` are given, the "
"matrix will be a submatrix of `K`. For example::"
msgstr ""

# 4f6399fc01194cf89536073ca7ceaf8b
#: getfem.Spmat:33 of
msgid "will return a 40x5 matrix."
msgstr ""

# a522f44ebfb945d9bbc1a8dc837dfa85
#: getfem.Spmat:35 of
msgid "``SM = Spmat('identity', int n)`` Create a `n x n` identity matrix."
msgstr ""

# 9f47b6724a9445ddb4bce3e6fba5c169
#: getfem.Spmat:38 of
msgid ""
"``SM = Spmat('mult', Spmat A, Spmat B)`` Create a sparse matrix as the "
"product of the sparse matrices `A` and `B`. It requires that `A` and `B` "
"be both real or both complex, you may have to use ``Spmat.to_complex()``"
msgstr ""

# 01bc213635ff4835970737c10ad59567
#: getfem.Spmat:43 of
msgid ""
"``SM = Spmat('add', Spmat A, Spmat B)`` Create a sparse matrix as the sum"
" of the sparse matrices `A` and `B`. Adding a real matrix with a complex "
"matrix is possible."
msgstr ""

# 92c4400a04ff4e0f967acb69aadaf722
#: getfem.Spmat:47 of
msgid ""
"``SM = Spmat('diag', mat D [, ivec E [, int n [,int m]]])`` Create a "
"diagonal matrix. If `E` is given, `D` might be a matrix and each column "
"of `E` will contain the sub-diagonal number that will be filled with the "
"corresponding column of `D`."
msgstr ""

# 4630b6a0b6ee4c1f9cce7b7dfe7d0d84
#: getfem.Spmat:52 of
msgid ""
"``SM = Spmat('load','hb'|'harwell-boeing'|'mm'|'matrix-market', string "
"filename)`` Read a sparse matrix from an Harwell-Boeing or a Matrix-"
"Market file ."
msgstr ""

# 43d81ffe09ad4fd482ca7d4ea86400f7
#: getfem.Spmat.add:1 of
msgid "Add `V` to the sub-matrix 'M(I,J)'."
msgstr ""

# 5f85c6288c564a2ea565a83d80b72bd2
# afcf59dfbe844a4398285a32082e7912
#: getfem.Spmat.add:3 getfem.Spmat.assign:3 of
msgid "`V` might be a sparse matrix or a full matrix."
msgstr ""

# 3651b52b8b6f4f61ba944d16f5a7ef7c
#: getfem.Spmat.assign:1 of
msgid "Copy V into the sub-matrix 'M(I,J)'."
msgstr ""

# 8f2f8093e785431b8ab162243f6955c7
#: getfem.Spmat.char:1 of
msgid "Output a (unique) string representation of the Spmat."
msgstr ""

# d86e61bd7b5242cc9b9d32b7bc5bb342
#: getfem.Spmat.char:3 of
msgid ""
"This can be used to perform comparisons between two different Spmat "
"objects. This function is to be completed."
msgstr ""

# 8acd6a2b91ea46a9b7a9c963b28c7035
#: getfem.Spmat.clear:1 of
msgid "Synopsis: Spmat.clear(self[, list I[, list J]])"
msgstr ""

# 010e4686ca384b6f81802f48d0498713
#: getfem.Spmat.clear:3 of
msgid "Erase the non-zero entries of the matrix."
msgstr ""

# cc3e7f7b5767490fa6328966a9a0e28c
#: getfem.Spmat.clear:5 of
msgid ""
"The optional arguments `I` and `J` may be specified to clear a sub-matrix"
" instead of the entire matrix."
msgstr ""

# d705cbd916f7470f8bb6fe44daa82024
#: getfem.Spmat.conjugate:1 of
msgid "Conjugate each element of the matrix."
msgstr ""

# 13ab17fadec84dcf8baa54cb42739d39
#: getfem.Spmat.csc_ind:1 of
msgid "Return the two usual index arrays of CSC storage."
msgstr ""

# 0c01a87f98f34337b93209c3ed44adfa
# b379e86c0d0146de9f173540fe481bd1
#: getfem.Spmat.csc_ind:3 getfem.Spmat.csc_val:3 of
msgid "If `M` is not stored as a CSC matrix, it is converted into CSC."
msgstr ""

# bd65829a86b848ea9280479afb4d75c3
#: getfem.Spmat.csc_val:1 of
msgid "Return the array of values of all non-zero entries of `M`."
msgstr ""

# db9de3c5a41a4463ba6355f89034fefa
#: getfem.Spmat.determinant:1 of
msgid "returns the matrix determinant calculated using MUMPS."
msgstr ""

# 6054846def54467ebd62f43cf2940812
#: getfem.Spmat.diag:1 of
msgid "Return the diagonal of `M` as a vector."
msgstr ""

# 15a7f6b48d204c0e982f924afdb00804
#: getfem.Spmat.diag:3 of
msgid "If `E` is used, return the sub-diagonals whose ranks are given in E."
msgstr ""

# d3b67775ed554583955fedd55e121aca
#: getfem.Spmat.dirichlet_nullspace:1 of
msgid "Solve the dirichlet conditions `M.U=R`."
msgstr ""

# 72be6b4142ef4e74a450bbb44c6c2af1
#: getfem.Spmat.dirichlet_nullspace:3 of
msgid ""
"A solution `U0` which has a minimum L2-norm is returned, with a sparse "
"matrix `N` containing an orthogonal basis of the kernel of the "
"(assembled) constraints matrix `M` (hence, the PDE linear system should "
"be solved on this subspace): the initial problem"
msgstr ""

# bbf476888f77454b818f2526e7e31120
#: getfem.Spmat.dirichlet_nullspace:8 of
msgid "`K.U = B` with constraints `M.U = R`"
msgstr ""

# e1fc2aeb486b4d788d34e3484437e91f
#: getfem.Spmat.dirichlet_nullspace:10 of
msgid "is replaced by"
msgstr ""

# 290e10a3ec5543378010e4b0430bf422
#: getfem.Spmat.dirichlet_nullspace:12 of
msgid "`(N'.K.N).UU = N'.B` with `U = N.UU + U0`"
msgstr ""

# f726dfb286f84ca0b4b4d78e5c5825e2
#: getfem.Spmat.display:1 of
msgid "displays a short summary for a Spmat object."
msgstr ""

# 0bdaef40852a44bf98390f7bb89a01a9
#: getfem.Spmat.full:1 of
msgid "Synopsis: Sm = Spmat.full(self[, list I[, list J]])"
msgstr ""

# 8ba959f9888e4ee0ba65772a327219a3
#: getfem.Spmat.full:3 of
msgid "Return a full (sub-)matrix."
msgstr ""

# 3df2be0efd7e454f9550452a0ee761cd
#: getfem.Spmat.full:5 of
msgid ""
"The optional arguments `I` and `J`, are the sub-intervals for the rows "
"and columns that are to be extracted."
msgstr ""

# 24b7ff9748a741d790693596f017e026
#: getfem.Spmat.is_complex:1 of
msgid "Return 1 if the matrix contains complex values."
msgstr ""

# b767cf7d47df45c0b3927889d40dafff
#: getfem.Spmat.mult:1 of
msgid "Product of the sparse matrix `M` with a vector `V`."
msgstr ""

# ea1f794dc36c497c943ec9632db90bfe
#: getfem.Spmat.mult:3 of
msgid "For matrix-matrix multiplications, see Spmat('mult')."
msgstr ""

# f98eaa1fa96c464f97aae55cb1172eaa
#: getfem.Spmat.nnz:1 of
msgid "Return the number of non-null values stored in the sparse matrix."
msgstr ""

# edb9ef1eaf824770999e7458eb5c3b66
#: getfem.Spmat.save:1 of
msgid "Export the sparse matrix."
msgstr ""

# 2374c31c2d1a419f92e3194a4642abc9
#: getfem.Spmat.save:3 of
msgid ""
"the format of the file may be 'hb' for Harwell-Boeing, or 'mm' for "
"Matrix-Market."
msgstr ""

# 7566200a0c6f410c9bf3ba7eb15c29cf
#: getfem.Spmat.scale:1 of
msgid "Multiplies the matrix by a scalar value `v`."
msgstr ""

# 841300cd16f04bcd980d149995b9615f
#: getfem.Spmat.set_diag:1 of
msgid "Change the diagonal (or sub-diagonals) of the matrix."
msgstr ""

# 3620079f5add4f2f9b549dd948172e1d
#: getfem.Spmat.set_diag:3 of
msgid ""
"If `E` is given, `D` might be a matrix and each column of `E` will "
"contain the sub-diagonal number that will be filled with the "
"corresponding column of `D`."
msgstr ""

# b1acefa3544045b4a4abfe43d4b20d2e
#: getfem.Spmat.size:1 of
msgid "Return a vector where `ni` and `nj` are the dimensions of the matrix."
msgstr ""

# a3dcf19bd6fc48a6ab99c1e7e58697f2
#: getfem.Spmat.storage:1 of
msgid "Return the storage type currently used for the matrix."
msgstr ""

# bee737f80967484a8f5adc8bb9e7949c
#: getfem.Spmat.storage:3 of
msgid "The storage is returned as a string, either 'CSC' or 'WSC'."
msgstr ""

# 1c5cc142faa44bb49c1d5574569b242d
#: getfem.Spmat.tmult:1 of
msgid ""
"Product of `M` transposed (conjugated if `M` is complex) with the vector "
"`V`."
msgstr ""

# 0ec73f2b13e546e98a85cb7df8edce4b
#: getfem.Spmat.to_complex:1 of
msgid "Store complex numbers."
msgstr ""

# 3821efad903f4ebf8157e3e465bca0d7
#: getfem.Spmat.to_csc:1 of
msgid "Convert the matrix to CSC storage."
msgstr ""

# fbae91e7d9e9497599ff38dceeeae378
#: getfem.Spmat.to_csc:3 of
msgid "CSC storage is recommended for matrix-vector multiplications."
msgstr ""

# 8c9bbbec3f1f4f80ab1cc1d1a6bf9dc6
#: getfem.Spmat.to_wsc:1 of
msgid "Convert the matrix to WSC storage."
msgstr ""

# f3af1c767c304691a8ba76f05a0e23ef
#: getfem.Spmat.to_wsc:3 of
msgid "Read and write operation are quite fast with WSC storage."
msgstr ""

# e7a0d36f984f4216887fa4863de8e1c3
#: getfem.Spmat.transconj:1 of
msgid "Transpose and conjugate the matrix."
msgstr ""

# 6a1de9b62d234e5f8c2fd883669ccbc7
#: getfem.Spmat.transpose:1 of
msgid "Transpose the matrix."
msgstr ""

