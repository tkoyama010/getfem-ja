# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-22 15:02+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

# 432ec8755b804ba282a758c69c502532
#: ../source/python/cmdref_Module asm.rst:8
msgid "Module asm"
msgstr ""

# b236ceb7fb314ecbb30f9723a05bf959
#: getfem.asm_generic:1 of
msgid ""
"Synopsis: (...) = asm_generic(MeshIm mim, int order, string expression, "
"int region, [Model model,] [string varname, int is_variable[, {MeshFem "
"mf, MeshImd mimd}], value], ...)"
msgstr ""

# ba3ba7463c894da1a66a55da1356faea
#: getfem.asm_generic:3 of
msgid "High-level generic assembly procedure for volumic or boundary assembly."
msgstr ""

# a602bc10705b42c4ae2ce84d7d28ddde
#: getfem.asm_generic:5 of
msgid ""
"Performs the generic assembly of `expression` with the integration method"
" `mim` on the mesh region of index `region` (-1 means all the element of "
"the mesh). The same mesh should be shared by the integration method and "
"all the finite element methods or mesh_im_data corresponding to the "
"variables."
msgstr ""

# 98c336e9c4e6495782493218cb0273c7
#: getfem.asm_generic:11 of
msgid ""
"`order` indicates either that the (scalar) potential (order = 0) or the "
"(vector) residual (order = 1) or the tangent (matrix) (order = 2) is to "
"be computed."
msgstr ""

# 630a628792ab4468a873e03163ec400c
#: getfem.asm_generic:15 of
msgid ""
"`model` is an optional parameter allowing to take into account all "
"variables and data of a model."
msgstr ""

# caee7e4fda9b4c878ebe3b259644b732
#: getfem.asm_generic:18 of
msgid ""
"The variables and constant (data) are listed after the region number (or "
"optionally the model). For each variable/constant, first the "
"variable/constant name should be given (as it is referred in the assembly"
" string), then 1 if it is a variable or 0 for a constant, then the finite"
" element method if it is a fem variable/constant or the mesh_im_data if "
"it is data defined on integration points, and the vector representing the"
" value of the variable/constant. It is possible to give an arbitrary "
"number of variable/constant. The difference between a variable and a "
"constant is that automatic differentiation is done with respect to "
"variables only (see GetFEM++ user documentation). Test functions are only"
" available for variables, not for constants."
msgstr ""

# 9721a22f5f164bf3949712fedb1e7c7c
#: getfem.asm_generic:31 of
msgid ""
"Note that if several variables are given, the assembly of the tangent "
"matrix/residual vector will be done considering the order in the call of "
"the function (the degrees of freedom of the first variable, then of the "
"second, and so on). If a model is provided, all degrees of freedom of the"
" model will be counted first."
msgstr ""

# 5581fd0c850847329a943668c236aa97
#: getfem.asm_generic:37 of
msgid "For example, the L2 norm of a vector field \"u\" can be computed with::"
msgstr ""

# 18b599c9ac83470f9fa36c94ae10037d
#: getfem.asm_generic:43 of
msgid ""
"The nonhomogeneous Laplacian stiffness matrix of a scalar field can be "
"evaluated with::"
msgstr ""

# f75e13bf40914a6a93614a771c4e9dc8
#: getfem.asm_mass_matrix:1 of
msgid ""
"Synopsis: M = asm_mass_matrix(MeshIm mim, MeshFem mf1[, MeshFem mf2[, int"
" region]])"
msgstr ""

# 794634f706924994a5e548bd8590f5fc
#: getfem.asm_mass_matrix:3 of
msgid "Assembly of a mass matrix."
msgstr ""

# 37835b15d16149babacb692c81d23078
# ad6795d211984be4a5eb6814800395c7
# a36b5cc9976f4a348cf6fe0b869695e6
# a362be2ce2e049f68f923bb9cd852cf6
# 50ebd86e1bae425882809cbd93c3be75
# 90935b08b5a04c7a9063d58c43511217
# 27a1c92d22984606a6fd09c341a9f973
# dae2272246bc4a8e8c3865fb81927543
# 4afcaa5d6ebc4506948fc10b3b080a7b
# 8c307c69400f436495db25cbff6ba247
#: getfem.asm_bilaplacian:5 getfem.asm_bilaplacian_KL:5
#: getfem.asm_boundary_qu_term:7 getfem.asm_helmholtz:5 getfem.asm_laplacian:5
#: getfem.asm_linear_elasticity:6 getfem.asm_lsneuman_matrix:3
#: getfem.asm_mass_matrix:5 getfem.asm_nlsgrad_matrix:3
#: getfem.asm_stabilization_patch_matrix:3 of
msgid "Return a SpMat object."
msgstr ""

# 3b0a137aa05e41aab7158a0db8db7cda
#: getfem.asm_laplacian:1 of
msgid "Assembly of the matrix for the Laplacian problem."
msgstr ""

# 0fe9aeca13fe48c9a434e60d225829c1
#: getfem.asm_laplacian:3 of
msgid ":math:`\\nabla\\cdot(a(x)\\nabla u)`  with `a` a scalar."
msgstr ""

# daa4cb4bee5b4c03b6ce25d80bbe4e3d
#: getfem.asm_linear_elasticity:1 of
msgid "Assembles of the matrix for the linear (isotropic) elasticity problem."
msgstr ""

# 97c433739c394f878bc1a025c97ecfc6
#: getfem.asm_linear_elasticity:3 of
msgid ""
":math:`\\nabla\\cdot(C(x):\\nabla u)` with :math:`C` defined via "
"`lambda_d` and `mu_d`."
msgstr ""

# fa76e67bb5794a2c95a9a427271a7e1c
#: getfem.asm_nonlinear_elasticity:1 of
msgid ""
"Synopsis: TRHS = asm_nonlinear_elasticity(MeshIm mim, MeshFem mf_u, vec "
"U, string law, MeshFem mf_d, mat params, {'tangent "
"matrix'|'rhs'|'incompressible tangent matrix', MeshFem mf_p, vec "
"P|'incompressible rhs', MeshFem mf_p, vec P})"
msgstr ""

# 38b06d54d1a640bd820a76a048d8f5d4
#: getfem.asm_nonlinear_elasticity:3 of
msgid ""
"Assembles terms (tangent matrix and right hand side) for nonlinear "
"elasticity."
msgstr ""

# e7573a74308349bc90a01693f7e529b0
#: getfem.asm_nonlinear_elasticity:5 of
msgid ""
"The solution `U` is required at the current time-step. The `law` may be "
"choosen among:"
msgstr ""

# d15988954bef4271b7620793fc6ec377
#: getfem.asm_nonlinear_elasticity:8 of
msgid ""
"'SaintVenant Kirchhoff': Linearized law, should be avoided). This law has"
" the two usual Lame coefficients as parameters, called lambda and mu."
msgstr ""

# 7eaf723d274c43748831713629e2b60f
#: getfem.asm_nonlinear_elasticity:11 of
msgid ""
"'Mooney Rivlin': This law has three parameters, called C1, C2 and D1. Can"
" be preceded with the words 'compressible' or 'incompressible' to force a"
" specific version. By default, the incompressible version is considered "
"which requires only the first two material coefficients."
msgstr ""

# 218ecee4100348f6b0f88667b61a5408
#: getfem.asm_nonlinear_elasticity:16 of
msgid ""
"'neo Hookean': A special case of the 'Mooney Rivlin' law that requires "
"one material coefficient less (C2 = 0). By default, its compressible "
"version is used."
msgstr ""

# 16d95022a87d4fbdb764dfdbd0e08539
#: getfem.asm_nonlinear_elasticity:19 of
msgid ""
"'Ciarlet Geymonat': This law has 3 parameters, called lambda, mu and "
"gamma, with gamma chosen such that gamma is in ]-lambda/2-mu, -mu[."
msgstr ""

# 3753e0278b6e4d249343727370121e06
#: getfem.asm_nonlinear_elasticity:23 of
msgid ""
"The parameters of the material law are described on the MeshFem `mf_d`. "
"The matrix `params` should have `nbdof(mf_d)` columns, each row "
"correspounds to a parameter."
msgstr ""

# a3a66296b6f844e0ad4a716512538ef1
#: getfem.asm_nonlinear_elasticity:27 of
msgid ""
"The last argument selects what is to be built: either the tangent matrix,"
" or the right hand side. If the incompressibility is considered, it "
"should be followed by a MeshFem `mf_p`, for the pression."
msgstr ""

# 280e647677504f17aa38a3f54bde8102
#: getfem.asm_nonlinear_elasticity:32 of
msgid ""
"Return a SpMat object (tangent matrix), vec object (right hand side), "
"tuple of SpMat objects (incompressible tangent matrix), or tuple of vec "
"objects (incompressible right hand side)."
msgstr ""

# 5cdb473f5c154fb399038bc6071bb692
#: getfem.asm_helmholtz:1 of
msgid "Assembly of the matrix for the Helmholtz problem."
msgstr ""

# 6ee352d2e8774097b7431c9378688988
#: getfem.asm_helmholtz:3 of
msgid ":math:`\\Delta u + k^2 u` = 0,  with `k` complex scalar."
msgstr ""

# 87c7d72810e444abbd53a30e4450757d
#: getfem.asm_bilaplacian:1 of
msgid "Assembly of the matrix for the Bilaplacian problem."
msgstr ""

# 28762d9f8a5c46229198dacb77e7b9f1
# 70bcbe4c8f1b435abea946c8e39c87dc
#: getfem.asm_bilaplacian:3 getfem.asm_bilaplacian_KL:3 of
msgid ":math:`\\Delta(a(x)\\Delta u) = 0`   with `a` scalar."
msgstr ""

# 0cdefab547634f918f14fb5a8068e483
#: getfem.asm_bilaplacian_KL:1 of
msgid ""
"Assembly of the matrix for the Bilaplacian problem with Kirchhoff-Love "
"formulation."
msgstr ""

# 4d6db1277439488f865bb942d024ef85
#: getfem.asm_volumic_source:1 of
msgid "Assembly of a volumic source term."
msgstr ""

# 7759b305269646ec803cbc8180ce8147
#: getfem.asm_volumic_source:3 of
msgid ""
"Output a vector `V`, assembled on the MeshFem `mf_u`, using the data "
"vector `fd` defined on the data MeshFem `mf_d`. `fd` may be real or "
"complex-valued."
msgstr ""

# 398d16586b0742b38c3d70c7e386197c
# a7fa7f56b22044408cc4dfc24c4427f8
# 2de0efb72f0845fabad22e0b51a0c9cf
# e79d692c3371439188626ed5563c7478
#: getfem.asm_boundary_source:7 getfem.asm_integral_contact_Uzawa_projection:7
#: getfem.asm_level_set_normal_source_term:6 getfem.asm_volumic_source:7 of
msgid "Return a vec object."
msgstr ""

# 84d23d8186cb4e54a1e1813489eac71f
#: getfem.asm_boundary_source:1 of
msgid "Assembly of a boundary source term."
msgstr ""

# 1c85d416572445a19d0e63581c39929b
#: getfem.asm_boundary_source:3 of
msgid ""
"`G` should be a [Qdim x N] matrix, where N is the number of dof of "
"`mf_d`, and Qdim is the dimension of the unkown u (that is set when "
"creating the MeshFem)."
msgstr ""

# 86c1f76b1ad941708a6e7650f11af715
#: getfem.asm_dirichlet:1 of
msgid "Assembly of Dirichlet conditions of type `h.u = r`."
msgstr ""

# 37f817f182414847a2ebbc706238f57f
#: getfem.asm_dirichlet:3 of
msgid ""
"Handle `h.u = r` where h is a square matrix (of any rank) whose size is "
"equal to the dimension of the unkown u. This matrix is stored in `H`, one"
" column per dof in `mf_d`, each column containing the values of the "
"matrix h stored in fortran order:"
msgstr ""

# af050edbc66646c7a2e62ef1af7df62e
#: getfem.asm_dirichlet:12 of
msgid "if u is a 2D vector field."
msgstr ""

# 7b90056e42e94a31ba8b7aae5a30ae28
#: getfem.asm_dirichlet:14 of
msgid ""
"Of course, if the unknown is a scalar field, you just have to set `H = "
"ones(1, N)`, where N is the number of dof of `mf_d`."
msgstr ""

# fb4e76f42bc043ee863734d11c7cf35a
#: getfem.asm_dirichlet:17 of
msgid ""
"This is basically the same than calling gf_asm('boundary qu term') for "
"`H` and calling gf_asm('neumann') for `R`, except that this function "
"tries to produce a 'better' (more diagonal) constraints matrix (when "
"possible)."
msgstr ""

# c9344a4991c4450ab7cd9a9d63f18d58
#: getfem.asm_dirichlet:22 of
msgid "See also Spmat.Dirichlet_nullspace()."
msgstr ""

# 0ae948f1afa3432cb648a7c895c2c5d4
#: getfem.asm_boundary_qu_term:1 of
msgid "Assembly of a boundary qu term."
msgstr ""

# 0f72d90c203e43e19fbc8b0f7558eb17
#: getfem.asm_boundary_qu_term:3 of
msgid ""
"`q` should be be a [Qdim x Qdim x N] array, where N is the number of dof "
"of `mf_d`, and Qdim is the dimension of the unkown u (that is set when "
"creating the MeshFem)."
msgstr ""

# 1b9c45f186b0496d820fbb7bf9e64f0a
#: getfem.asm_define_function:1 of
msgid ""
"Synopsis: asm_define_function(string name, int nb_args, string "
"expression[, string expression_derivative_t[, string "
"expression_derivative_u]])"
msgstr ""

# 0b705ee4414b4d50b21ce31b5cc704a8
#: getfem.asm_define_function:3 of
msgid ""
"Define a new function `name` which can be used in high level generic "
"assembly. The function can have one or two parameters. In `expression` "
"all available predefined function or operation of the generic assembly "
"can be used. However, no reference to some variables or data can be "
"specified. The argument of the function is `t` for a one parameter "
"function and `t` and `u` for a two parameter function. For instance "
"'sin(pi*t)+2*t*t' is a valid expression for a one parameter function and "
"'sin(max(t,u)*pi)' is a valid expression for a two parameters function. "
"`expression_derivative_t` and `expression_derivative_u` are optional "
"expressions for the derivatives with respect to `t` and `u`. If they are "
"not furnished, a symbolic derivation is used."
msgstr ""

# 150515def72d42669f81556d1af30005
#: getfem.asm_undefine_function:1 of
msgid ""
"Cancel the definition of a previously defined function `name` for the "
"high level generic assembly."
msgstr ""

# a070de4391824a23b68bf15ca5805088
#: getfem.asm_define_linear_hardening_function:1 of
msgid ""
"Synopsis: asm_define_linear_hardening_function(string name, scalar "
"sigma_y0, scalar H, ... [string 'Frobenius'])"
msgstr ""

# 94627881a05f41c39b730c4325216521
#: getfem.asm_define_linear_hardening_function:3 of
msgid ""
"Define a new linear hardening function under the name `name`, with "
"initial yield stress `sigma_y0` and hardening modulus H. If an extra "
"string argument with the value 'Frobenius' is provided, the hardening "
"function is expressed in terms of Frobenius norms of its input strain and"
" output stress, instead of their Von-Mises equivalents."
msgstr ""

# 0a11dfa067304b49817207a2eceef4fa
#: getfem.asm_define_Ramberg_Osgood_hardening_function:1 of
msgid ""
"Synopsis: asm_define_Ramberg_Osgood_hardening_function(string name, "
"scalar sigma_ref, {scalar eps_ref | scalar E, scalar alpha}, scalar n[, "
"string 'Frobenius'])"
msgstr ""

# 9b407c3792154f7390fefe26b059db47
#: getfem.asm_define_Ramberg_Osgood_hardening_function:3 of
msgid ""
"Define a new Ramberg Osgood hardening function under the name `name`, "
"with initial yield stress `sigma_y0` and hardening modulus H. If an extra"
" string argument with the value 'Frobenius' is provided, the hardening "
"function is expressed in terms of Frobenius norms of its input strain and"
" output stress, instead of their Von-Mises equivalents."
msgstr ""

# b44e9d473b664e7cac3fd404599708a4
#: getfem.asm_expression_analysis:1 of
msgid ""
"Synopsis: asm_expression_analysis(string expression [, {@tm mesh | MeshIm"
" mim}] [, der_order] [, Model model] [, string varname, int is_variable[,"
" {MeshFem mf | MeshImd mimd}], ...])"
msgstr ""

# a9d82514e8e141688e04591c6ac603ce
#: getfem.asm_expression_analysis:3 of
msgid ""
"Analyse a high-level generic assembly expression and print information "
"about the provided expression."
msgstr ""

# 2f4f5fbefbcd4a31839eae20b40b5dca
#: getfem.asm_volumic:1 of
msgid ""
"Synopsis: (...) = asm_volumic(,CVLST], expr [, mesh_ims, mesh_fems, "
"data...])"
msgstr ""

# 3dc07d0438774c20bc2676a6524b1d86
#: getfem.asm_volumic:3 of
msgid "Low-level generic assembly procedure for volumic assembly."
msgstr ""

# d69b2bb4196447d5abbca9668f964002
#: getfem.asm_volumic:5 of
msgid ""
"The expression `expr` is evaluated over the MeshFem's listed in the "
"arguments (with optional data) and assigned to the output arguments. For "
"details about the syntax of assembly expressions, please refer to the "
"getfem user manual (or look at the file getfem_assembling.h in the "
"getfem++ sources)."
msgstr ""

# 3561bf19ec394b9a9bf6a0dc289c8dae
#: getfem.asm_volumic:11 of
msgid "For example, the L2 norm of a field can be computed with::"
msgstr ""

# 689d4f6ed91940c294cc38759b68e64f
#: getfem.asm_volumic:17 of
msgid "The Laplacian stiffness matrix can be evaluated with::"
msgstr ""

# 34d611b31f4342f48b8f883a3ca3e134
#: getfem.asm_boundary:1 of
msgid ""
"Synopsis: (...) = asm_boundary(int bnum, string expr [, MeshIm mim, "
"MeshFem mf, data...])"
msgstr ""

# 2e86073ca6af4ab1bfe8247f76a9d3de
#: getfem.asm_boundary:3 of
msgid "Low-level generic boundary assembly."
msgstr ""

# 7f1ca6261c6c4e2c81ebbc50db280ae8
#: getfem.asm_boundary:5 of
msgid "See the help for gf_asm('volumic')."
msgstr ""

# 86c5b87bafe540d5bb451c848af36d92
#: getfem.asm_interpolation_matrix:1 of
msgid ""
"Synopsis: Mi = asm_interpolation_matrix(MeshFem mf, {MeshFem mfi | vec "
"pts})"
msgstr ""

# 8b838b9feb8d43a3aa447da7b9c82898
#: getfem.asm_interpolation_matrix:3 of
msgid ""
"Build the interpolation matrix from a MeshFem onto another MeshFem or a "
"set of points."
msgstr ""

# 96aa85c142624750aec2e90376ceeff7
#: getfem.asm_interpolation_matrix:5 of
msgid ""
"Return a matrix `Mi`, such that `V = Mi.U` is equal to "
"gf_compute('interpolate_on',mfi). Useful for repeated interpolations. "
"Note that this is just interpolation, no elementary integrations are "
"involved here, and `mfi` has to be lagrangian. In the more general case, "
"you would have to do a L2 projection via the mass matrix."
msgstr ""

# be263f185925470986ad9bafcd674f36
#: getfem.asm_interpolation_matrix:12 of
msgid "`Mi` is a SpMat object."
msgstr ""

# fa4d6990e8c94e33880bc3e8bb341f3d
#: getfem.asm_extrapolation_matrix:1 of
msgid ""
"Synopsis: Me = asm_extrapolation_matrix(MeshFem mf,  {MeshFem mfe | vec "
"pts})"
msgstr ""

# 7396bea96f0c49f9a9ecb59cbda80e71
#: getfem.asm_extrapolation_matrix:3 of
msgid ""
"Build the extrapolation matrix from a MeshFem onto another MeshFem or a "
"set of points."
msgstr ""

# e9be6ac9743842b6b092799f42c28b34
#: getfem.asm_extrapolation_matrix:5 of
msgid ""
"Return a matrix `Me`, such that `V = Me.U` is equal to "
"gf_compute('extrapolate_on',mfe). Useful for repeated extrapolations."
msgstr ""

# 580d980c6cad46be82897cf6380b0392
#: getfem.asm_extrapolation_matrix:9 of
msgid "`Me` is a SpMat object."
msgstr ""

# 8850b9188d0246978962ba8f42324e5b
#: getfem.asm_integral_contact_Uzawa_projection:1 of
msgid ""
"Synopsis: B = asm_integral_contact_Uzawa_projection(int bnum, MeshIm mim,"
" MeshFem mf_u, vec U, MeshFem mf_lambda, vec vec_lambda, MeshFem "
"mf_obstacle, vec obstacle, scalar r [, {scalar coeff | MeshFem mf_coeff, "
"vec coeff} [, int option[, scalar alpha, vec W]]])"
msgstr ""

# 9dca08ea858949238c0f1685ba86eb98
#: getfem.asm_integral_contact_Uzawa_projection:5 of
msgid "Specific assembly procedure for the use of an Uzawa algorithm to solve"
msgstr ""

# 7b321b191c2f42aeb2be41ca38ed9133
#: getfem.asm_integral_contact_Uzawa_projection:4 of
msgid ""
"contact problems. Projects the term $-(\\lambda - r (u_N-g))_-$ on the "
"finite element space of $\\lambda$."
msgstr ""

# d902bdc0e0264430a33d191d502716be
#: getfem.asm_level_set_normal_source_term:1 of
msgid ""
"Performs an assembly of the source term represented by `vec_lambda` on "
"`mf_lambda` considered to be a component in the direction of the gradient"
" of a levelset function (normal to the levelset) of a vector field "
"defined on `mf_u` on the boundary `bnum`."
msgstr ""

# 6493a67791334f3ba7143af8019d6b44
#: getfem.asm_lsneuman_matrix:1 of
msgid "Assembly of a level set Neuman  matrix."
msgstr ""

# 7de755a54e2441e8b500bf27af3f3229
#: getfem.asm_nlsgrad_matrix:1 of
msgid "Assembly of a nlsgrad matrix."
msgstr ""

# c1abb3d4db364bbb9c3b623dec208700
#: getfem.asm_stabilization_patch_matrix:1 of
msgid "Assembly of stabilization patch matrix ."
msgstr ""

