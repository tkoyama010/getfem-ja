# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-07-07 10:04+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

# ef94827f870a4fe1a8d69a11215ceedf
#: ../source/python/cmdref_MeshFem.rst:8
msgid "MeshFem"
msgstr ""

# 63f597666dfa41409a70f48a281574ee
#: getfem.MeshFem:1 of
msgid "GeFEM MeshFem object"
msgstr ""

# bb877c0675ae43b0bf6f1bb9c48a75d2
#: getfem.MeshFem:3 of
msgid "This object represents a finite element method defined on a whole mesh."
msgstr ""

# 141a764956ae47d081afee6d88db811b
#: getfem.MeshFem:6 of
msgid "General constructor for MeshFem objects"
msgstr ""

# eb55d40772e94e0e80a8fef2984275cb
#: getfem.MeshFem:8 of
msgid ""
"``MF = MeshFem(Mesh m[, int Qdim1=1[, int Qdim2=1, ...]])`` Build a new "
"MeshFem object."
msgstr ""

# d9c2d541984143b6bda380b2076c9b41
#: getfem.MeshFem:11 of
msgid ""
"The `Qdim` parameters specifies the dimension of the field represented by"
" the finite element method. Qdim1 = 1 for a scalar field, Qdim1 = n for a"
" vector field off size n, Qdim1=m, Qdim2=n for a matrix field of size mxn"
" ... Returns the handle of the created object."
msgstr ""

# ca7617d776f1488d8bafe4aef1b4ac4a
#: getfem.MeshFem:17 of
msgid ""
"``MF = MeshFem('load', string fname[, Mesh m])`` Load a MeshFem from a "
"file."
msgstr ""

# 64b8ec2bc4d84e1da61832db33ff3033
#: getfem.MeshFem:20 of
msgid ""
"If the mesh `m` is not supplied (this kind of file does not store the "
"mesh), then it is read from the file `fname` and its descriptor is "
"returned as the second output argument."
msgstr ""

# 23c0f7e256ac45d7b11f707c469e950d
#: getfem.MeshFem:24 of
msgid ""
"``MF = MeshFem('from string', string s[, Mesh m])`` Create a MeshFem "
"object from its string description."
msgstr ""

# 5578aed42e094ef29b608ec7c916e0a8
#: getfem.MeshFem:27 of
msgid "See also ``MeshFem.char()``"
msgstr ""

# d57d728fab674f35b3164b0a11ed275c
#: getfem.MeshFem:29 of
msgid "``MF = MeshFem('clone', MeshFem mf)`` Create a copy of a MeshFem."
msgstr ""

# 16fcd35c76914384b9e6d5074cef1f8a
#: getfem.MeshFem:32 of
msgid ""
"``MF = MeshFem('sum', MeshFem mf1, MeshFem mf2[, MeshFem mf3[, ...]])`` "
"Create a MeshFem that spans two (or more) MeshFem's."
msgstr ""

# 78402a186be6433abe77299f6ce91354
#: getfem.MeshFem:35 of
msgid "All MeshFem must share the same mesh."
msgstr ""

# dff501a9574e4092abf977973dd21d91
#: getfem.MeshFem:37 of
msgid "After that, you should not modify the FEM of `mf1`, `mf2` etc."
msgstr ""

# 0c9c9c7c263a41c4bdce5872852f561c
#: getfem.MeshFem:39 of
msgid ""
"``MF = MeshFem('product', MeshFem mf1, MeshFem mf2)`` Create a MeshFem "
"that spans all the product of a selection of shape functions of `mf1` by "
"all shape functions of `mf2`. Designed for Xfem enrichment."
msgstr ""

# 1ebe7c0f523747e3ba346e5d59263194
#: getfem.MeshFem:44 of
msgid "`mf1` and `mf2` must share the same mesh."
msgstr ""

# e320562fa5a744c1a8e901c9cbf4f30a
#: getfem.MeshFem:46 of
msgid "After that, you should not modify the FEM of `mf1`, `mf2`."
msgstr ""

# 76ed8df850be4526ba3911a451c3564f
#: getfem.MeshFem:48 of
msgid ""
"``MF = MeshFem('levelset', MeshLevelSet mls, MeshFem mf)`` Create a "
"MeshFem that is conformal to implicit surfaces defined in MeshLevelSet."
msgstr ""

# 80067443acee41679c1a794e6891f34f
#: getfem.MeshFem:52 of
msgid ""
"``MF = MeshFem('global function', Mesh m, LevelSet ls, (GlobalFunction "
"GF1,...)[, int Qdim_m])`` Create a MeshFem whose base functions are "
"global function given by the user in the system of coordinate defined by "
"the iso-values of the two level-set function of `ls`."
msgstr ""

# edf25034054a4a02ba1d1b34fced409d
#: getfem.MeshFem:57 of
msgid ""
"``MF = MeshFem('partial', MeshFem mf, ivec DOFs[, ivec RCVs])`` Build a "
"restricted MeshFem by keeping only a subset of the degrees of freedom of "
"`mf`."
msgstr ""

# 741661a4620c4458b16cdd49cc8bd35f
# b781cd470e8a47528c111fceed3a39c3
#: getfem.MeshFem:61 getfem.MeshFem.set_partial:4 of
msgid "If `RCVs` is given, no FEM will be put on the convexes listed in `RCVs`."
msgstr ""

# 0e1ff0a98c6948309409dc933766c574
#: getfem.MeshFem.adapt:1 of
msgid ""
"For a MeshFem levelset object only. Adapt the mesh_fem object to a change"
" of the levelset function."
msgstr ""

# 9087c62f9af9439a888f41fbe003ccec
#: getfem.MeshFem.basic_dof_from_cv:1 of
msgid "Return the dof of the convexes listed in `CVids`."
msgstr ""

# 305b51be8a984c21bfb6f6cadce730a4
#: getfem.MeshFem.basic_dof_from_cv:3 of
msgid ""
"WARNING: the Degree of Freedom might be returned in ANY order, do not use"
" this function in your assembly routines. Use 'basic dof from cvid' "
"instead, if you want to be able to map a convex number with its "
"associated degrees of freedom."
msgstr ""

# cb4892a44f1548dfb3092d0dc1e4569f
#: getfem.MeshFem.basic_dof_from_cv:8 of
msgid ""
"One can also get the list of basic dof on a set on convex faces, by "
"indicating on the second row of `CVids` the faces numbers (with respect "
"to the convex number on the first row)."
msgstr ""

# e594f1a227cd4109a9bb3383f667ee7f
#: getfem.MeshFem.basic_dof_from_cvid:1 of
msgid "Return the degrees of freedom attached to each convex of the mesh."
msgstr ""

# 3812bdd6d55640428a24397899833f43
#: getfem.MeshFem.basic_dof_from_cvid:3 of
msgid ""
"If `CVids` is omitted, all the convexes will be considered (equivalent to"
" `CVids = 1 ... Mesh.max_cvid()`)."
msgstr ""

# 2589acc07344451081071eae626696ab
#: getfem.MeshFem.basic_dof_from_cvid:6 of
msgid ""
"`IDx` is a vector, `length(IDx) = length(CVids)+1`. `DOFs` is a vector "
"containing the concatenated list of dof of each convex in `CVids`. Each "
"entry of `IDx` is the position of the corresponding convex point list in "
"`DOFs`. Hence, for example, the list of points of the second convex is "
"DOFs[IDx(2):IDx(3)]."
msgstr ""

# d99280dc306c4af9b34f3b32b8fc976b
#: getfem.MeshFem.basic_dof_from_cvid:12 of
msgid ""
"If `CVids` contains convex #id which do not exist in the mesh, their "
"point list will be empty."
msgstr ""

# b1c9545f299a4d2c9270b3cbe1be331c
#: getfem.MeshFem.basic_dof_nodes:1 of
msgid "Get location of basic degrees of freedom."
msgstr ""

# 5803dfbcc0ac4391b2fdc31038d52061
#: getfem.MeshFem.basic_dof_nodes:3 of
msgid ""
"Return the list of interpolation points for the specified dof #IDs in "
"`DOFids` (if `DOFids` is omitted, all basic dof are considered)."
msgstr ""

# 78f0b85f85ad42eda53de7bdcd69c865
#: getfem.MeshFem.basic_dof_on_region:1 of
msgid ""
"Return the list of basic dof (before the optional reduction) lying on one"
" of the mesh regions listed in `Rs`."
msgstr ""

# ea2af9bfd32347ddbe9d05e0a2fa40d6
# c10daaf6a02b48aca5dd094922a95e0c
#: getfem.MeshFem.basic_dof_on_region:4 getfem.MeshFem.dof_on_region:4 of
msgid ""
"More precisely, this function returns the basic dof whose support is non-"
"null on one of regions whose #ids are listed in `Rs` (note that for "
"boundary regions, some dof nodes may not lie exactly on the boundary, for"
" example the dof of Pk(n,0) lies on the center of the convex, but the "
"base function in not null on the convex border)."
msgstr ""

# 694ac7f4a2b54b8cb2087a03965105a5
#: getfem.MeshFem.char:1 of
msgid "Output a string description of the MeshFem."
msgstr ""

# 2caa1699102c4f3da7c62032563b9be6
#: getfem.MeshFem.char:3 of
msgid ""
"By default, it does not include the description of the linked mesh "
"object, except if `opt` is 'with_mesh'."
msgstr ""

# 4d1357d9b5944cd28cdd8cec3947223a
#: getfem.MeshFem.convex_index:1 of
msgid "Return the list of convexes who have a FEM."
msgstr ""

# 130102b465fc4a1e8aac483b69c5a4ad
#: getfem.MeshFem.display:1 of
msgid "displays a short summary for a MeshFem object."
msgstr ""

# 4aeb1a93aa204cfe8c9ce5e5eaf6bea6
#: getfem.MeshFem.dof_from_cv:1 of
msgid "Deprecated function. Use MeshFem.basic_dof_from_cv() instead."
msgstr ""

# fa627c0da6ff461b8d74731645b0fd52
#: getfem.MeshFem.dof_from_cvid:1 of
msgid "Deprecated function. Use MeshFem.basic_dof_from_cvid() instead."
msgstr ""

# b7042c6b4d2a49158164b556c1aed881
#: getfem.MeshFem.dof_from_im:1 of
msgid ""
"Return a selection of dof who contribute significantly to the mass-matrix"
" that would be computed with `mf` and the integration method `mim`."
msgstr ""

# da7e670b691f4f3e9634001a8bda8538
#: getfem.MeshFem.dof_from_im:5 of
msgid ""
"`p` represents the dimension on what the integration method operates "
"(default `p = mesh dimension`)."
msgstr ""

# f1523b46a4644ef0a126dd4e8008c3fd
#: getfem.MeshFem.dof_from_im:8 of
msgid ""
"IMPORTANT: you still have to set a valid integration method on the "
"convexes which are not crosses by the levelset!"
msgstr ""

# 918913dc41164728bde6d37d782b863b
#: getfem.MeshFem.dof_nodes:1 of
msgid "Deprecated function. Use MeshFem.basic_dof_nodes() instead."
msgstr ""

# 48b0be55514b41a8b801cc01de12136c
#: getfem.MeshFem.dof_on_region:1 of
msgid ""
"Return the list of dof (after the optional reduction) lying on one of the"
" mesh regions listed in `Rs`."
msgstr ""

# 5aeedbf66a5041119ae95152ae3f1e3f
#: getfem.MeshFem.dof_on_region:11 of
msgid ""
"For a reduced mesh_fem a dof is lying on a region if its potential "
"corresponding shape function is nonzero on this region. The extension "
"matrix is used to make the correspondance between basic and reduced dofs."
msgstr ""

# 75ef308e548f4629aacd5a404c293874
#: getfem.MeshFem.dof_partition:1 of
msgid "Get the 'dof_partition' array."
msgstr ""

# 6d22e0cf174b4ca29ae232c4498d851e
#: getfem.MeshFem.dof_partition:3 of
msgid ""
"Return the array which associates an integer (the partition number) to "
"each convex of the MeshFem. By default, it is an all-zero array. The "
"degrees of freedom of each convex of the MeshFem are connected only to "
"the dof of neighbouring convexes which have the same partition number, "
"hence it is possible to create partially discontinuous MeshFem very "
"easily."
msgstr ""

# 863871651eba45afa2aa8b6524833960
#: getfem.MeshFem.eval:1 of
msgid "interpolate an expression on the (lagrangian) MeshFem."
msgstr ""

# 8f4d271e1ff444228bceb4e24e37760c
#: getfem.MeshFem.eval:3 of
msgid "Examples::"
msgstr ""

# 616a1479cdd94226a086066095be104c
#: getfem.MeshFem.export_to_dx:1 of
msgid ""
"Synopsis: MeshFem.export_to_dx(self,string filename, ...['as', string "
"mesh_name][,'edges']['serie',string serie_name][,'ascii'][,'append'], U, "
"'name'...)"
msgstr ""

# 31883fa1cf084c6aaf7fddab614c355d
#: getfem.MeshFem.export_to_dx:3 of
msgid "Export a MeshFem and some fields to an OpenDX file."
msgstr ""

# 663def6666b6421987a257c8306ac9de
#: getfem.MeshFem.export_to_dx:5 of
msgid ""
"This function will fail if the MeshFem mixes different convex types (i.e."
" quads and triangles), or if OpenDX does not handle a specific element "
"type (i.e. prism connections are not known by OpenDX)."
msgstr ""

# 8dcbc30c85584705b8c407aaf749a657
#: getfem.MeshFem.export_to_dx:9 of
msgid ""
"The FEM will be mapped to order 1 Pk (or Qk) FEMs. If you need to "
"represent high-order FEMs or high-order geometric transformations, you "
"should consider Slice.export_to_dx()."
msgstr ""

# 0b62b7ae942d44eb9fdb81a8dfecadaa
#: getfem.MeshFem.export_to_pos:1 of
msgid ""
"Synopsis: MeshFem.export_to_pos(self,string filename[, string "
"name][[,MeshFem mf1], mat U1, string nameU1[[,MeshFem mf2], mat U2, "
"string nameU2,...]])"
msgstr ""

# eec86c39d08e4a94bf5e87ed50a531bd
#: getfem.MeshFem.export_to_pos:3 of
msgid "Export a MeshFem and some fields to a pos file."
msgstr ""

# 85dc832069214b5ab35a5047c5901d07
#: getfem.MeshFem.export_to_pos:5 of
msgid ""
"The FEM and geometric transformations will be mapped to order 1 "
"isoparametric Pk (or Qk) FEMs (as GMSH does not handle higher order "
"elements)."
msgstr ""

# d9091d5c537b49a4ae0000095b53f3d2
#: getfem.MeshFem.export_to_vtk:1 of
msgid ""
"Synopsis: MeshFem.export_to_vtk(self,string filename, ... ['ascii'], U, "
"'name'...)"
msgstr ""

# de28e25249f9421da5f6eeff715db36f
#: getfem.MeshFem.export_to_vtk:3 of
msgid "Export a MeshFem and some fields to a vtk file."
msgstr ""

# 609d948e943e4d60b800f968743bcf25
#: getfem.MeshFem.export_to_vtk:5 of
msgid ""
"The FEM and geometric transformations will be mapped to order 1 or 2 "
"isoparametric Pk (or Qk) FEMs (as VTK does not handle higher order "
"elements). If you need to represent high-order FEMs or high-order "
"geometric transformations, you should consider Slice.export_to_vtk()."
msgstr ""

# 05870af9000c4ed8a5bc24230283260a
#: getfem.MeshFem.extend_vector:1 of
msgid "Multiply the provided vector V with the reduction matrix of the MeshFem."
msgstr ""

# 9f90dae47fbd47b2b996dbac4127911e
#: getfem.MeshFem.extension_matrix:1 of
msgid "Return the optional extension matrix."
msgstr ""

# 957ffff1884a4a0f8d199c72edd01f3c
#: getfem.MeshFem.fem:1 of
msgid "Return a list of FEM used by the MeshFem."
msgstr ""

# 7d9121929f5c45e0bdc5e3fe7ff000f8
#: getfem.MeshFem.fem:3 of
msgid ""
"`FEMs` is an array of all Fem objects found in the convexes given in "
"`CVids`. If `CV2F` was supplied as an output argument, it contains, for "
"each convex listed in `CVids`, the index of its correspounding FEM in "
"`FEMs`."
msgstr ""

# 958d0ca49c4a4988bcb8442e4918a7c6
#: getfem.MeshFem.fem:8 of
msgid ""
"Convexes which are not part of the mesh, or convexes which do not have "
"any FEM have their correspounding entry in `CV2F` set to -1."
msgstr ""

# 830fd6d732064b58953e3d4520ec6647
#: getfem.MeshFem.has_linked_mesh_levelset:1 of
msgid "Is a mesh_fem_level_set or not."
msgstr ""

# c6e22b7637c84a96a85c42c86009b99f
#: getfem.MeshFem.interpolate_convex_data:1 of
msgid ""
"Interpolate data given on each convex of the mesh to the MeshFem dof. The"
" MeshFem has to be lagrangian, and should be discontinuous (typically a "
"FEM_PK(N,0) or FEM_QK(N,0) should be used)."
msgstr ""

# 81d9e1b5c46a43e7b20d7881890fffda
#: getfem.MeshFem.interpolate_convex_data:5 of
msgid ""
"The last dimension of the input vector Ucv should have Mesh.max_cvid() "
"elements."
msgstr ""

# c4a3f0ae11e74d2a9a507967ca75d2e9
#: getfem.MeshFem.interpolate_convex_data:8 of
msgid "Example of use: MeshFem.interpolate_convex_data(Mesh.quality())"
msgstr ""

# b66d38ba3795481fa8ffd2c752210333
#: getfem.MeshFem.is_equivalent:1 of
msgid "Test if the MeshFem is equivalent."
msgstr ""

# 9ec0e5d54a954149a466ddc8ae32b4b0
# a46687ec1ece4e1396a4a609fe42fa29
#: getfem.MeshFem.is_equivalent:3 getfem.MeshFem.is_polynomial:3 of
msgid "See MeshFem.is_lagrangian()"
msgstr ""

# 237aa54cc13b4702874de1c19659ed13
#: getfem.MeshFem.is_lagrangian:1 of
msgid "Test if the MeshFem is Lagrangian."
msgstr ""

# db75991c787f489dbf154ed33048708d
#: getfem.MeshFem.is_lagrangian:3 of
msgid ""
"Lagrangian means that each base function Phi[i] is such that Phi[i](P[j])"
" = delta(i,j), where P[j] is the dof location of the jth base function, "
"and delta(i,j) = 1 if i==j, else 0."
msgstr ""

# f17eeb462def4906b457de556fe7b79f
#: getfem.MeshFem.is_lagrangian:7 of
msgid ""
"If `CVids` is omitted, it returns 1 if all convexes in the mesh are "
"Lagrangian. If `CVids` is used, it returns the convex indices (with "
"respect to `CVids`) which are Lagrangian."
msgstr ""

# f11595ab684743fda574e55ce007c014
#: getfem.MeshFem.is_polynomial:1 of
msgid "Test if all base functions are polynomials."
msgstr ""

# 1bc6652f99364ec9b65c75003978ca11
#: getfem.MeshFem.is_reduced:1 of
msgid "Return 1 if the optional reduction matrix is applied to the dofs."
msgstr ""

# a008c01741cf496cad1cebb63dfe08e0
#: getfem.MeshFem.linked_mesh:1 of
msgid "Return a reference to the Mesh object linked to `mf`."
msgstr ""

# e27ef5dba7974667964064ed3a1a2f92
#: getfem.MeshFem.linked_mesh_levelset:1 of
msgid "if it is a mesh_fem_level_set gives the linked mesh_level_set."
msgstr ""

# 06922652452b44d793ee7e4ffab3481e
#: getfem.MeshFem.memsize:1 of
msgid "Return the amount of memory (in bytes) used by the mesh_fem object."
msgstr ""

# 182976e421a04dc7b4121eb79190f5b9
#: getfem.MeshFem.memsize:3 of
msgid "The result does not take into account the linked mesh object."
msgstr ""

# 12b0fb1eddd14e5b997731e06db8e193
#: getfem.MeshFem.mesh:1 of
msgid ""
"Return a reference to the Mesh object linked to `mf`. (identical to "
"Mesh.linked_mesh())"
msgstr ""

# b23a0cb2c51a4fdbbdc82dc940e6df28
#: getfem.MeshFem.nb_basic_dof:1 of
msgid "Return the number of basic degrees of freedom (dof) of the MeshFem."
msgstr ""

# e1b3fad8534d478393b6071ad3966499
#: getfem.MeshFem.nbdof:1 of
msgid "Return the number of degrees of freedom (dof) of the MeshFem."
msgstr ""

# a43d037be76c4bd792aa539254b3bcc9
#: getfem.MeshFem.non_conformal_basic_dof:1 of
msgid "Return partially linked degrees of freedom."
msgstr ""

# 5f8ea1dde3e74d30b2a04f863c3d9ea2
#: getfem.MeshFem.non_conformal_basic_dof:3 of
msgid ""
"Return the basic dof located on the border of a convex and which belong "
"to only one convex, except the ones which are located on the border of "
"the mesh.  For example, if the convex 'a' and 'b' share a common face, "
"'a' has a P1 FEM, and 'b' has a P2 FEM, then the basic dof on the middle "
"of the face will be returned by this function (this can be useful when "
"searching the interfaces between classical FEM and hierarchical FEM)."
msgstr ""

# dfbc2d18448f484ca0db65c3617d8004
#: getfem.MeshFem.non_conformal_dof:1 of
msgid "Deprecated function. Use MeshFem.non_conformal_basic_dof() instead."
msgstr ""

# 578068fc5c724508a7d1c486026deb99
#: getfem.MeshFem.qdim:1 of
msgid "Return the dimension Q of the field interpolated by the MeshFem."
msgstr ""

# 9a9d325330624de291ab63a1577cef95
#: getfem.MeshFem.qdim:3 of
msgid "By default, Q=1 (scalar field). This has an impact on the dof numbering."
msgstr ""

# 12f859315a5b4d1ba3ab8b2cb1317d2a
#: getfem.MeshFem.reduce_meshfem:1 of
msgid ""
"Set reduction mesh fem This function selects the degrees of freedom of "
"the finite element method by selecting a set of independent vectors of "
"the matrix RM. The numer of columns of RM should corresponds to the "
"number of degrees of fredoom of the finite element method."
msgstr ""

# c7b60d14e255425fba4f8d5a55317e10
#: getfem.MeshFem.reduce_vector:1 of
msgid "Multiply the provided vector V with the extension matrix of the MeshFem."
msgstr ""

# 01ab714d0750481cb932441ee6c7351c
#: getfem.MeshFem.reduction:1 of
msgid "Set or unset the use of the reduction/extension matrices."
msgstr ""

# 6047d262e0d14b91808fe91e850502d6
#: getfem.MeshFem.reduction_matrices:1 of
msgid "Set the reduction and extension matrices and valid their use."
msgstr ""

# 1ea934494fa1442b9b8e888e32856426
#: getfem.MeshFem.reduction_matrix:1 of
msgid "Return the optional reduction matrix."
msgstr ""

# b8d1a05164b44cd491a27d65c8b0cb79
#: getfem.MeshFem.save:1 of
msgid ""
"Save a MeshFem in a text file (and optionaly its linked mesh object if "
"`opt` is the string 'with_mesh')."
msgstr ""

# 0ac14dccb0734bc0aa6a40259274c693
#: getfem.MeshFem.set_classical_discontinuous_fem:1 of
msgid ""
"Synopsis: MeshFem.set_classical_discontinuous_fem(self, int k[[, "
"'complete'], @tscalar alpha[, ivec CVIDX]])"
msgstr ""

# c8a6947aefbd4ec88bb03b0762c7b18e
#: getfem.MeshFem.set_classical_discontinuous_fem:3 of
msgid "Assigns a classical (Lagrange polynomial) discontinuous fem of order k."
msgstr ""

# da4b2ae5c88a4cceabb0fa68ae85d4aa
#: getfem.MeshFem.set_classical_discontinuous_fem:5 of
msgid ""
"Similar to MeshFem.set_classical_fem() except that FEM_PK_DISCONTINUOUS "
"is used. Param `alpha` the node inset, :math:`0 \\leq alpha < 1`, where 0"
" implies usual dof nodes, greater values move the nodes toward the center"
" of gravity, and 1 means that all degrees of freedom collapse on the "
"center of gravity. The option 'complete' requests complete Langrange "
"polynomial elements, even if the element geometric transformation is an "
"incomplete one (e.g. 8-node quadrilateral or 20-node hexahedral)."
msgstr ""

# 805ae8d5e16541fd97f85090e4dc3cc2
#: getfem.MeshFem.set_classical_fem:1 of
msgid ""
"Synopsis: MeshFem.set_classical_fem(self, int k[[, 'complete'], ivec "
"CVids])"
msgstr ""

# 00464a68cde246b1b0ba96936bb63847
#: getfem.MeshFem.set_classical_fem:3 of
msgid ""
"Assign a classical (Lagrange polynomial) fem of order `k` to the MeshFem."
" The option 'complete' requests complete Langrange polynomial elements, "
"even if the element geometric transformation is an incomplete one (e.g. "
"8-node quadrilateral or 20-node hexahedral)."
msgstr ""

# d764d425cbd2493f9e59b22207904e04
#: getfem.MeshFem.set_classical_fem:8 of
msgid "Uses FEM_PK for simplexes, FEM_QK for parallelepipeds etc."
msgstr ""

# 0913d1054c044f049e96e5339398a46a
#: getfem.MeshFem.set_dof_partition:1 of
msgid "Change the 'dof_partition' array."
msgstr ""

# 793c0edcc9864302bab109ac622b1fce
#: getfem.MeshFem.set_dof_partition:3 of
msgid ""
"`DOFP` is a vector holding a integer value for each convex of the "
"MeshFem. See MeshFem.dof_partition() for a description of \"dof "
"partition\"."
msgstr ""

# a2ba5c57faa3466693656732df16ddd2
#: getfem.MeshFem.set_enriched_dofs:1 of
msgid ""
"For a MeshFem product object only. Set te enriched dofs and adapt the "
"MeshFem product."
msgstr ""

# e85f8499f988453f8cafcf79121ab0e8
#: getfem.MeshFem.set_fem:1 of
msgid "Set the Finite Element Method."
msgstr ""

# 4efd48ae355549999c0bb2337273416a
#: getfem.MeshFem.set_fem:3 of
msgid ""
"Assign a FEM `f` to all convexes whose #ids are listed in `CVids`. If "
"`CVids` is not given, the integration is assigned to all convexes."
msgstr ""

# 87bbcdf33d784d1e9ed070bb12028179
#: getfem.MeshFem.set_fem:6 of
msgid "See the help of Fem to obtain a list of available FEM methods."
msgstr ""

# 15ff41245883445591de493c99b64aff
#: getfem.MeshFem.set_partial:1 of
msgid ""
"Can only be applied to a partial MeshFem. Change the subset of the "
"degrees of freedom of `mf`."
msgstr ""

# 7fcf0c9d89794f92af8ff8a912c354d3
#: getfem.MeshFem.set_qdim:1 of
msgid "Change the `Q` dimension of the field that is interpolated by the MeshFem."
msgstr ""

# 49508726ef5f4b8dbcab0c7619b97f2a
#: getfem.MeshFem.set_qdim:3 of
msgid ""
"`Q = 1` means that the MeshFem describes a scalar field, `Q = N` means "
"that the MeshFem describes a vector field of dimension N."
msgstr ""

# 8e58d1ab02dc459688cfb32519d0020b
#~ msgid ""
#~ "Synopsis: MeshFem.set_classical_discontinuous_fem(self, "
#~ "int K[, @tscalar alpha[, ivec CVIDX]])"
#~ msgstr ""

# 34d1eb38630e4b20bd5a75831d21d342
#~ msgid "Assigns a classical (Lagrange polynomial) discontinuous fem or order K."
#~ msgstr ""

# 1766ad5e11c94b0ba28f081cf6ba9896
#~ msgid ""
#~ "Similar to MeshFem.set_classical_fem() except "
#~ "that FEM_PK_DISCONTINUOUS is used. Param "
#~ "`alpha` the node inset, :math:`0 \\leq"
#~ " alpha < 1`, where 0 implies "
#~ "usual dof nodes, greater values move "
#~ "the nodes toward the center of "
#~ "gravity, and 1 means that all "
#~ "degrees of freedom collapse on the "
#~ "center of gravity."
#~ msgstr ""

# 86b20c466e824a4e9432e5d73f0d5cd8
#~ msgid ""
#~ "Assign a classical (Lagrange polynomial) "
#~ "fem of order `k` to the MeshFem."
#~ msgstr ""

