# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2004-2017 GetFEM++ project
# This file is distributed under the same license as the GetFEM++ package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GetFEM++ 5.2\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2018-06-22 15:02+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.5.1\n"

# db1d83afe38f4e029fd78e94c84d4bca
#: ../source/python/cmdref_MeshIm.rst:8
msgid "MeshIm"
msgstr ""

# 3d10347e1d2d4b1d854b35d05f511002
#: getfem.MeshIm:1 of
msgid "GeFEM MeshIm object"
msgstr ""

# 3333f098925d48a7813f510b651f859a
#: getfem.MeshIm:3 of
msgid ""
"This object represents an integration method defined on a whole mesh (an"
"  potentialy on its boundaries)."
msgstr ""

# 59126a3922104d70827454e3e95011b9
#: getfem.MeshIm:7 of
msgid "General constructor for MeshIm objects"
msgstr ""

# dc4ca2ee39574f16ac94986df9dc4ae4
#: getfem.MeshIm:9 of
msgid ""
"``MIM = MeshIm('load', string fname[, Mesh m])`` Load a MeshIm from a "
"file."
msgstr ""

# a03560f07aa9426d9926366e3dc25d70
#: getfem.MeshIm:12 of
msgid ""
"If the mesh `m` is not supplied (this kind of file does not store the "
"mesh), then it is read from the file and its descriptor is returned as "
"the second output argument."
msgstr ""

# d8393b67572c4983b79c6be936d82c30
#: getfem.MeshIm:16 of
msgid ""
"``MIM = MeshIm('from string', string s[, Mesh m])`` Create a MeshIm "
"object from its string description."
msgstr ""

# 17565a8ca2d947948cb2494fd14cf676
#: getfem.MeshIm:19 of
msgid "See also ``MeshIm.char()``"
msgstr ""

# 34f1eb0eb3ab4f419ded0533b5733e0c
#: getfem.MeshIm:21 of
msgid "``MIM = MeshIm('clone', MeshIm mim)`` Create a copy of a MeshIm."
msgstr ""

# c146993f19314952a4a21800128bb0a6
#: getfem.MeshIm:24 of
msgid ""
"``MIM = MeshIm('levelset', MeshLevelSet mls, string where, Integ im[, "
"Integ im_tip[, Integ im_set]])`` Build an integration method conformal to"
" a partition defined implicitely by a levelset."
msgstr ""

# 7c09de5a780c4c3ba9b491fc678288a1
#: getfem.MeshIm:28 of
msgid ""
"The `where` argument define the domain of integration with respect to the"
" levelset, it has to be chosen among 'ALL', 'INSIDE', 'OUTSIDE' and "
"'BOUNDARY'."
msgstr ""

# 6dd0a8f8c5714500bda5c82bfc6ae461
#: getfem.MeshIm:32 of
msgid ""
"it can be completed by a string defining the boolean operation to define "
"the integration domain when there is more than one levelset."
msgstr ""

# e47bbf3442ae4bd298cc7fddd46bad1a
#: getfem.MeshIm:35 of
msgid "the syntax is very simple, for example if there are 3 different levelset,"
msgstr ""

# 10c46ed0e4094077bfbe7305ea58d94d
#: getfem.MeshIm:38 of
msgid ""
"\"a*b*c\" is the intersection of the domains defined by each levelset "
"(this is the default behaviour if this function is not called)."
msgstr ""

# 147625c1b61c43eda401baece5655b69
#: getfem.MeshIm:42 of
msgid "\"a+b+c\" is the union of their domains."
msgstr ""

# 749cf4cb868a4a6fa435ce191486d093
#: getfem.MeshIm:44 of
msgid ""
"\"c-(a+b)\" is the domain of the third levelset minus the union of the "
"domains of the two others."
msgstr ""

# aa9fa9d680fb4bc2851ddf0658a4f827
#: getfem.MeshIm:47 of
msgid ""
"\"!a\" is the complementary of the domain of a (i.e. it is the domain "
"where a(x)>0)"
msgstr ""

# 515e3cb392f345c2a91be422ae209e9a
#: getfem.MeshIm:50 of
msgid ""
"The first levelset is always referred to with \"a\", the second with "
"\"b\", and so on."
msgstr ""

# 458605a6cbc341fcb530fcf6a27a1aed
#: getfem.MeshIm:53 of
msgid "for intance INSIDE(a*b*c)"
msgstr ""

# 3e3ae66ddb564386bd0c0f45295db407
#: getfem.MeshIm:55 of
msgid ""
"CAUTION: this integration method will be defined only on the element cut "
"by the level-set. For the 'ALL', 'INSIDE' and 'OUTSIDE' options it is "
"mandatory to use the method ``MeshIm.set_integ()`` to define the "
"integration method on the remaining elements."
msgstr ""

# 368d947e9b174e299173d4612f668b05
#: getfem.MeshIm:60 of
msgid ""
"``MIM = MeshIm(Mesh m, [{Integ im|int im_degree}])`` Build a new MeshIm "
"object."
msgstr ""

# 491cd701b583453fbb99f08502c04529
#: getfem.MeshIm:63 of
msgid ""
"For convenience, optional arguments (`im` or `im_degree`) can be "
"provided, in that case a call to ``MeshIm.integ()`` is issued with these "
"arguments."
msgstr ""

# 9604242ed6874effbfe16d20cb62d6fe
#: getfem.MeshIm.adapt:1 of
msgid ""
"For a MeshIm levelset object only. Adapt the integration methods to a "
"change of the levelset function."
msgstr ""

# c3c7d4b96583411e8e050da380b5855a
#: getfem.MeshIm.char:1 of
msgid "Output a string description of the MeshIm."
msgstr ""

# 766d665440ff4c4599331414493d7e3c
#: getfem.MeshIm.char:3 of
msgid "By default, it does not include the description of the linked Mesh object."
msgstr ""

# ceeb1caca5434bef9df6c47913e066fd
#: getfem.MeshIm.convex_index:1 of
msgid "Return the list of convexes who have a integration method."
msgstr ""

# a112418fa1524770b7d3c594be4f639a
#: getfem.MeshIm.convex_index:3 of
msgid "Convexes who have the dummy IM_NONE method are not listed."
msgstr ""

# f5c6af05c86146df86a422d479d2ca52
#: getfem.MeshIm.display:1 of
msgid "displays a short summary for a MeshIm object."
msgstr ""

# f3c7f0ed8dd54c2080a254951bf4aece
#: getfem.MeshIm.eltm:1 of
msgid "Return the elementary matrix (or tensor) integrated on the convex `cv`."
msgstr ""

# 0b76c05d36cb4933a006e14c77c7cd12
# 426313d1413c4ab1857e30bb2a5c04b8
#: getfem.MeshIm.eltm:3 getfem.MeshIm.im_nodes:6 of
msgid "**WARNING**"
msgstr ""

# 91b81212210c4e829c9d4dbc81c3b7a8
#: getfem.MeshIm.eltm:5 of
msgid ""
"Be sure that the fem used for the construction of `em` is compatible with"
" the fem assigned to element `cv` ! This is not checked by the function !"
" If the argument `f` is given, then the elementary tensor is integrated "
"on the face `f` of `cv` instead of the whole convex."
msgstr ""

# ba5ec4440f354e2c9003d6601ffa2e9d
#: getfem.MeshIm.im_nodes:1 of
msgid "Return the coordinates of the integration points, with their weights."
msgstr ""

# b97c38e95dc24053bac15ed78784fe4b
#: getfem.MeshIm.im_nodes:3 of
msgid ""
"`CVids` may be a list of convexes, or a list of convex faces, such as "
"returned by Mesh.region()"
msgstr ""

# 5ace8ce5356b434e9a019edbc822261a
#: getfem.MeshIm.im_nodes:8 of
msgid ""
"Convexes which are not part of the mesh, or convexes which do not have an"
" approximate integration method do not have their corresponding entry "
"(this has no meaning for exact integration methods!)."
msgstr ""

# 4972d99fd5344b429f81eff5ab469be5
#: getfem.MeshIm.integ:1 of
msgid "Return a list of integration methods used by the MeshIm."
msgstr ""

# 9ba7c0e4aacf4ecdbf99f704d3548a4b
#: getfem.MeshIm.integ:3 of
msgid ""
"`I` is an array of all Integ objects found in the convexes given in "
"`CVids`. If `CV2I` was supplied as an output argument, it contains, for "
"each convex listed in `CVids`, the index of its correspounding "
"integration method in `I`."
msgstr ""

# 117b6169490d4353a742940489babb2b
#: getfem.MeshIm.integ:8 of
msgid ""
"Convexes which are not part of the mesh, or convexes which do not have "
"any integration method have their correspounding entry in `CV2I` set to "
"-1."
msgstr ""

# 79d8511663294b7b91ba4930b96de460
#: getfem.MeshIm.linked_mesh:1 of
msgid "Returns a reference to the Mesh object linked to `mim`."
msgstr ""

# 8c2573c4b6fc4ef3b394539f9aae1266
#: getfem.MeshIm.memsize:1 of
msgid "Return the amount of memory (in bytes) used by the MeshIm object."
msgstr ""

# 16dac7a810004ea6a18b844b2a69969a
#: getfem.MeshIm.memsize:3 of
msgid "The result does not take into account the linked Mesh object."
msgstr ""

# 229269fc389e455b81856c7b0330ed81
#: getfem.MeshIm.save:1 of
msgid "Saves a MeshIm in a text file (and optionaly its linked mesh object)."
msgstr ""

# b7c3d95e084846409e503880afee7add
#: getfem.MeshIm.set_integ:1 of
msgid "Synopsis: MeshIm.set_integ(self,{Integ im|int im_degree}[, ivec CVids])"
msgstr ""

# 7fe14f408f8c43aaa5303717d6ded827
#: getfem.MeshIm.set_integ:3 of
msgid "Set the integration method."
msgstr ""

# 3440433d1db945f0a7e7bc9389329631
#: getfem.MeshIm.set_integ:5 of
msgid ""
"Assign an integration method to all convexes whose #ids are listed in "
"`CVids`. If `CVids` is not given, the integration is assigned to all "
"convexes. It is possible to assign a specific integration method with an "
"integration method handle `im` obtained via Integ('IM_SOMETHING'), or to "
"let getfem choose a suitable integration method with `im_degree` (choosen"
" such that polynomials of :math:`\\text{degree} \\leq "
"\\text{im\\_degree}` are exactly integrated. If `im_degree=-1`, then the "
"dummy integration method IM_NONE will  be used.)"
msgstr ""

